
c:/Users/jake/Documents/IoT/RoboPot/RoboPot/target/2.0.1/argon/RoboPot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007920  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000db940  000db940  0000b940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000db948  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000484  2003df50  000db94c  0001df50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000041c  2003e3d8  2003e3d8  0002e3d8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dbdd0  000dbdd0  0002bdd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dbdf8  000dbdf8  0002bdf8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0019dd85  00000000  00000000  0002bdfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001af6f  00000000  00000000  001c9b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002f497  00000000  00000000  001e4af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002d58  00000000  00000000  00213f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007ad8  00000000  00000000  00216cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003f858  00000000  00000000  0021e7b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000444f4  00000000  00000000  0025e00f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010bda5  00000000  00000000  002a2503  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000083ec  00000000  00000000  003ae2a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fbab 	bl	da78c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fbcd 	bl	da7dc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003df50 	.word	0x2003df50
   d404c:	000db94c 	.word	0x000db94c
   d4050:	2003e3d4 	.word	0x2003e3d4
   d4054:	2003e3d8 	.word	0x2003e3d8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 f9e1 	bl	d7428 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db914 	.word	0x000db914
   d4080:	000db938 	.word	0x000db938

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b85c 	b.w	d4140 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f96d 	bl	d4368 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 b98b 	b.w	d73ac <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bd0f 	b.w	d6ab8 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bd0d 	b.w	d6ab8 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bd13 	b.w	d6ac8 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fc68 	bl	d6980 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6661 	.word	0x000d6661

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr

000d40ca <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ca:	4770      	bx	lr

000d40cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40cc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ce:	6984      	ldr	r4, [r0, #24]
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN9TCPClientD1Ev+0x30>)
   d40d2:	6003      	str	r3, [r0, #0]
   d40d4:	4605      	mov	r5, r0
   d40d6:	b17c      	cbz	r4, d40f8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	3b01      	subs	r3, #1
   d40dc:	6063      	str	r3, [r4, #4]
   d40de:	b95b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	689b      	ldr	r3, [r3, #8]
   d40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e8:	68a3      	ldr	r3, [r4, #8]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	60a3      	str	r3, [r4, #8]
   d40ee:	b91b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	68db      	ldr	r3, [r3, #12]
   d40f6:	4798      	blx	r3
   d40f8:	4628      	mov	r0, r5
   d40fa:	bd38      	pop	{r3, r4, r5, pc}
   d40fc:	000db654 	.word	0x000db654

000d4100 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4104:	6800      	ldr	r0, [r0, #0]
   d4106:	b108      	cbz	r0, d410c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4108:	f002 fcde 	bl	d6ac8 <free>
class SystemClass {
   d410c:	4620      	mov	r0, r4
   d410e:	bd10      	pop	{r4, pc}

000d4110 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4110:	b40e      	push	{r1, r2, r3}
   d4112:	b503      	push	{r0, r1, lr}
   d4114:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4116:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4118:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d411c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d411e:	f003 f8a0 	bl	d7262 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4122:	b002      	add	sp, #8
   d4124:	f85d eb04 	ldr.w	lr, [sp], #4
   d4128:	b003      	add	sp, #12
   d412a:	4770      	bx	lr

000d412c <_ZN9TCPClientD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff ffcc 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	211c      	movs	r1, #28
   d4138:	f004 f853 	bl	d81e2 <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <setup>:
int i;
int count = 0;
// Start in SEMI_AUTOMATIC Mode
SYSTEM_MODE(SEMI_AUTOMATIC);
int waterTimer = 0;
void setup() {
   d4140:	b570      	push	{r4, r5, r6, lr}
  Serial.begin(9600);
   d4142:	f003 fa87 	bl	d7654 <_Z16_fetch_usbserialv>
   d4146:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d414a:	f003 fa77 	bl	d763c <_ZN9USBSerial5beginEl>

  pinMode(PUMPPIN, OUTPUT);
   d414e:	2101      	movs	r1, #1
   d4150:	2007      	movs	r0, #7
   d4152:	f003 ff87 	bl	d8064 <pinMode>
  pinMode(MOISTUREPIN, INPUT);
   d4156:	2100      	movs	r1, #0
   d4158:	2013      	movs	r0, #19
   d415a:	f003 ff83 	bl	d8064 <pinMode>
  pinMode(DUSTPIN, INPUT);
   d415e:	2100      	movs	r1, #0
   d4160:	2010      	movs	r0, #16
   d4162:	f003 ff7f 	bl	d8064 <pinMode>
  pinMode(AIRPIN, INPUT);
   d4166:	2100      	movs	r1, #0
   d4168:	2011      	movs	r0, #17
   d416a:	f003 ff7b 	bl	d8064 <pinMode>
  //setup I2C
  Wire.begin();
  for (i = 0; i <= 127; i++)
   d416e:	4c52      	ldr	r4, [pc, #328]	; (d42b8 <setup+0x178>)
  {
    Wire.beginTransmission (i);
    //Serial.printf("Wire transmission end returned: %i \n",Wire.endTransmission());
    if (Wire.endTransmission () == 0)
      {
      Serial.printf("Found address: %03i (0x%02X) \n",i,i);  
   d4170:	4e52      	ldr	r6, [pc, #328]	; (d42bc <setup+0x17c>)
      count++;
   d4172:	4d53      	ldr	r5, [pc, #332]	; (d42c0 <setup+0x180>)
  Wire.begin();
   d4174:	f004 f808 	bl	d8188 <_Z19__fetch_global_Wirev>
   d4178:	f003 fb52 	bl	d7820 <_ZN7TwoWire5beginEv>
  for (i = 0; i <= 127; i++)
   d417c:	2300      	movs	r3, #0
   d417e:	6023      	str	r3, [r4, #0]
    Wire.beginTransmission (i);
   d4180:	f004 f802 	bl	d8188 <_Z19__fetch_global_Wirev>
   d4184:	6821      	ldr	r1, [r4, #0]
   d4186:	f003 fb81 	bl	d788c <_ZN7TwoWire17beginTransmissionEi>
    if (Wire.endTransmission () == 0)
   d418a:	f003 fffd 	bl	d8188 <_Z19__fetch_global_Wirev>
   d418e:	f003 fb84 	bl	d789a <_ZN7TwoWire15endTransmissionEv>
   d4192:	b960      	cbnz	r0, d41ae <setup+0x6e>
      Serial.printf("Found address: %03i (0x%02X) \n",i,i);  
   d4194:	f003 fa5e 	bl	d7654 <_Z16_fetch_usbserialv>
   d4198:	6823      	ldr	r3, [r4, #0]
   d419a:	4631      	mov	r1, r6
   d419c:	461a      	mov	r2, r3
   d419e:	f7ff ffb7 	bl	d4110 <_ZN5Print6printfEPKcz>
      count++;
   d41a2:	682b      	ldr	r3, [r5, #0]
      delay (1);
   d41a4:	2001      	movs	r0, #1
      count++;
   d41a6:	3301      	adds	r3, #1
   d41a8:	602b      	str	r3, [r5, #0]
      delay (1);
   d41aa:	f003 f8bd 	bl	d7328 <delay>
  for (i = 0; i <= 127; i++)
   d41ae:	6823      	ldr	r3, [r4, #0]
   d41b0:	3301      	adds	r3, #1
   d41b2:	2b7f      	cmp	r3, #127	; 0x7f
   d41b4:	6023      	str	r3, [r4, #0]
   d41b6:	dde3      	ble.n	d4180 <setup+0x40>
      } 
  }
  Serial.printf("Done: Found %i device(s). \n",count);
   d41b8:	f003 fa4c 	bl	d7654 <_Z16_fetch_usbserialv>
   d41bc:	4b40      	ldr	r3, [pc, #256]	; (d42c0 <setup+0x180>)
   d41be:	4941      	ldr	r1, [pc, #260]	; (d42c4 <setup+0x184>)
   d41c0:	681a      	ldr	r2, [r3, #0]
   d41c2:	f7ff ffa5 	bl	d4110 <_ZN5Print6printfEPKcz>

  //setup Display
  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
   d41c6:	223c      	movs	r2, #60	; 0x3c
   d41c8:	2102      	movs	r1, #2
   d41ca:	483f      	ldr	r0, [pc, #252]	; (d42c8 <setup+0x188>)
   d41cc:	f000 feec 	bl	d4fa8 <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   d41d0:	483d      	ldr	r0, [pc, #244]	; (d42c8 <setup+0x188>)
   d41d2:	f000 fe79 	bl	d4ec8 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000); // Pause for 2 seconds
   d41d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d41da:	f003 f8a5 	bl	d7328 <delay>

  // Clear the buffer
  display.clearDisplay();
   d41de:	483a      	ldr	r0, [pc, #232]	; (d42c8 <setup+0x188>)
   d41e0:	f000 fdfa 	bl	d4dd8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setRotation(0);
   d41e4:	4838      	ldr	r0, [pc, #224]	; (d42c8 <setup+0x188>)
   d41e6:	2100      	movs	r1, #0
   d41e8:	f001 f969 	bl	d54be <_ZN12Adafruit_GFX11setRotationEh>

  display.setTextSize(1);             // Normal 1:1 pixel scale
   d41ec:	4836      	ldr	r0, [pc, #216]	; (d42c8 <setup+0x188>)
   d41ee:	2101      	movs	r1, #1
   d41f0:	f001 f95b 	bl	d54aa <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);        // Draw white text
   d41f4:	4834      	ldr	r0, [pc, #208]	; (d42c8 <setup+0x188>)
   d41f6:	2101      	movs	r1, #1
   d41f8:	f001 f95c 	bl	d54b4 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d41fc:	2200      	movs	r2, #0
   d41fe:	4611      	mov	r1, r2
   d4200:	4831      	ldr	r0, [pc, #196]	; (d42c8 <setup+0x188>)
   d4202:	f001 f94f 	bl	d54a4 <_ZN12Adafruit_GFX9setCursorEss>
  display.println("Robopot\nPart Container\nPart Computer\nAll Pot");
   d4206:	4931      	ldr	r1, [pc, #196]	; (d42cc <setup+0x18c>)
   d4208:	482f      	ldr	r0, [pc, #188]	; (d42c8 <setup+0x188>)
   d420a:	f002 ff10 	bl	d702e <_ZN5Print7printlnEPKc>
  display.display();
   d420e:	482e      	ldr	r0, [pc, #184]	; (d42c8 <setup+0x188>)
   d4210:	f000 fe5a 	bl	d4ec8 <_ZN16Adafruit_SSD13067displayEv>
  // Draw a single pixel in white

  delay(2000);
   d4214:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4218:	f003 f886 	bl	d7328 <delay>
  Time.zone(-6);
   d421c:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4220:	f003 f858 	bl	d72d4 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4224:	f002 fc30 	bl	d6a88 <spark_cloud_flag_connected>
        if (!connected()) {
   d4228:	b110      	cbz	r0, d4230 <setup+0xf0>
        return spark_sync_time(NULL);
   d422a:	2000      	movs	r0, #0
   d422c:	f002 fc34 	bl	d6a98 <spark_sync_time>
  Particle.syncTime();
  delay(100); //wait for Serial Monitor to startup
   d4230:	2064      	movs	r0, #100	; 0x64
   d4232:	f003 f879 	bl	d7328 <delay>

  //pinMode(A0, INPUT_PULLDOWN);
 

  Serial.printf("Connecting to Internet \n");
   d4236:	f003 fa0d 	bl	d7654 <_Z16_fetch_usbserialv>
   d423a:	4925      	ldr	r1, [pc, #148]	; (d42d0 <setup+0x190>)
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d423c:	4c25      	ldr	r4, [pc, #148]	; (d42d4 <setup+0x194>)
  display.setCursor(0,0);
  display.printf("Connecting to Infonet\n");
  display.display();
  WiFi.connect();
  while(WiFi.connecting()) {
    Serial.printf(".");
   d423e:	4d26      	ldr	r5, [pc, #152]	; (d42d8 <setup+0x198>)
  Serial.printf("Connecting to Internet \n");
   d4240:	f7ff ff66 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.clearDisplay();
   d4244:	4820      	ldr	r0, [pc, #128]	; (d42c8 <setup+0x188>)
   d4246:	f000 fdc7 	bl	d4dd8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0,0);
   d424a:	2200      	movs	r2, #0
   d424c:	4611      	mov	r1, r2
   d424e:	481e      	ldr	r0, [pc, #120]	; (d42c8 <setup+0x188>)
   d4250:	f001 f928 	bl	d54a4 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("Connecting to Infonet\n");
   d4254:	4921      	ldr	r1, [pc, #132]	; (d42dc <setup+0x19c>)
   d4256:	481c      	ldr	r0, [pc, #112]	; (d42c8 <setup+0x188>)
   d4258:	f7ff ff5a 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.display();
   d425c:	481a      	ldr	r0, [pc, #104]	; (d42c8 <setup+0x188>)
   d425e:	f000 fe33 	bl	d4ec8 <_ZN16Adafruit_SSD13067displayEv>
   d4262:	2300      	movs	r3, #0
   d4264:	6860      	ldr	r0, [r4, #4]
   d4266:	461a      	mov	r2, r3
   d4268:	4619      	mov	r1, r3
   d426a:	f002 fbbd 	bl	d69e8 <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d426e:	2200      	movs	r2, #0
   d4270:	6860      	ldr	r0, [r4, #4]
   d4272:	4611      	mov	r1, r2
   d4274:	f002 fbc0 	bl	d69f8 <network_connecting>
  while(WiFi.connecting()) {
   d4278:	b140      	cbz	r0, d428c <setup+0x14c>
    Serial.printf(".");
   d427a:	f003 f9eb 	bl	d7654 <_Z16_fetch_usbserialv>
   d427e:	4629      	mov	r1, r5
   d4280:	f7ff ff46 	bl	d4110 <_ZN5Print6printfEPKcz>
    delay(100);
   d4284:	2064      	movs	r0, #100	; 0x64
   d4286:	f003 f84f 	bl	d7328 <delay>
  while(WiFi.connecting()) {
   d428a:	e7f0      	b.n	d426e <setup+0x12e>
  }
  Serial.printf("\n Connected!!!!!! \n");
   d428c:	f003 f9e2 	bl	d7654 <_Z16_fetch_usbserialv>
   d4290:	4913      	ldr	r1, [pc, #76]	; (d42e0 <setup+0x1a0>)
   d4292:	f7ff ff3d 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.printf("Connected!");
   d4296:	4913      	ldr	r1, [pc, #76]	; (d42e4 <setup+0x1a4>)
   d4298:	480b      	ldr	r0, [pc, #44]	; (d42c8 <setup+0x188>)
   d429a:	f7ff ff39 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.display();
   d429e:	480a      	ldr	r0, [pc, #40]	; (d42c8 <setup+0x188>)
   d42a0:	f000 fe12 	bl	d4ec8 <_ZN16Adafruit_SSD13067displayEv>
  // Setup MQTT subscription for onoff feed.
  //mqtt.subscribe(&TempF);
  mqtt.subscribe(&buttonSub);
   d42a4:	4910      	ldr	r1, [pc, #64]	; (d42e8 <setup+0x1a8>)
   d42a6:	4811      	ldr	r0, [pc, #68]	; (d42ec <setup+0x1ac>)
   d42a8:	f001 fa78 	bl	d579c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
  //airQualitySensor.init();
  bme.begin(0x76);

}
   d42ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  bme.begin(0x76);
   d42b0:	480f      	ldr	r0, [pc, #60]	; (d42f0 <setup+0x1b0>)
   d42b2:	2176      	movs	r1, #118	; 0x76
   d42b4:	f002 b925 	b.w	d6502 <_ZN15Adafruit_BME2805beginEh>
   d42b8:	2003e514 	.word	0x2003e514
   d42bc:	000da9f0 	.word	0x000da9f0
   d42c0:	2003e4c8 	.word	0x2003e4c8
   d42c4:	000daa0f 	.word	0x000daa0f
   d42c8:	2003e4cc 	.word	0x2003e4cc
   d42cc:	000daa2b 	.word	0x000daa2b
   d42d0:	000daa58 	.word	0x000daa58
   d42d4:	2003e7c8 	.word	0x2003e7c8
   d42d8:	000daada 	.word	0x000daada
   d42dc:	000daa71 	.word	0x000daa71
   d42e0:	000daa88 	.word	0x000daa88
   d42e4:	000daae1 	.word	0x000daae1
   d42e8:	2003e490 	.word	0x2003e490
   d42ec:	2003e524 	.word	0x2003e524
   d42f0:	2003e44c 	.word	0x2003e44c

000d42f4 <_Z12MQTT_connectv>:
}


// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
   d42f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int8_t ret;
 
  // Stop if already connected.
  if (mqtt.connected()) {
   d42f6:	4818      	ldr	r0, [pc, #96]	; (d4358 <_Z12MQTT_connectv+0x64>)
   d42f8:	f001 f8f5 	bl	d54e6 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d42fc:	bb50      	cbnz	r0, d4354 <_Z12MQTT_connectv+0x60>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   d42fe:	f003 f9a9 	bl	d7654 <_Z16_fetch_usbserialv>
   d4302:	4916      	ldr	r1, [pc, #88]	; (d435c <_Z12MQTT_connectv+0x68>)
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d4304:	4e14      	ldr	r6, [pc, #80]	; (d4358 <_Z12MQTT_connectv+0x64>)
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d4306:	4f16      	ldr	r7, [pc, #88]	; (d4360 <_Z12MQTT_connectv+0x6c>)
  Serial.print("Connecting to MQTT... ");
   d4308:	f002 fe7e 	bl	d7008 <_ZN5Print5printEPKc>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d430c:	4812      	ldr	r0, [pc, #72]	; (d4358 <_Z12MQTT_connectv+0x64>)
   d430e:	f001 fc06 	bl	d5b1e <_ZN13Adafruit_MQTT7connectEv>
   d4312:	4604      	mov	r4, r0
   d4314:	b1b8      	cbz	r0, d4346 <_Z12MQTT_connectv+0x52>
       Serial.println(mqtt.connectErrorString(ret));
   d4316:	f003 f99d 	bl	d7654 <_Z16_fetch_usbserialv>
   d431a:	4621      	mov	r1, r4
   d431c:	4605      	mov	r5, r0
   d431e:	4630      	mov	r0, r6
   d4320:	f001 fa1a 	bl	d5758 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d4324:	4601      	mov	r1, r0
   d4326:	4628      	mov	r0, r5
   d4328:	f002 fe81 	bl	d702e <_ZN5Print7printlnEPKc>
       Serial.println("Retrying MQTT connection in 5 seconds...");
   d432c:	f003 f992 	bl	d7654 <_Z16_fetch_usbserialv>
   d4330:	4639      	mov	r1, r7
   d4332:	f002 fe7c 	bl	d702e <_ZN5Print7printlnEPKc>
       mqtt.disconnect();
   d4336:	4630      	mov	r0, r6
   d4338:	f001 fa1c 	bl	d5774 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds
   d433c:	f241 3088 	movw	r0, #5000	; 0x1388
   d4340:	f002 fff2 	bl	d7328 <delay>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d4344:	e7e2      	b.n	d430c <_Z12MQTT_connectv+0x18>
  }
  Serial.println("MQTT Connected!");
   d4346:	f003 f985 	bl	d7654 <_Z16_fetch_usbserialv>
}
   d434a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Serial.println("MQTT Connected!");
   d434e:	4905      	ldr	r1, [pc, #20]	; (d4364 <_Z12MQTT_connectv+0x70>)
   d4350:	f002 be6d 	b.w	d702e <_ZN5Print7printlnEPKc>
}
   d4354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4356:	bf00      	nop
   d4358:	2003e524 	.word	0x2003e524
   d435c:	000daa9c 	.word	0x000daa9c
   d4360:	000daab3 	.word	0x000daab3
   d4364:	000daadc 	.word	0x000daadc

000d4368 <loop>:
void loop() {
   d4368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d436c:	ed2d 8b04 	vpush	{d8-d9}
  if ((millis()-last)>120000) {
   d4370:	4c1a      	ldr	r4, [pc, #104]	; (d43dc <loop+0x74>)
void loop() {
   d4372:	b085      	sub	sp, #20
  MQTT_connect();
   d4374:	f7ff ffbe 	bl	d42f4 <_Z12MQTT_connectv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4378:	f002 f97a 	bl	d6670 <HAL_Timer_Get_Milli_Seconds>
  if ((millis()-last)>120000) {
   d437c:	6822      	ldr	r2, [r4, #0]
   d437e:	1a80      	subs	r0, r0, r2
   d4380:	4a17      	ldr	r2, [pc, #92]	; (d43e0 <loop+0x78>)
   d4382:	4290      	cmp	r0, r2
   d4384:	d914      	bls.n	d43b0 <loop+0x48>
      Serial.printf("Pinging MQTT \n");
   d4386:	f003 f965 	bl	d7654 <_Z16_fetch_usbserialv>
   d438a:	4916      	ldr	r1, [pc, #88]	; (d43e4 <loop+0x7c>)
   d438c:	f7ff fec0 	bl	d4110 <_ZN5Print6printfEPKcz>
      if(! mqtt.ping()) {
   d4390:	4815      	ldr	r0, [pc, #84]	; (d43e8 <loop+0x80>)
   d4392:	2101      	movs	r1, #1
   d4394:	f001 fa94 	bl	d58c0 <_ZN13Adafruit_MQTT4pingEh>
   d4398:	b938      	cbnz	r0, d43aa <loop+0x42>
        Serial.printf("Disconnecting \n");
   d439a:	f003 f95b 	bl	d7654 <_Z16_fetch_usbserialv>
   d439e:	4913      	ldr	r1, [pc, #76]	; (d43ec <loop+0x84>)
   d43a0:	f7ff feb6 	bl	d4110 <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   d43a4:	4810      	ldr	r0, [pc, #64]	; (d43e8 <loop+0x80>)
   d43a6:	f001 f9e5 	bl	d5774 <_ZN13Adafruit_MQTT10disconnectEv>
   d43aa:	f002 f961 	bl	d6670 <HAL_Timer_Get_Milli_Seconds>
      last = millis();
   d43ae:	6020      	str	r0, [r4, #0]
  while ((subscription = mqtt.readSubscription(1000))) {
   d43b0:	4e0d      	ldr	r6, [pc, #52]	; (d43e8 <loop+0x80>)
    if (subscription == &buttonSub) {
   d43b2:	4d0f      	ldr	r5, [pc, #60]	; (d43f0 <loop+0x88>)
  while ((subscription = mqtt.readSubscription(1000))) {
   d43b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d43b8:	4630      	mov	r0, r6
   d43ba:	f001 fa0a 	bl	d57d2 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d43be:	b1e8      	cbz	r0, d43fc <loop+0x94>
    if (subscription == &buttonSub) {
   d43c0:	42a8      	cmp	r0, r5
   d43c2:	d1f7      	bne.n	d43b4 <loop+0x4c>
      value = atoi((char *)buttonSub.lastread);
   d43c4:	1d68      	adds	r0, r5, #5
   d43c6:	f006 f9bb 	bl	da740 <atoi>
   d43ca:	4c0a      	ldr	r4, [pc, #40]	; (d43f4 <loop+0x8c>)
   d43cc:	6020      	str	r0, [r4, #0]
      Serial.printf("WaterButton value: %i\n",value);
   d43ce:	f003 f941 	bl	d7654 <_Z16_fetch_usbserialv>
   d43d2:	6822      	ldr	r2, [r4, #0]
   d43d4:	4908      	ldr	r1, [pc, #32]	; (d43f8 <loop+0x90>)
   d43d6:	f7ff fe9b 	bl	d4110 <_ZN5Print6printfEPKcz>
   d43da:	e7eb      	b.n	d43b4 <loop+0x4c>
   d43dc:	2003e518 	.word	0x2003e518
   d43e0:	0001d4c0 	.word	0x0001d4c0
   d43e4:	000daaec 	.word	0x000daaec
   d43e8:	2003e524 	.word	0x2003e524
   d43ec:	000daafb 	.word	0x000daafb
   d43f0:	2003e490 	.word	0x2003e490
   d43f4:	2003e638 	.word	0x2003e638
   d43f8:	000dab0b 	.word	0x000dab0b
  digitalWrite(PUMPPIN, value);
   d43fc:	4bd6      	ldr	r3, [pc, #856]	; (d4758 <loop+0x3f0>)
  moisture = analogRead(MOISTUREPIN);
   d43fe:	4cd7      	ldr	r4, [pc, #860]	; (d475c <loop+0x3f4>)
  digitalWrite(PUMPPIN, value);
   d4400:	7819      	ldrb	r1, [r3, #0]
   d4402:	2007      	movs	r0, #7
   d4404:	f003 fe3f 	bl	d8086 <digitalWrite>
  moisture = analogRead(MOISTUREPIN);
   d4408:	2013      	movs	r0, #19
   d440a:	f003 fe68 	bl	d80de <analogRead>
   d440e:	ee07 0a90 	vmov	s15, r0
   d4412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4416:	edc4 7a00 	vstr	s15, [r4]
  Serial.println(moisture);
   d441a:	f003 f91b 	bl	d7654 <_Z16_fetch_usbserialv>
   d441e:	ed94 0a00 	vldr	s0, [r4]
   d4422:	2102      	movs	r1, #2
   d4424:	f002 ff0e 	bl	d7244 <_ZN5Print7printlnEfi>
  moisture = (moisture - 3400) * -1;
   d4428:	edd4 7a00 	vldr	s15, [r4]
   d442c:	ed9f 7acc 	vldr	s14, [pc, #816]	; d4760 <loop+0x3f8>
   d4430:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d4434:	eef1 7a67 	vneg.f32	s15, s15
   d4438:	edc4 7a00 	vstr	s15, [r4]
  Serial.println(moisture);
   d443c:	f003 f90a 	bl	d7654 <_Z16_fetch_usbserialv>
   d4440:	ed94 0a00 	vldr	s0, [r4]
   d4444:	2102      	movs	r1, #2
   d4446:	f002 fefd 	bl	d7244 <_ZN5Print7printlnEfi>
  int moisturePercent = moisture / 17;
   d444a:	edd4 6a00 	vldr	s13, [r4]
   d444e:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
   d4452:	eec6 7a87 	vdiv.f32	s15, s13, s14
   d4456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d445a:	ee17 4a90 	vmov	r4, s15
  Serial.println(moisturePercent);
   d445e:	f003 f8f9 	bl	d7654 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4462:	2c00      	cmp	r4, #0
   d4464:	4605      	mov	r5, r0
   d4466:	f280 81f3 	bge.w	d4850 <loop+0x4e8>
            t = print('-');
   d446a:	212d      	movs	r1, #45	; 0x2d
   d446c:	f002 fdd0 	bl	d7010 <_ZN5Print5printEc>
            val = -n;
   d4470:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4472:	220a      	movs	r2, #10
   d4474:	4628      	mov	r0, r5
   d4476:	f002 fde4 	bl	d7042 <_ZN5Print11printNumberEmh>
        n += println();
   d447a:	4628      	mov	r0, r5
   d447c:	f002 fdcb 	bl	d7016 <_ZN5Print7printlnEv>
  Serial.printf("Moisture: %i\n", moisturePercent);
   d4480:	f003 f8e8 	bl	d7654 <_Z16_fetch_usbserialv>
   d4484:	4622      	mov	r2, r4
   d4486:	49b7      	ldr	r1, [pc, #732]	; (d4764 <loop+0x3fc>)
  tempF = convertToFarenheit(tempC);
   d4488:	4fb7      	ldr	r7, [pc, #732]	; (d4768 <loop+0x400>)
  pressIH = convertToInHg(pressPA);
   d448a:	4eb8      	ldr	r6, [pc, #736]	; (d476c <loop+0x404>)
  humidRH = bme.readHumidity();
   d448c:	f8df 8344 	ldr.w	r8, [pc, #836]	; d47d4 <loop+0x46c>
  lowpulseoccupancy = lowpulseoccupancy+duration;
   d4490:	4db7      	ldr	r5, [pc, #732]	; (d4770 <loop+0x408>)
  if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d4492:	f8df b344 	ldr.w	fp, [pc, #836]	; d47d8 <loop+0x470>
  Serial.printf("Moisture: %i\n", moisturePercent);
   d4496:	f7ff fe3b 	bl	d4110 <_ZN5Print6printfEPKcz>
  tempC = bme.readTemperature();
   d449a:	48b6      	ldr	r0, [pc, #728]	; (d4774 <loop+0x40c>)
   d449c:	f001 fcbc 	bl	d5e18 <_ZN15Adafruit_BME28015readTemperatureEv>
   d44a0:	4bb5      	ldr	r3, [pc, #724]	; (d4778 <loop+0x410>)
   d44a2:	ee10 0a10 	vmov	r0, s0
   d44a6:	ed83 0a00 	vstr	s0, [r3]

float convertToFarenheit(float celsius){
  float farenheit = (celsius * 1.8) + 32;
   d44aa:	f005 fab3 	bl	d9a14 <__aeabi_f2d>
   d44ae:	a39e      	add	r3, pc, #632	; (adr r3, d4728 <loop+0x3c0>)
   d44b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44b4:	f005 fb06 	bl	d9ac4 <__aeabi_dmul>
   d44b8:	2200      	movs	r2, #0
   d44ba:	4bb0      	ldr	r3, [pc, #704]	; (d477c <loop+0x414>)
   d44bc:	f005 f94c 	bl	d9758 <__adddf3>
   d44c0:	f005 fdf8 	bl	da0b4 <__aeabi_d2f>
   d44c4:	6038      	str	r0, [r7, #0]
  pressPA = bme.readPressure();
   d44c6:	48ab      	ldr	r0, [pc, #684]	; (d4774 <loop+0x40c>)
   d44c8:	f001 fcd4 	bl	d5e74 <_ZN15Adafruit_BME28012readPressureEv>
   d44cc:	4bac      	ldr	r3, [pc, #688]	; (d4780 <loop+0x418>)
   d44ce:	ee10 0a10 	vmov	r0, s0
   d44d2:	ed83 0a00 	vstr	s0, [r3]
  return farenheit;
}

float convertToInHg( float pascals){
  float mercury = pascals / 3386.389;
   d44d6:	f005 fa9d 	bl	d9a14 <__aeabi_f2d>
   d44da:	a395      	add	r3, pc, #596	; (adr r3, d4730 <loop+0x3c8>)
   d44dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44e0:	f005 fc1a 	bl	d9d18 <__aeabi_ddiv>
   d44e4:	f005 fde6 	bl	da0b4 <__aeabi_d2f>
   d44e8:	6030      	str	r0, [r6, #0]
  humidRH = bme.readHumidity();
   d44ea:	48a2      	ldr	r0, [pc, #648]	; (d4774 <loop+0x40c>)
   d44ec:	f001 fe04 	bl	d60f8 <_ZN15Adafruit_BME28012readHumidityEv>
  duration = pulseIn(DUSTPIN, LOW);
   d44f0:	2100      	movs	r1, #0
   d44f2:	2010      	movs	r0, #16
  humidRH = bme.readHumidity();
   d44f4:	ed88 0a00 	vstr	s0, [r8]
  duration = pulseIn(DUSTPIN, LOW);
   d44f8:	f003 fe2b 	bl	d8152 <pulseIn>
   d44fc:	4ba1      	ldr	r3, [pc, #644]	; (d4784 <loop+0x41c>)
   d44fe:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy+duration;
   d4500:	682b      	ldr	r3, [r5, #0]
   d4502:	4418      	add	r0, r3
   d4504:	6028      	str	r0, [r5, #0]
   d4506:	f002 f8b3 	bl	d6670 <HAL_Timer_Get_Milli_Seconds>
  if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   d450a:	4b9f      	ldr	r3, [pc, #636]	; (d4788 <loop+0x420>)
   d450c:	f8cd 800c 	str.w	r8, [sp, #12]
   d4510:	f8d3 a000 	ldr.w	sl, [r3]
   d4514:	f8db 3000 	ldr.w	r3, [fp]
   d4518:	1ac0      	subs	r0, r0, r3
   d451a:	4550      	cmp	r0, sl
   d451c:	e9cd 7601 	strd	r7, r6, [sp, #4]
   d4520:	f240 808d 	bls.w	d463e <loop+0x2d6>
    ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
   d4524:	6828      	ldr	r0, [r5, #0]
   d4526:	4e99      	ldr	r6, [pc, #612]	; (d478c <loop+0x424>)
   d4528:	f005 fa52 	bl	d99d0 <__aeabi_ui2d>
   d452c:	4680      	mov	r8, r0
   d452e:	4650      	mov	r0, sl
   d4530:	4689      	mov	r9, r1
   d4532:	f005 fa4d 	bl	d99d0 <__aeabi_ui2d>
   d4536:	4b96      	ldr	r3, [pc, #600]	; (d4790 <loop+0x428>)
   d4538:	2200      	movs	r2, #0
   d453a:	f005 fac3 	bl	d9ac4 <__aeabi_dmul>
   d453e:	4602      	mov	r2, r0
   d4540:	460b      	mov	r3, r1
   d4542:	4640      	mov	r0, r8
   d4544:	4649      	mov	r1, r9
   d4546:	f005 fbe7 	bl	d9d18 <__aeabi_ddiv>
   d454a:	f005 fdb3 	bl	da0b4 <__aeabi_d2f>
   d454e:	6030      	str	r0, [r6, #0]
    Serial.printf("Ratio: %i", ratio);
   d4550:	f003 f880 	bl	d7654 <_Z16_fetch_usbserialv>
   d4554:	4607      	mov	r7, r0
   d4556:	6830      	ldr	r0, [r6, #0]
   d4558:	f005 fa5c 	bl	d9a14 <__aeabi_f2d>
   d455c:	4602      	mov	r2, r0
   d455e:	460b      	mov	r3, r1
   d4560:	4638      	mov	r0, r7
   d4562:	498c      	ldr	r1, [pc, #560]	; (d4794 <loop+0x42c>)
    dustConcentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   d4564:	4f8c      	ldr	r7, [pc, #560]	; (d4798 <loop+0x430>)
    Serial.printf("Ratio: %i", ratio);
   d4566:	f7ff fdd3 	bl	d4110 <_ZN5Print6printfEPKcz>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d456a:	6830      	ldr	r0, [r6, #0]
   d456c:	f005 fa52 	bl	d9a14 <__aeabi_f2d>
   d4570:	ed9f 1b71 	vldr	d1, [pc, #452]	; d4738 <loop+0x3d0>
   d4574:	ec41 0b10 	vmov	d0, r0, r1
   d4578:	f003 ff4a 	bl	d8410 <pow>
    dustConcentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   d457c:	ed96 8a00 	vldr	s16, [r6]
   d4580:	ee18 0a10 	vmov	r0, s16
   d4584:	ec59 8b10 	vmov	r8, r9, d0
   d4588:	f005 fa44 	bl	d9a14 <__aeabi_f2d>
   d458c:	a36c      	add	r3, pc, #432	; (adr r3, d4740 <loop+0x3d8>)
   d458e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4592:	ec41 0b19 	vmov	d9, r0, r1
   d4596:	4640      	mov	r0, r8
   d4598:	4649      	mov	r1, r9
   d459a:	f005 fa93 	bl	d9ac4 <__aeabi_dmul>
   d459e:	ec53 2b19 	vmov	r2, r3, d9
   d45a2:	4680      	mov	r8, r0
   d45a4:	4689      	mov	r9, r1
   d45a6:	ee19 0a10 	vmov	r0, s18
   d45aa:	4619      	mov	r1, r3
   d45ac:	f005 fa8a 	bl	d9ac4 <__aeabi_dmul>
   d45b0:	a365      	add	r3, pc, #404	; (adr r3, d4748 <loop+0x3e0>)
   d45b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45b6:	f005 fa85 	bl	d9ac4 <__aeabi_dmul>
   d45ba:	4602      	mov	r2, r0
   d45bc:	460b      	mov	r3, r1
   d45be:	4640      	mov	r0, r8
   d45c0:	4649      	mov	r1, r9
   d45c2:	f005 f8c7 	bl	d9754 <__aeabi_dsub>
   d45c6:	eddf 7a75 	vldr	s15, [pc, #468]	; d479c <loop+0x434>
   d45ca:	ee68 7a27 	vmul.f32	s15, s16, s15
   d45ce:	4680      	mov	r8, r0
   d45d0:	ee17 0a90 	vmov	r0, s15
   d45d4:	4689      	mov	r9, r1
   d45d6:	f005 fa1d 	bl	d9a14 <__aeabi_f2d>
   d45da:	4602      	mov	r2, r0
   d45dc:	460b      	mov	r3, r1
   d45de:	4640      	mov	r0, r8
   d45e0:	4649      	mov	r1, r9
   d45e2:	f005 f8b9 	bl	d9758 <__adddf3>
   d45e6:	a35a      	add	r3, pc, #360	; (adr r3, d4750 <loop+0x3e8>)
   d45e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45ec:	f005 f8b4 	bl	d9758 <__adddf3>
   d45f0:	f005 fd60 	bl	da0b4 <__aeabi_d2f>
   d45f4:	6038      	str	r0, [r7, #0]
    Serial.print(lowpulseoccupancy);
   d45f6:	f003 f82d 	bl	d7654 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d45fa:	220a      	movs	r2, #10
   d45fc:	6829      	ldr	r1, [r5, #0]
   d45fe:	f002 fd20 	bl	d7042 <_ZN5Print11printNumberEmh>
    Serial.print(",");
   d4602:	f003 f827 	bl	d7654 <_Z16_fetch_usbserialv>
   d4606:	4966      	ldr	r1, [pc, #408]	; (d47a0 <loop+0x438>)
   d4608:	f002 fcfe 	bl	d7008 <_ZN5Print5printEPKc>
    Serial.print(ratio);
   d460c:	f003 f822 	bl	d7654 <_Z16_fetch_usbserialv>
   d4610:	ed96 0a00 	vldr	s0, [r6]
   d4614:	2102      	movs	r1, #2
   d4616:	f002 fdfb 	bl	d7210 <_ZN5Print5printEfi>
    Serial.print(",");
   d461a:	f003 f81b 	bl	d7654 <_Z16_fetch_usbserialv>
   d461e:	4960      	ldr	r1, [pc, #384]	; (d47a0 <loop+0x438>)
   d4620:	f002 fcf2 	bl	d7008 <_ZN5Print5printEPKc>
    Serial.println(dustConcentration);
   d4624:	f003 f816 	bl	d7654 <_Z16_fetch_usbserialv>
   d4628:	ed97 0a00 	vldr	s0, [r7]
   d462c:	2102      	movs	r1, #2
   d462e:	f002 fe09 	bl	d7244 <_ZN5Print7printlnEfi>
    lowpulseoccupancy = 0;
   d4632:	2300      	movs	r3, #0
   d4634:	602b      	str	r3, [r5, #0]
   d4636:	f002 f81b 	bl	d6670 <HAL_Timer_Get_Milli_Seconds>
    starttime = millis();
   d463a:	f8cb 0000 	str.w	r0, [fp]
  if (moisturePercent < 20){
   d463e:	2c13      	cmp	r4, #19
   d4640:	dc0b      	bgt.n	d465a <loop+0x2f2>
    digitalWrite(MOISTUREPIN, HIGH);
   d4642:	2101      	movs	r1, #1
   d4644:	2013      	movs	r0, #19
   d4646:	f003 fd1e 	bl	d8086 <digitalWrite>
    delay(500);
   d464a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d464e:	f002 fe6b 	bl	d7328 <delay>
    digitalWrite(MOISTUREPIN, LOW);
   d4652:	2100      	movs	r1, #0
   d4654:	2013      	movs	r0, #19
   d4656:	f003 fd16 	bl	d8086 <digitalWrite>
  airQuality=airQualitySensor.slope();
   d465a:	4852      	ldr	r0, [pc, #328]	; (d47a4 <loop+0x43c>)
   d465c:	4d52      	ldr	r5, [pc, #328]	; (d47a8 <loop+0x440>)
   d465e:	f001 ff79 	bl	d6554 <_ZN16AirQualitySensor5slopeEv>
  if (airQuality >= 0)// if a valid data returned.
   d4662:	2800      	cmp	r0, #0
  airQuality=airQualitySensor.slope();
   d4664:	6028      	str	r0, [r5, #0]
  if (airQuality >= 0)// if a valid data returned.
   d4666:	db06      	blt.n	d4676 <loop+0x30e>
    if (airQuality==0)
   d4668:	f040 80f4 	bne.w	d4854 <loop+0x4ec>
      Serial.println("High pollution! Force signal active");
   d466c:	f002 fff2 	bl	d7654 <_Z16_fetch_usbserialv>
   d4670:	494e      	ldr	r1, [pc, #312]	; (d47ac <loop+0x444>)
      Serial.println("Fresh air");   
   d4672:	f002 fcdc 	bl	d702e <_ZN5Print7printlnEPKc>
  display.clearDisplay();
   d4676:	484e      	ldr	r0, [pc, #312]	; (d47b0 <loop+0x448>)
  display.printf("Dust: %f", dustConcentration);
   d4678:	4e47      	ldr	r6, [pc, #284]	; (d4798 <loop+0x430>)
  if (millis() > publishTimer){
   d467a:	4f4e      	ldr	r7, [pc, #312]	; (d47b4 <loop+0x44c>)
  display.clearDisplay();
   d467c:	f000 fbac 	bl	d4dd8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setRotation(0);
   d4680:	484b      	ldr	r0, [pc, #300]	; (d47b0 <loop+0x448>)
   d4682:	2100      	movs	r1, #0
   d4684:	f000 ff1b 	bl	d54be <_ZN12Adafruit_GFX11setRotationEh>
  display.setTextSize(1);             // Normal 1:1 pixel scale
   d4688:	4849      	ldr	r0, [pc, #292]	; (d47b0 <loop+0x448>)
   d468a:	2101      	movs	r1, #1
   d468c:	f000 ff0d 	bl	d54aa <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);        // Draw white text
   d4690:	4847      	ldr	r0, [pc, #284]	; (d47b0 <loop+0x448>)
   d4692:	2101      	movs	r1, #1
   d4694:	f000 ff0e 	bl	d54b4 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d4698:	2200      	movs	r2, #0
   d469a:	4611      	mov	r1, r2
   d469c:	4844      	ldr	r0, [pc, #272]	; (d47b0 <loop+0x448>)
   d469e:	f000 ff01 	bl	d54a4 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("Soil moisture: %i\n", moisturePercent);
   d46a2:	4622      	mov	r2, r4
   d46a4:	4944      	ldr	r1, [pc, #272]	; (d47b8 <loop+0x450>)
   d46a6:	4842      	ldr	r0, [pc, #264]	; (d47b0 <loop+0x448>)
   d46a8:	f7ff fd32 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.printf("Temperature: %.3f\n", tempF);
   d46ac:	9b01      	ldr	r3, [sp, #4]
   d46ae:	6818      	ldr	r0, [r3, #0]
   d46b0:	f005 f9b0 	bl	d9a14 <__aeabi_f2d>
   d46b4:	4602      	mov	r2, r0
   d46b6:	460b      	mov	r3, r1
   d46b8:	483d      	ldr	r0, [pc, #244]	; (d47b0 <loop+0x448>)
   d46ba:	4940      	ldr	r1, [pc, #256]	; (d47bc <loop+0x454>)
   d46bc:	f7ff fd28 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.printf("Humidity: %.3f\n", humidRH);
   d46c0:	9b03      	ldr	r3, [sp, #12]
   d46c2:	6818      	ldr	r0, [r3, #0]
   d46c4:	f005 f9a6 	bl	d9a14 <__aeabi_f2d>
   d46c8:	4602      	mov	r2, r0
   d46ca:	460b      	mov	r3, r1
   d46cc:	4838      	ldr	r0, [pc, #224]	; (d47b0 <loop+0x448>)
   d46ce:	493c      	ldr	r1, [pc, #240]	; (d47c0 <loop+0x458>)
   d46d0:	f7ff fd1e 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.printf("Pressure: %.3f\n", pressIH);
   d46d4:	9b02      	ldr	r3, [sp, #8]
   d46d6:	6818      	ldr	r0, [r3, #0]
   d46d8:	f005 f99c 	bl	d9a14 <__aeabi_f2d>
   d46dc:	460b      	mov	r3, r1
   d46de:	4602      	mov	r2, r0
   d46e0:	4938      	ldr	r1, [pc, #224]	; (d47c4 <loop+0x45c>)
   d46e2:	4833      	ldr	r0, [pc, #204]	; (d47b0 <loop+0x448>)
   d46e4:	f7ff fd14 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.printf("Air Quality: %i\n", airQuality);
   d46e8:	682a      	ldr	r2, [r5, #0]
   d46ea:	4937      	ldr	r1, [pc, #220]	; (d47c8 <loop+0x460>)
   d46ec:	4830      	ldr	r0, [pc, #192]	; (d47b0 <loop+0x448>)
   d46ee:	f7ff fd0f 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.printf("Dust: %f", dustConcentration);
   d46f2:	6830      	ldr	r0, [r6, #0]
   d46f4:	f005 f98e 	bl	d9a14 <__aeabi_f2d>
   d46f8:	460b      	mov	r3, r1
   d46fa:	4602      	mov	r2, r0
   d46fc:	4933      	ldr	r1, [pc, #204]	; (d47cc <loop+0x464>)
   d46fe:	482c      	ldr	r0, [pc, #176]	; (d47b0 <loop+0x448>)
   d4700:	f7ff fd06 	bl	d4110 <_ZN5Print6printfEPKcz>
  display.display();
   d4704:	482a      	ldr	r0, [pc, #168]	; (d47b0 <loop+0x448>)
   d4706:	f000 fbdf 	bl	d4ec8 <_ZN16Adafruit_SSD13067displayEv>
   d470a:	f001 ffb1 	bl	d6670 <HAL_Timer_Get_Milli_Seconds>
  if (millis() > publishTimer){
   d470e:	683b      	ldr	r3, [r7, #0]
   d4710:	4283      	cmp	r3, r0
   d4712:	f080 8098 	bcs.w	d4846 <loop+0x4de>
    if(mqtt.Update()) {
   d4716:	482e      	ldr	r0, [pc, #184]	; (d47d0 <loop+0x468>)
   d4718:	f000 ff63 	bl	d55e2 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d471c:	2800      	cmp	r0, #0
   d471e:	f000 8092 	beq.w	d4846 <loop+0x4de>
   d4722:	e05b      	b.n	d47dc <loop+0x474>
   d4724:	f3af 8000 	nop.w
   d4728:	cccccccd 	.word	0xcccccccd
   d472c:	3ffccccc 	.word	0x3ffccccc
   d4730:	2b020c4a 	.word	0x2b020c4a
   d4734:	40aa74c7 	.word	0x40aa74c7
   d4738:	00000000 	.word	0x00000000
   d473c:	40080000 	.word	0x40080000
   d4740:	9999999a 	.word	0x9999999a
   d4744:	3ff19999 	.word	0x3ff19999
   d4748:	66666666 	.word	0x66666666
   d474c:	400e6666 	.word	0x400e6666
   d4750:	3d70a3d7 	.word	0x3d70a3d7
   d4754:	3fe3d70a 	.word	0x3fe3d70a
   d4758:	2003e638 	.word	0x2003e638
   d475c:	2003e520 	.word	0x2003e520
   d4760:	45548000 	.word	0x45548000
   d4764:	000dab22 	.word	0x000dab22
   d4768:	2003e628 	.word	0x2003e628
   d476c:	2003e5f8 	.word	0x2003e5f8
   d4770:	2003e51c 	.word	0x2003e51c
   d4774:	2003e44c 	.word	0x2003e44c
   d4778:	2003e624 	.word	0x2003e624
   d477c:	40400000 	.word	0x40400000
   d4780:	2003e5fc 	.word	0x2003e5fc
   d4784:	2003e4f0 	.word	0x2003e4f0
   d4788:	2003df54 	.word	0x2003df54
   d478c:	2003e610 	.word	0x2003e610
   d4790:	40240000 	.word	0x40240000
   d4794:	000dab30 	.word	0x000dab30
   d4798:	2003e4f4 	.word	0x2003e4f4
   d479c:	44020000 	.word	0x44020000
   d47a0:	000dab3a 	.word	0x000dab3a
   d47a4:	2003e430 	.word	0x2003e430
   d47a8:	2003df50 	.word	0x2003df50
   d47ac:	000dab3c 	.word	0x000dab3c
   d47b0:	2003e4cc 	.word	0x2003e4cc
   d47b4:	2003e60c 	.word	0x2003e60c
   d47b8:	000dab89 	.word	0x000dab89
   d47bc:	000dab9c 	.word	0x000dab9c
   d47c0:	000dabaf 	.word	0x000dabaf
   d47c4:	000dabbf 	.word	0x000dabbf
   d47c8:	000dabcf 	.word	0x000dabcf
   d47cc:	000dabe0 	.word	0x000dabe0
   d47d0:	2003e524 	.word	0x2003e524
   d47d4:	2003e504 	.word	0x2003e504
   d47d8:	2003e620 	.word	0x2003e620
      humidityPub.publish(humidRH);
   d47dc:	9b03      	ldr	r3, [sp, #12]
   d47de:	6818      	ldr	r0, [r3, #0]
   d47e0:	f005 f918 	bl	d9a14 <__aeabi_f2d>
   d47e4:	ec41 0b10 	vmov	d0, r0, r1
   d47e8:	2102      	movs	r1, #2
   d47ea:	4824      	ldr	r0, [pc, #144]	; (d487c <loop+0x514>)
   d47ec:	f001 fa02 	bl	d5bf4 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      dustConcentrationPub.publish(dustConcentration);
   d47f0:	6830      	ldr	r0, [r6, #0]
   d47f2:	f005 f90f 	bl	d9a14 <__aeabi_f2d>
   d47f6:	ec41 0b10 	vmov	d0, r0, r1
   d47fa:	2102      	movs	r1, #2
   d47fc:	4820      	ldr	r0, [pc, #128]	; (d4880 <loop+0x518>)
   d47fe:	f001 f9f9 	bl	d5bf4 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      soilMoisturePub.publish(moisturePercent);
   d4802:	4621      	mov	r1, r4
   d4804:	481f      	ldr	r0, [pc, #124]	; (d4884 <loop+0x51c>)
   d4806:	f001 f9e6 	bl	d5bd6 <_ZN21Adafruit_MQTT_Publish7publishEi>
      pressurePub.publish(pressIH);
   d480a:	9b02      	ldr	r3, [sp, #8]
   d480c:	6818      	ldr	r0, [r3, #0]
   d480e:	f005 f901 	bl	d9a14 <__aeabi_f2d>
   d4812:	ec41 0b10 	vmov	d0, r0, r1
   d4816:	2102      	movs	r1, #2
   d4818:	481b      	ldr	r0, [pc, #108]	; (d4888 <loop+0x520>)
   d481a:	f001 f9eb 	bl	d5bf4 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      airQualityPub.publish(airQuality);
   d481e:	6829      	ldr	r1, [r5, #0]
   d4820:	481a      	ldr	r0, [pc, #104]	; (d488c <loop+0x524>)
   d4822:	f001 f9d8 	bl	d5bd6 <_ZN21Adafruit_MQTT_Publish7publishEi>
      temperaturePub.publish(tempF);
   d4826:	9b01      	ldr	r3, [sp, #4]
   d4828:	6818      	ldr	r0, [r3, #0]
   d482a:	f005 f8f3 	bl	d9a14 <__aeabi_f2d>
   d482e:	ec41 0b10 	vmov	d0, r0, r1
   d4832:	2102      	movs	r1, #2
   d4834:	4816      	ldr	r0, [pc, #88]	; (d4890 <loop+0x528>)
   d4836:	f001 f9dd 	bl	d5bf4 <_ZN21Adafruit_MQTT_Publish7publishEdh>
   d483a:	f001 ff19 	bl	d6670 <HAL_Timer_Get_Milli_Seconds>
      publishTimer = millis() + 30000;
   d483e:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   d4842:	3030      	adds	r0, #48	; 0x30
   d4844:	6038      	str	r0, [r7, #0]
}
   d4846:	b005      	add	sp, #20
   d4848:	ecbd 8b04 	vpop	{d8-d9}
   d484c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            val = n;
   d4850:	4621      	mov	r1, r4
   d4852:	e60e      	b.n	d4472 <loop+0x10a>
    else if (airQuality==1)
   d4854:	2801      	cmp	r0, #1
   d4856:	d103      	bne.n	d4860 <loop+0x4f8>
      Serial.println("High pollution!");
   d4858:	f002 fefc 	bl	d7654 <_Z16_fetch_usbserialv>
   d485c:	490d      	ldr	r1, [pc, #52]	; (d4894 <loop+0x52c>)
   d485e:	e708      	b.n	d4672 <loop+0x30a>
    else if (airQuality==2)
   d4860:	2802      	cmp	r0, #2
   d4862:	d103      	bne.n	d486c <loop+0x504>
      Serial.println("Low pollution!");
   d4864:	f002 fef6 	bl	d7654 <_Z16_fetch_usbserialv>
   d4868:	490b      	ldr	r1, [pc, #44]	; (d4898 <loop+0x530>)
   d486a:	e702      	b.n	d4672 <loop+0x30a>
    else if (airQuality ==3)
   d486c:	2803      	cmp	r0, #3
   d486e:	f47f af02 	bne.w	d4676 <loop+0x30e>
      Serial.println("Fresh air");   
   d4872:	f002 feef 	bl	d7654 <_Z16_fetch_usbserialv>
   d4876:	4909      	ldr	r1, [pc, #36]	; (d489c <loop+0x534>)
   d4878:	e6fb      	b.n	d4672 <loop+0x30a>
   d487a:	bf00      	nop
   d487c:	2003e508 	.word	0x2003e508
   d4880:	2003e4f8 	.word	0x2003e4f8
   d4884:	2003e614 	.word	0x2003e614
   d4888:	2003e600 	.word	0x2003e600
   d488c:	2003e424 	.word	0x2003e424
   d4890:	2003e62c 	.word	0x2003e62c
   d4894:	000dab60 	.word	0x000dab60
   d4898:	000dab70 	.word	0x000dab70
   d489c:	000dab7f 	.word	0x000dab7f

000d48a0 <_ZN16Adafruit_SSD1306D0Ev>:
   d48a0:	b510      	push	{r4, lr}
   d48a2:	2124      	movs	r1, #36	; 0x24
   d48a4:	4604      	mov	r4, r0
   d48a6:	f003 fc9c 	bl	d81e2 <_ZdlPvj>
   d48aa:	4620      	mov	r0, r4
   d48ac:	bd10      	pop	{r4, pc}

000d48ae <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d48ae:	b510      	push	{r4, lr}
   d48b0:	21d4      	movs	r1, #212	; 0xd4
   d48b2:	4604      	mov	r4, r0
   d48b4:	f003 fc95 	bl	d81e2 <_ZdlPvj>
   d48b8:	4620      	mov	r0, r4
   d48ba:	bd10      	pop	{r4, pc}

000d48bc <_GLOBAL__sub_I_tempC>:
  return mercury;
   d48bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
String DateTime, TimeOnly;
   d48be:	4f40      	ldr	r7, [pc, #256]	; (d49c0 <_GLOBAL__sub_I_tempC+0x104>)
   d48c0:	4c40      	ldr	r4, [pc, #256]	; (d49c4 <_GLOBAL__sub_I_tempC+0x108>)
   d48c2:	4d41      	ldr	r5, [pc, #260]	; (d49c8 <_GLOBAL__sub_I_tempC+0x10c>)
   d48c4:	4e41      	ldr	r6, [pc, #260]	; (d49cc <_GLOBAL__sub_I_tempC+0x110>)
   d48c6:	4639      	mov	r1, r7
   d48c8:	4620      	mov	r0, r4
   d48ca:	f002 fb44 	bl	d6f56 <_ZN6StringC1EPKc>
   d48ce:	4620      	mov	r0, r4
   d48d0:	4c3f      	ldr	r4, [pc, #252]	; (d49d0 <_GLOBAL__sub_I_tempC+0x114>)
   d48d2:	462a      	mov	r2, r5
   d48d4:	4631      	mov	r1, r6
   d48d6:	f003 fc7f 	bl	d81d8 <__aeabi_atexit>
   d48da:	4639      	mov	r1, r7
   d48dc:	4620      	mov	r0, r4
   d48de:	f002 fb3a 	bl	d6f56 <_ZN6StringC1EPKc>
   d48e2:	462a      	mov	r2, r5
   d48e4:	4631      	mov	r1, r6
   d48e6:	4620      	mov	r0, r4
Adafruit_SSD1306 display(OLED_RESET);
   d48e8:	4c3a      	ldr	r4, [pc, #232]	; (d49d4 <_GLOBAL__sub_I_tempC+0x118>)
TCPClient TheClient; 
   d48ea:	4e3b      	ldr	r6, [pc, #236]	; (d49d8 <_GLOBAL__sub_I_tempC+0x11c>)
String DateTime, TimeOnly;
   d48ec:	f003 fc74 	bl	d81d8 <__aeabi_atexit>
AirQualitySensor airQualitySensor(AIRPIN);
   d48f0:	2111      	movs	r1, #17
   d48f2:	483a      	ldr	r0, [pc, #232]	; (d49dc <_GLOBAL__sub_I_tempC+0x120>)
   d48f4:	f001 fe10 	bl	d6518 <_ZN16AirQualitySensorC1Ei>
Adafruit_SSD1306 display(OLED_RESET);
   d48f8:	2104      	movs	r1, #4
   d48fa:	4620      	mov	r0, r4
   d48fc:	f000 fa56 	bl	d4dac <_ZN16Adafruit_SSD1306C1Ea>
   d4900:	462a      	mov	r2, r5
   d4902:	4937      	ldr	r1, [pc, #220]	; (d49e0 <_GLOBAL__sub_I_tempC+0x124>)
   d4904:	4620      	mov	r0, r4
   d4906:	f003 fc67 	bl	d81d8 <__aeabi_atexit>
Adafruit_BME280 bme;
   d490a:	4836      	ldr	r0, [pc, #216]	; (d49e4 <_GLOBAL__sub_I_tempC+0x128>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d490c:	4c36      	ldr	r4, [pc, #216]	; (d49e8 <_GLOBAL__sub_I_tempC+0x12c>)
   d490e:	f001 f9cd 	bl	d5cac <_ZN15Adafruit_BME280C1Ev>
TCPClient TheClient; 
   d4912:	4630      	mov	r0, r6
   d4914:	f003 fa6e 	bl	d7df4 <_ZN9TCPClientC1Ev>
   d4918:	462a      	mov	r2, r5
   d491a:	4934      	ldr	r1, [pc, #208]	; (d49ec <_GLOBAL__sub_I_tempC+0x130>)
   d491c:	4630      	mov	r0, r6
   d491e:	f003 fc5b 	bl	d81d8 <__aeabi_atexit>
   d4922:	4b33      	ldr	r3, [pc, #204]	; (d49f0 <_GLOBAL__sub_I_tempC+0x134>)
   d4924:	9300      	str	r3, [sp, #0]
   d4926:	4933      	ldr	r1, [pc, #204]	; (d49f4 <_GLOBAL__sub_I_tempC+0x138>)
   d4928:	4b33      	ldr	r3, [pc, #204]	; (d49f8 <_GLOBAL__sub_I_tempC+0x13c>)
   d492a:	f240 725b 	movw	r2, #1883	; 0x75b
   d492e:	4620      	mov	r0, r4
   d4930:	f000 fe8c 	bl	d564c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4934:	4b31      	ldr	r3, [pc, #196]	; (d49fc <_GLOBAL__sub_I_tempC+0x140>)
   d4936:	6023      	str	r3, [r4, #0]
   d4938:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d493c:	462a      	mov	r2, r5
   d493e:	4930      	ldr	r1, [pc, #192]	; (d4a00 <_GLOBAL__sub_I_tempC+0x144>)
   d4940:	4620      	mov	r0, r4
   d4942:	f003 fc49 	bl	d81d8 <__aeabi_atexit>
Adafruit_MQTT_Subscribe buttonSub = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/WaterButton"); 
   d4946:	4621      	mov	r1, r4
   d4948:	4a2e      	ldr	r2, [pc, #184]	; (d4a04 <_GLOBAL__sub_I_tempC+0x148>)
   d494a:	482f      	ldr	r0, [pc, #188]	; (d4a08 <_GLOBAL__sub_I_tempC+0x14c>)
   d494c:	2300      	movs	r3, #0
   d494e:	f001 f96d 	bl	d5c2c <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish humidityPub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Humidity");
   d4952:	4621      	mov	r1, r4
   d4954:	4a2d      	ldr	r2, [pc, #180]	; (d4a0c <_GLOBAL__sub_I_tempC+0x150>)
   d4956:	482e      	ldr	r0, [pc, #184]	; (d4a10 <_GLOBAL__sub_I_tempC+0x154>)
   d4958:	2300      	movs	r3, #0
   d495a:	f001 f937 	bl	d5bcc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish dustConcentrationPub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/DustConcentration");
   d495e:	4621      	mov	r1, r4
   d4960:	4a2c      	ldr	r2, [pc, #176]	; (d4a14 <_GLOBAL__sub_I_tempC+0x158>)
   d4962:	482d      	ldr	r0, [pc, #180]	; (d4a18 <_GLOBAL__sub_I_tempC+0x15c>)
   d4964:	2300      	movs	r3, #0
   d4966:	f001 f931 	bl	d5bcc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish soilMoisturePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/SoilMoisture");
   d496a:	4621      	mov	r1, r4
   d496c:	4a2b      	ldr	r2, [pc, #172]	; (d4a1c <_GLOBAL__sub_I_tempC+0x160>)
   d496e:	482c      	ldr	r0, [pc, #176]	; (d4a20 <_GLOBAL__sub_I_tempC+0x164>)
   d4970:	2300      	movs	r3, #0
   d4972:	f001 f92b 	bl	d5bcc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish pressurePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Pressure");
   d4976:	4621      	mov	r1, r4
   d4978:	4a2a      	ldr	r2, [pc, #168]	; (d4a24 <_GLOBAL__sub_I_tempC+0x168>)
   d497a:	482b      	ldr	r0, [pc, #172]	; (d4a28 <_GLOBAL__sub_I_tempC+0x16c>)
   d497c:	2300      	movs	r3, #0
   d497e:	f001 f925 	bl	d5bcc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish airQualityPub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/AirQuality");
   d4982:	4621      	mov	r1, r4
   d4984:	4a29      	ldr	r2, [pc, #164]	; (d4a2c <_GLOBAL__sub_I_tempC+0x170>)
   d4986:	482a      	ldr	r0, [pc, #168]	; (d4a30 <_GLOBAL__sub_I_tempC+0x174>)
   d4988:	2300      	movs	r3, #0
   d498a:	f001 f91f 	bl	d5bcc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish temperaturePub = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Temperature");
   d498e:	4621      	mov	r1, r4
   d4990:	4a28      	ldr	r2, [pc, #160]	; (d4a34 <_GLOBAL__sub_I_tempC+0x178>)
              error_(SYSTEM_ERROR_NONE) {
   d4992:	4c29      	ldr	r4, [pc, #164]	; (d4a38 <_GLOBAL__sub_I_tempC+0x17c>)
   d4994:	4829      	ldr	r0, [pc, #164]	; (d4a3c <_GLOBAL__sub_I_tempC+0x180>)
   d4996:	2300      	movs	r3, #0
   d4998:	f001 f918 	bl	d5bcc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
   d499c:	2300      	movs	r3, #0
   d499e:	6023      	str	r3, [r4, #0]
   d49a0:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d49a2:	71a3      	strb	r3, [r4, #6]
   d49a4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d49a8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d49aa:	2002      	movs	r0, #2
   d49ac:	f001 fff8 	bl	d69a0 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d49b0:	4923      	ldr	r1, [pc, #140]	; (d4a40 <_GLOBAL__sub_I_tempC+0x184>)
   d49b2:	462a      	mov	r2, r5
   d49b4:	4620      	mov	r0, r4
   d49b6:	b003      	add	sp, #12
   d49b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);
   d49bc:	f003 bc0c 	b.w	d81d8 <__aeabi_atexit>
   d49c0:	000daa9b 	.word	0x000daa9b
   d49c4:	2003e3dc 	.word	0x2003e3dc
   d49c8:	2003e3d8 	.word	0x2003e3d8
   d49cc:	000d6ec1 	.word	0x000d6ec1
   d49d0:	2003e414 	.word	0x2003e414
   d49d4:	2003e4cc 	.word	0x2003e4cc
   d49d8:	2003e3f8 	.word	0x2003e3f8
   d49dc:	2003e430 	.word	0x2003e430
   d49e0:	000d40c9 	.word	0x000d40c9
   d49e4:	2003e44c 	.word	0x2003e44c
   d49e8:	2003e524 	.word	0x2003e524
   d49ec:	000d40cd 	.word	0x000d40cd
   d49f0:	000dac04 	.word	0x000dac04
   d49f4:	000dabf4 	.word	0x000dabf4
   d49f8:	000dabe9 	.word	0x000dabe9
   d49fc:	000db264 	.word	0x000db264
   d4a00:	000d40cb 	.word	0x000d40cb
   d4a04:	000dac25 	.word	0x000dac25
   d4a08:	2003e490 	.word	0x2003e490
   d4a0c:	000dac42 	.word	0x000dac42
   d4a10:	2003e508 	.word	0x2003e508
   d4a14:	000dac5c 	.word	0x000dac5c
   d4a18:	2003e4f8 	.word	0x2003e4f8
   d4a1c:	000dac7f 	.word	0x000dac7f
   d4a20:	2003e614 	.word	0x2003e614
   d4a24:	000dac9d 	.word	0x000dac9d
   d4a28:	2003e600 	.word	0x2003e600
   d4a2c:	000dacb7 	.word	0x000dacb7
   d4a30:	2003e424 	.word	0x2003e424
   d4a34:	000dacd3 	.word	0x000dacd3
   d4a38:	2003e3ec 	.word	0x2003e3ec
   d4a3c:	2003e62c 	.word	0x2003e62c
   d4a40:	000d4101 	.word	0x000d4101

000d4a44 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4a44:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4a46:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4a48:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d4a4c:	2d02      	cmp	r5, #2
   d4a4e:	d067      	beq.n	d4b20 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xdc>
   d4a50:	2d03      	cmp	r5, #3
   d4a52:	f000 8097 	beq.w	d4b84 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x140>
   d4a56:	2d01      	cmp	r5, #1
   d4a58:	d16a      	bne.n	d4b30 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xec>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4a5a:	8905      	ldrh	r5, [r0, #8]
   d4a5c:	43d2      	mvns	r2, r2
   d4a5e:	442a      	add	r2, r5
   d4a60:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4a62:	2a00      	cmp	r2, #0
   d4a64:	db5b      	blt.n	d4b1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4a66:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d4a6a:	4295      	cmp	r5, r2
   d4a6c:	dd57      	ble.n	d4b1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4a6e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4a70:	bfbe      	ittt	lt
   d4a72:	185b      	addlt	r3, r3, r1
   d4a74:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4a76:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4a78:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4a7c:	18cd      	adds	r5, r1, r3
   d4a7e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d4a80:	bfc4      	itt	gt
   d4a82:	1a43      	subgt	r3, r0, r1
   d4a84:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4a86:	2b00      	cmp	r3, #0
   d4a88:	dd49      	ble.n	d4b1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4a8a:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   d4a8e:	f8df c11c 	ldr.w	ip, [pc, #284]	; d4bac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>
   d4a92:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4a96:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   d4a9a:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4a9c:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   d4aa0:	d01a      	beq.n	d4ad8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4aa2:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4aa6:	4e3f      	ldr	r6, [pc, #252]	; (d4ba4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x160>)
    mod = 8-mod;
   d4aa8:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4aaa:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d4aac:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d4aae:	bf3f      	itttt	cc
   d4ab0:	eba5 0e03 	subcc.w	lr, r5, r3
   d4ab4:	26ff      	movcc	r6, #255	; 0xff
   d4ab6:	fa46 f60e 	asrcc.w	r6, r6, lr
   d4aba:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
   d4abc:	f81c 6002 	ldrb.w	r6, [ip, r2]
   d4ac0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4ac2:	bf0c      	ite	eq
   d4ac4:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   d4ac6:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4ac8:	42ab      	cmp	r3, r5
   d4aca:	f80c 6002 	strb.w	r6, [ip, r2]
   d4ace:	d326      	bcc.n	d4b1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>

    h -= mod;
   d4ad0:	3908      	subs	r1, #8
   d4ad2:	440b      	add	r3, r1
   d4ad4:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   d4ad6:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4ad8:	2b07      	cmp	r3, #7
   d4ada:	d917      	bls.n	d4b0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4adc:	2c01      	cmp	r4, #1
   d4ade:	bf0c      	ite	eq
   d4ae0:	25ff      	moveq	r5, #255	; 0xff
   d4ae2:	2500      	movne	r5, #0
   d4ae4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d4ae8:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4aea:	3a08      	subs	r2, #8
   d4aec:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4aee:	2a07      	cmp	r2, #7
      *pBuf = val;
   d4af0:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d4af4:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d4af8:	d8f7      	bhi.n	d4aea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xa6>
   d4afa:	f1a3 0208 	sub.w	r2, r3, #8
   d4afe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4b02:	3201      	adds	r2, #1
   d4b04:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d4b08:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4b0c:	b13b      	cbz	r3, d4b1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4b0e:	4a26      	ldr	r2, [pc, #152]	; (d4ba8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
   d4b10:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d4b12:	7803      	ldrb	r3, [r0, #0]
   d4b14:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4b16:	bf0c      	ite	eq
   d4b18:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4b1a:	4393      	bicne	r3, r2
   d4b1c:	7003      	strb	r3, [r0, #0]
}
   d4b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d4b20:	8945      	ldrh	r5, [r0, #10]
   d4b22:	43d2      	mvns	r2, r2
   d4b24:	442a      	add	r2, r5
      x -= (w-1);
   d4b26:	18cd      	adds	r5, r1, r3
   d4b28:	8901      	ldrh	r1, [r0, #8]
   d4b2a:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   d4b2c:	b212      	sxth	r2, r2
      x -= (w-1);
   d4b2e:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   d4b30:	2a00      	cmp	r2, #0
   d4b32:	dbf4      	blt.n	d4b1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4b34:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d4b38:	4295      	cmp	r5, r2
   d4b3a:	ddf0      	ble.n	d4b1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  if(x < 0) { 
   d4b3c:	2900      	cmp	r1, #0
    w += x;
   d4b3e:	bfbe      	ittt	lt
   d4b40:	185b      	addlt	r3, r3, r1
   d4b42:	b21b      	sxthlt	r3, r3
    x = 0;
   d4b44:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   d4b46:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d4b4a:	18ce      	adds	r6, r1, r3
   d4b4c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4b4e:	bfc4      	itt	gt
   d4b50:	1a6b      	subgt	r3, r5, r1
   d4b52:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d4b54:	2b00      	cmp	r3, #0
   d4b56:	dde2      	ble.n	d4b1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4b58:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   d4b5a:	2580      	movs	r5, #128	; 0x80
   d4b5c:	fb10 1105 	smlabb	r1, r0, r5, r1
   d4b60:	4812      	ldr	r0, [pc, #72]	; (d4bac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4b62:	4408      	add	r0, r1
  register uint8_t mask = 1 << (y&7);
   d4b64:	f002 0107 	and.w	r1, r2, #7
   d4b68:	2201      	movs	r2, #1
   d4b6a:	408a      	lsls	r2, r1
  if(color == WHITE) { 
   d4b6c:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d4b6e:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   d4b70:	4403      	add	r3, r0
   d4b72:	d10c      	bne.n	d4b8e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
    while(w--) { *pBuf++ |= mask; }
   d4b74:	4283      	cmp	r3, r0
   d4b76:	d0d2      	beq.n	d4b1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4b78:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4b7c:	4314      	orrs	r4, r2
   d4b7e:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4b82:	e7f7      	b.n	d4b74 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x130>
      y -= (w-1);
   d4b84:	18cd      	adds	r5, r1, r3
   d4b86:	8941      	ldrh	r1, [r0, #10]
   d4b88:	1b49      	subs	r1, r1, r5
   d4b8a:	b209      	sxth	r1, r1
      break;
   d4b8c:	e769      	b.n	d4a62 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   d4b8e:	43d2      	mvns	r2, r2
   d4b90:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   d4b92:	4283      	cmp	r3, r0
   d4b94:	d0c3      	beq.n	d4b1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xda>
   d4b96:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4b9a:	4014      	ands	r4, r2
   d4b9c:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4ba0:	e7f7      	b.n	d4b92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4ba2:	bf00      	nop
   d4ba4:	2003df60 	.word	0x2003df60
   d4ba8:	2003df58 	.word	0x2003df58
   d4bac:	2003df68 	.word	0x2003df68

000d4bb0 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   d4bb2:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4bb4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   d4bb8:	2d02      	cmp	r5, #2
   d4bba:	d034      	beq.n	d4c26 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   d4bbc:	2d03      	cmp	r5, #3
   d4bbe:	f000 8099 	beq.w	d4cf4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x144>
   d4bc2:	2d01      	cmp	r5, #1
   d4bc4:	d137      	bne.n	d4c36 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   d4bc6:	18d5      	adds	r5, r2, r3
   d4bc8:	8902      	ldrh	r2, [r0, #8]
   d4bca:	1b52      	subs	r2, r2, r5
   d4bcc:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   d4bce:	2900      	cmp	r1, #0
   d4bd0:	f2c0 808f 	blt.w	d4cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4bd4:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   d4bd8:	428d      	cmp	r5, r1
   d4bda:	f340 808a 	ble.w	d4cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(x < 0) { 
   d4bde:	2a00      	cmp	r2, #0
    w += x;
   d4be0:	bfbe      	ittt	lt
   d4be2:	189b      	addlt	r3, r3, r2
   d4be4:	b21b      	sxthlt	r3, r3
    x = 0;
   d4be6:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   d4be8:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   d4bec:	18d6      	adds	r6, r2, r3
   d4bee:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4bf0:	bfc4      	itt	gt
   d4bf2:	1aab      	subgt	r3, r5, r2
   d4bf4:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   d4bf6:	2b00      	cmp	r3, #0
   d4bf8:	dd7b      	ble.n	d4cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4bfa:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   d4bfc:	2580      	movs	r5, #128	; 0x80
   d4bfe:	fb10 2205 	smlabb	r2, r0, r5, r2
   d4c02:	4844      	ldr	r0, [pc, #272]	; (d4d14 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>)
   d4c04:	4410      	add	r0, r2
  register uint8_t mask = 1 << (y&7);
   d4c06:	f001 0207 	and.w	r2, r1, #7
   d4c0a:	2101      	movs	r1, #1
   d4c0c:	4091      	lsls	r1, r2
  if(color == WHITE) { 
   d4c0e:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   d4c10:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   d4c12:	4403      	add	r3, r0
   d4c14:	d173      	bne.n	d4cfe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   d4c16:	4298      	cmp	r0, r3
   d4c18:	d06b      	beq.n	d4cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4c1a:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4c1e:	430c      	orrs	r4, r1
   d4c20:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4c24:	e7f7      	b.n	d4c16 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   d4c26:	8905      	ldrh	r5, [r0, #8]
   d4c28:	43c9      	mvns	r1, r1
   d4c2a:	4429      	add	r1, r5
      y -= (h-1);
   d4c2c:	18d5      	adds	r5, r2, r3
   d4c2e:	8942      	ldrh	r2, [r0, #10]
   d4c30:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   d4c32:	b209      	sxth	r1, r1
      y -= (h-1);
   d4c34:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   d4c36:	2900      	cmp	r1, #0
   d4c38:	db5b      	blt.n	d4cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4c3a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d4c3e:	428d      	cmp	r5, r1
   d4c40:	dd57      	ble.n	d4cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  if(__y < 0) { 
   d4c42:	2a00      	cmp	r2, #0
    __h += __y;
   d4c44:	bfbe      	ittt	lt
   d4c46:	189b      	addlt	r3, r3, r2
   d4c48:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4c4a:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   d4c4c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4c50:	18d5      	adds	r5, r2, r3
   d4c52:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   d4c54:	bfc4      	itt	gt
   d4c56:	1a83      	subgt	r3, r0, r2
   d4c58:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   d4c5a:	2b00      	cmp	r3, #0
   d4c5c:	dd49      	ble.n	d4cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
  pBuf += x;
   d4c5e:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   d4c62:	f8df c0b0 	ldr.w	ip, [pc, #176]	; d4d14 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x164>
   d4c66:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   d4c6a:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   d4c6e:	b2db      	uxtb	r3, r3
  pBuf += x;
   d4c70:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   d4c74:	d01a      	beq.n	d4cac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   d4c76:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   d4c7a:	4e27      	ldr	r6, [pc, #156]	; (d4d18 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
    mod = 8-mod;
   d4c7c:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   d4c7e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   d4c80:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   d4c82:	bf3f      	itttt	cc
   d4c84:	eba5 0e03 	subcc.w	lr, r5, r3
   d4c88:	26ff      	movcc	r6, #255	; 0xff
   d4c8a:	fa46 f60e 	asrcc.w	r6, r6, lr
   d4c8e:	4037      	andcc	r7, r6
    if(color == WHITE) { 
   d4c90:	f81c 6001 	ldrb.w	r6, [ip, r1]
   d4c94:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4c96:	bf0c      	ite	eq
   d4c98:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   d4c9a:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   d4c9c:	42ab      	cmp	r3, r5
   d4c9e:	f80c 6001 	strb.w	r6, [ip, r1]
   d4ca2:	d326      	bcc.n	d4cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    h -= mod;
   d4ca4:	3a08      	subs	r2, #8
   d4ca6:	4413      	add	r3, r2
   d4ca8:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   d4caa:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   d4cac:	2b07      	cmp	r3, #7
   d4cae:	d917      	bls.n	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x130>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4cb0:	2c01      	cmp	r4, #1
   d4cb2:	bf0c      	ite	eq
   d4cb4:	25ff      	moveq	r5, #255	; 0xff
   d4cb6:	2500      	movne	r5, #0
   d4cb8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   d4cbc:	461a      	mov	r2, r3
      h -= 8;
   d4cbe:	3a08      	subs	r2, #8
   d4cc0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4cc2:	2a07      	cmp	r2, #7
      *pBuf = val;
   d4cc4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   d4cc8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   d4ccc:	d8f7      	bhi.n	d4cbe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x10e>
   d4cce:	f1a3 0208 	sub.w	r2, r3, #8
   d4cd2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4cd6:	3201      	adds	r2, #1
   d4cd8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   d4cdc:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   d4ce0:	b13b      	cbz	r3, d4cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
    register uint8_t mask = postmask[mod];
   d4ce2:	4a0e      	ldr	r2, [pc, #56]	; (d4d1c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
   d4ce4:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
   d4ce6:	7803      	ldrb	r3, [r0, #0]
   d4ce8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   d4cea:	bf0c      	ite	eq
   d4cec:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   d4cee:	4393      	bicne	r3, r2
   d4cf0:	7003      	strb	r3, [r0, #0]
}
   d4cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   d4cf4:	8945      	ldrh	r5, [r0, #10]
   d4cf6:	43c9      	mvns	r1, r1
   d4cf8:	4429      	add	r1, r5
   d4cfa:	b209      	sxth	r1, r1
      break;
   d4cfc:	e767      	b.n	d4bce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   d4cfe:	43c9      	mvns	r1, r1
   d4d00:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   d4d02:	4298      	cmp	r0, r3
   d4d04:	d0f5      	beq.n	d4cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
   d4d06:	f810 4b01 	ldrb.w	r4, [r0], #1
   d4d0a:	400c      	ands	r4, r1
   d4d0c:	f800 4c01 	strb.w	r4, [r0, #-1]
   d4d10:	e7f7      	b.n	d4d02 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4d12:	bf00      	nop
   d4d14:	2003df68 	.word	0x2003df68
   d4d18:	2003df60 	.word	0x2003df60
   d4d1c:	2003df58 	.word	0x2003df58

000d4d20 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4d22:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4d24:	4606      	mov	r6, r0
   d4d26:	4614      	mov	r4, r2
   d4d28:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4d2a:	db2d      	blt.n	d4d88 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4d2c:	f000 fbd5 	bl	d54da <_ZN12Adafruit_GFX5widthEv>
   d4d30:	42a8      	cmp	r0, r5
   d4d32:	dd29      	ble.n	d4d88 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4d34:	2c00      	cmp	r4, #0
   d4d36:	db27      	blt.n	d4d88 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   d4d38:	4630      	mov	r0, r6
   d4d3a:	f000 fbd1 	bl	d54e0 <_ZN12Adafruit_GFX6heightEv>
   d4d3e:	42a0      	cmp	r0, r4
   d4d40:	dd22      	ble.n	d4d88 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   d4d42:	4630      	mov	r0, r6
   d4d44:	f000 fbb9 	bl	d54ba <_ZN12Adafruit_GFX11getRotationEv>
   d4d48:	2802      	cmp	r0, #2
   d4d4a:	d01e      	beq.n	d4d8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   d4d4c:	2803      	cmp	r0, #3
   d4d4e:	d025      	beq.n	d4d9c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d4d50:	2801      	cmp	r0, #1
   d4d52:	d104      	bne.n	d4d5e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   d4d54:	8932      	ldrh	r2, [r6, #8]
   d4d56:	43e4      	mvns	r4, r4
   d4d58:	4422      	add	r2, r4
    break;
   d4d5a:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   d4d5c:	b215      	sxth	r5, r2
  if (color == WHITE) 
   d4d5e:	2c00      	cmp	r4, #0
   d4d60:	4621      	mov	r1, r4
   d4d62:	bfb8      	it	lt
   d4d64:	1de1      	addlt	r1, r4, #7
   d4d66:	10c9      	asrs	r1, r1, #3
   d4d68:	2380      	movs	r3, #128	; 0x80
   d4d6a:	fb11 5503 	smlabb	r5, r1, r3, r5
   d4d6e:	490e      	ldr	r1, [pc, #56]	; (d4da8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   d4d70:	2201      	movs	r2, #1
   d4d72:	f004 0407 	and.w	r4, r4, #7
   d4d76:	574b      	ldrsb	r3, [r1, r5]
   d4d78:	fa02 f404 	lsl.w	r4, r2, r4
   d4d7c:	b264      	sxtb	r4, r4
   d4d7e:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4d80:	bf0c      	ite	eq
   d4d82:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4d84:	43a3      	bicne	r3, r4
   d4d86:	554b      	strb	r3, [r1, r5]
}
   d4d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   d4d8a:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4d8c:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   d4d8e:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4d90:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   d4d92:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   d4d94:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   d4d96:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   d4d98:	b224      	sxth	r4, r4
    break;
   d4d9a:	e7e0      	b.n	d4d5e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   d4d9c:	8973      	ldrh	r3, [r6, #10]
   d4d9e:	3b01      	subs	r3, #1
   d4da0:	1b5b      	subs	r3, r3, r5
    break;
   d4da2:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   d4da4:	b21c      	sxth	r4, r3
    break;
   d4da6:	e7da      	b.n	d4d5e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   d4da8:	2003df68 	.word	0x2003df68

000d4dac <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4dac:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4dae:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4db0:	4604      	mov	r4, r0
   d4db2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4db4:	2180      	movs	r1, #128	; 0x80
   d4db6:	f000 faa7 	bl	d5308 <_ZN12Adafruit_GFXC1Ess>
   d4dba:	4b06      	ldr	r3, [pc, #24]	; (d4dd4 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d4dbc:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d4dbe:	23ff      	movs	r3, #255	; 0xff
   d4dc0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d4dc4:	7763      	strb	r3, [r4, #29]
   d4dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4dca:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   d4dcc:	f884 5020 	strb.w	r5, [r4, #32]
}
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	bd38      	pop	{r3, r4, r5, pc}
   d4dd4:	000dacf8 	.word	0x000dacf8

000d4dd8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4dd8:	4802      	ldr	r0, [pc, #8]	; (d4de4 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4dde:	2100      	movs	r1, #0
   d4de0:	f005 bcfc 	b.w	da7dc <memset>
   d4de4:	2003df68 	.word	0x2003df68

000d4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4de8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4dea:	4c0b      	ldr	r4, [pc, #44]	; (d4e18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4dec:	7821      	ldrb	r1, [r4, #0]
   d4dee:	f3bf 8f5b 	dmb	ish
   d4df2:	f011 0101 	ands.w	r1, r1, #1
   d4df6:	d10b      	bne.n	d4e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4df8:	4620      	mov	r0, r4
   d4dfa:	9101      	str	r1, [sp, #4]
   d4dfc:	f7ff f95c 	bl	d40b8 <__cxa_guard_acquire>
   d4e00:	9901      	ldr	r1, [sp, #4]
   d4e02:	b128      	cbz	r0, d4e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4e04:	4805      	ldr	r0, [pc, #20]	; (d4e1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4e06:	f001 fed3 	bl	d6bb0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4e0a:	4620      	mov	r0, r4
   d4e0c:	f7ff f959 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4e10:	4802      	ldr	r0, [pc, #8]	; (d4e1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4e12:	b002      	add	sp, #8
   d4e14:	bd10      	pop	{r4, pc}
   d4e16:	bf00      	nop
   d4e18:	2003e63c 	.word	0x2003e63c
   d4e1c:	2003e640 	.word	0x2003e640

000d4e20 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d4e20:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   d4e22:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   d4e26:	b143      	cbz	r3, d4e3a <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   d4e28:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4e2a:	f7ff ffdd 	bl	d4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4e2e:	9901      	ldr	r1, [sp, #4]
}
   d4e30:	b003      	add	sp, #12
   d4e32:	f85d eb04 	ldr.w	lr, [sp], #4
   d4e36:	f001 bfdb 	b.w	d6df0 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4e3a:	460b      	mov	r3, r1
   d4e3c:	7f81      	ldrb	r1, [r0, #30]
   d4e3e:	7f40      	ldrb	r0, [r0, #29]
   d4e40:	2201      	movs	r2, #1
}
   d4e42:	b003      	add	sp, #12
   d4e44:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4e48:	f003 b960 	b.w	d810c <shiftOut>

000d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4e4c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4e4e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4e52:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4e54:	4604      	mov	r4, r0
   d4e56:	460d      	mov	r5, r1
  if (sid != -1)
   d4e58:	d01d      	beq.n	d4e96 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   d4e5a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4e5e:	2101      	movs	r1, #1
   d4e60:	b280      	uxth	r0, r0
   d4e62:	f003 f910 	bl	d8086 <digitalWrite>
    digitalWrite(dc, LOW);
   d4e66:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4e6a:	2100      	movs	r1, #0
   d4e6c:	b280      	uxth	r0, r0
   d4e6e:	f003 f90a 	bl	d8086 <digitalWrite>
    digitalWrite(cs, LOW);
   d4e72:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e76:	2100      	movs	r1, #0
   d4e78:	b280      	uxth	r0, r0
   d4e7a:	f003 f904 	bl	d8086 <digitalWrite>
    fastSPIwrite(c);
   d4e7e:	4629      	mov	r1, r5
   d4e80:	4620      	mov	r0, r4
   d4e82:	f7ff ffcd 	bl	d4e20 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   d4e86:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4e8a:	2101      	movs	r1, #1
}
   d4e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   d4e90:	b280      	uxth	r0, r0
   d4e92:	f003 b8f8 	b.w	d8086 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   d4e96:	f003 f977 	bl	d8188 <_Z19__fetch_global_Wirev>
   d4e9a:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4e9e:	f002 fcf5 	bl	d788c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4ea2:	f003 f971 	bl	d8188 <_Z19__fetch_global_Wirev>
   d4ea6:	6803      	ldr	r3, [r0, #0]
   d4ea8:	2100      	movs	r1, #0
   d4eaa:	689b      	ldr	r3, [r3, #8]
   d4eac:	4798      	blx	r3
    Wire.write(c);
   d4eae:	f003 f96b 	bl	d8188 <_Z19__fetch_global_Wirev>
   d4eb2:	6803      	ldr	r3, [r0, #0]
   d4eb4:	4629      	mov	r1, r5
   d4eb6:	689b      	ldr	r3, [r3, #8]
   d4eb8:	4798      	blx	r3
    Wire.endTransmission();
   d4eba:	f003 f965 	bl	d8188 <_Z19__fetch_global_Wirev>
}
   d4ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   d4ec2:	f002 bcea 	b.w	d789a <_ZN7TwoWire15endTransmissionEv>
	...

000d4ec8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d4ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4eca:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   d4ecc:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4ece:	f7ff ffbd 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4ed2:	2100      	movs	r1, #0
   d4ed4:	4620      	mov	r0, r4
   d4ed6:	f7ff ffb9 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4eda:	217f      	movs	r1, #127	; 0x7f
   d4edc:	4620      	mov	r0, r4
   d4ede:	f7ff ffb5 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   d4ee2:	2122      	movs	r1, #34	; 0x22
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	f7ff ffb1 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4eea:	2100      	movs	r1, #0
   d4eec:	4620      	mov	r0, r4
   d4eee:	f7ff ffad 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4ef2:	2107      	movs	r1, #7
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	f7ff ffa9 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   d4efa:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4efe:	4f29      	ldr	r7, [pc, #164]	; (d4fa4 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   d4f00:	3301      	adds	r3, #1
   d4f02:	d02a      	beq.n	d4f5a <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   d4f04:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4f08:	2101      	movs	r1, #1
   d4f0a:	b280      	uxth	r0, r0
   d4f0c:	f003 f8bb 	bl	d8086 <digitalWrite>
    digitalWrite(dc, HIGH);
   d4f10:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4f14:	2101      	movs	r1, #1
   d4f16:	b280      	uxth	r0, r0
   d4f18:	f003 f8b5 	bl	d8086 <digitalWrite>
    digitalWrite(cs, LOW);
   d4f1c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4f20:	2100      	movs	r1, #0
   d4f22:	b280      	uxth	r0, r0
   d4f24:	f003 f8af 	bl	d8086 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4f28:	2001      	movs	r0, #1
   d4f2a:	f001 fb99 	bl	d6660 <HAL_Delay_Microseconds>
   d4f2e:	f44f 6580 	mov.w	r5, #1024	; 0x400
      fastSPIwrite(buffer[i]);
   d4f32:	3d01      	subs	r5, #1
   d4f34:	f817 1b01 	ldrb.w	r1, [r7], #1
   d4f38:	4620      	mov	r0, r4
   d4f3a:	b2ad      	uxth	r5, r5
   d4f3c:	f7ff ff70 	bl	d4e20 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4f40:	2d00      	cmp	r5, #0
   d4f42:	d1f6      	bne.n	d4f32 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   d4f44:	2001      	movs	r0, #1
   d4f46:	f001 fb8b 	bl	d6660 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   d4f4a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4f4e:	2101      	movs	r1, #1
}
   d4f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   d4f54:	b280      	uxth	r0, r0
   d4f56:	f003 b896 	b.w	d8086 <digitalWrite>
   d4f5a:	2610      	movs	r6, #16
      Wire.beginTransmission(_i2caddr);
   d4f5c:	f003 f914 	bl	d8188 <_Z19__fetch_global_Wirev>
   d4f60:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4f64:	f002 fc92 	bl	d788c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4f68:	f003 f90e 	bl	d8188 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4f6c:	6803      	ldr	r3, [r0, #0]
   d4f6e:	f1a6 0510 	sub.w	r5, r6, #16
   d4f72:	689b      	ldr	r3, [r3, #8]
   d4f74:	2140      	movs	r1, #64	; 0x40
   d4f76:	b2ad      	uxth	r5, r5
   d4f78:	4798      	blx	r3
		Wire.write(buffer[i]);
   d4f7a:	f003 f905 	bl	d8188 <_Z19__fetch_global_Wirev>
   d4f7e:	6803      	ldr	r3, [r0, #0]
   d4f80:	5d79      	ldrb	r1, [r7, r5]
   d4f82:	689b      	ldr	r3, [r3, #8]
		i++;
   d4f84:	3501      	adds	r5, #1
   d4f86:	b2ad      	uxth	r5, r5
		Wire.write(buffer[i]);
   d4f88:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   d4f8a:	42ae      	cmp	r6, r5
   d4f8c:	d1f5      	bne.n	d4f7a <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   d4f8e:	f003 f8fb 	bl	d8188 <_Z19__fetch_global_Wirev>
   d4f92:	f002 fc82 	bl	d789a <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4f96:	f106 0310 	add.w	r3, r6, #16
   d4f9a:	b29e      	uxth	r6, r3
   d4f9c:	f5b6 6f82 	cmp.w	r6, #1040	; 0x410
   d4fa0:	d1dc      	bne.n	d4f5c <_ZN16Adafruit_SSD13067displayEv+0x94>
}
   d4fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4fa4:	2003df68 	.word	0x2003df68

000d4fa8 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4fa8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   d4faa:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   d4fae:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   d4fb0:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4fb2:	4604      	mov	r4, r0
   d4fb4:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   d4fb6:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   d4fb8:	f000 80c9 	beq.w	d514e <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   d4fbc:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4fc0:	2101      	movs	r1, #1
   d4fc2:	b280      	uxth	r0, r0
   d4fc4:	f003 f84e 	bl	d8064 <pinMode>
    pinMode(cs, OUTPUT);
   d4fc8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4fcc:	2101      	movs	r1, #1
   d4fce:	b280      	uxth	r0, r0
   d4fd0:	f003 f848 	bl	d8064 <pinMode>
    if (!hwSPI){
   d4fd4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4fd8:	2b00      	cmp	r3, #0
   d4fda:	f000 80a6 	beq.w	d512a <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   d4fde:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4fe2:	2101      	movs	r1, #1
   d4fe4:	b280      	uxth	r0, r0
   d4fe6:	f003 f84e 	bl	d8086 <digitalWrite>
        instance().setBitOrder(order);
   d4fea:	f7ff fefd 	bl	d4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4fee:	2101      	movs	r1, #1
   d4ff0:	f001 fdf9 	bl	d6be6 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   d4ff4:	f7ff fef8 	bl	d4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4ff8:	2110      	movs	r1, #16
   d4ffa:	f001 fed3 	bl	d6da4 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   d4ffe:	f7ff fef3 	bl	d4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5002:	2100      	movs	r1, #0
   d5004:	f001 fe02 	bl	d6c0c <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   d5008:	f7ff feee 	bl	d4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d500c:	f001 fdda 	bl	d6bc4 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   d5010:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5014:	2101      	movs	r1, #1
   d5016:	b280      	uxth	r0, r0
   d5018:	f003 f824 	bl	d8064 <pinMode>
  digitalWrite(rst, HIGH);
   d501c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5020:	2101      	movs	r1, #1
   d5022:	b280      	uxth	r0, r0
   d5024:	f003 f82f 	bl	d8086 <digitalWrite>
  delay(1);
   d5028:	2001      	movs	r0, #1
   d502a:	f002 f97d 	bl	d7328 <delay>
  digitalWrite(rst, LOW);
   d502e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5032:	2100      	movs	r1, #0
   d5034:	b280      	uxth	r0, r0
   d5036:	f003 f826 	bl	d8086 <digitalWrite>
  delay(10);
   d503a:	200a      	movs	r0, #10
   d503c:	f002 f974 	bl	d7328 <delay>
  digitalWrite(rst, HIGH);
   d5040:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5044:	2101      	movs	r1, #1
   d5046:	b280      	uxth	r0, r0
   d5048:	f003 f81d 	bl	d8086 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d504c:	4620      	mov	r0, r4
   d504e:	21ae      	movs	r1, #174	; 0xae
   d5050:	f7ff fefc 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d5054:	4620      	mov	r0, r4
   d5056:	21d5      	movs	r1, #213	; 0xd5
   d5058:	f7ff fef8 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d505c:	4620      	mov	r0, r4
   d505e:	2180      	movs	r1, #128	; 0x80
   d5060:	f7ff fef4 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d5064:	4620      	mov	r0, r4
   d5066:	21a8      	movs	r1, #168	; 0xa8
   d5068:	f7ff fef0 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d506c:	4620      	mov	r0, r4
   d506e:	213f      	movs	r1, #63	; 0x3f
   d5070:	f7ff feec 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d5074:	4620      	mov	r0, r4
   d5076:	21d3      	movs	r1, #211	; 0xd3
   d5078:	f7ff fee8 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d507c:	4620      	mov	r0, r4
   d507e:	2100      	movs	r1, #0
   d5080:	f7ff fee4 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d5084:	4620      	mov	r0, r4
   d5086:	2140      	movs	r1, #64	; 0x40
   d5088:	f7ff fee0 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d508c:	218d      	movs	r1, #141	; 0x8d
   d508e:	4620      	mov	r0, r4
   d5090:	f7ff fedc 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5094:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d5096:	bf0c      	ite	eq
   d5098:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   d509a:	2114      	movne	r1, #20
   d509c:	4620      	mov	r0, r4
   d509e:	f7ff fed5 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d50a2:	4620      	mov	r0, r4
   d50a4:	2120      	movs	r1, #32
   d50a6:	f7ff fed1 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d50aa:	4620      	mov	r0, r4
   d50ac:	2100      	movs	r1, #0
   d50ae:	f7ff fecd 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d50b2:	4620      	mov	r0, r4
   d50b4:	21a1      	movs	r1, #161	; 0xa1
   d50b6:	f7ff fec9 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d50ba:	4620      	mov	r0, r4
   d50bc:	21c8      	movs	r1, #200	; 0xc8
   d50be:	f7ff fec5 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d50c2:	4620      	mov	r0, r4
   d50c4:	21da      	movs	r1, #218	; 0xda
   d50c6:	f7ff fec1 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d50ca:	4620      	mov	r0, r4
   d50cc:	2112      	movs	r1, #18
   d50ce:	f7ff febd 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d50d2:	2181      	movs	r1, #129	; 0x81
   d50d4:	4620      	mov	r0, r4
   d50d6:	f7ff feb9 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d50da:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d50dc:	bf0c      	ite	eq
   d50de:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   d50e0:	21cf      	movne	r1, #207	; 0xcf
   d50e2:	4620      	mov	r0, r4
   d50e4:	f7ff feb2 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d50e8:	21d9      	movs	r1, #217	; 0xd9
   d50ea:	4620      	mov	r0, r4
   d50ec:	f7ff feae 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d50f0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d50f2:	bf0c      	ite	eq
   d50f4:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   d50f6:	21f1      	movne	r1, #241	; 0xf1
   d50f8:	4620      	mov	r0, r4
   d50fa:	f7ff fea7 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d50fe:	4620      	mov	r0, r4
   d5100:	21db      	movs	r1, #219	; 0xdb
   d5102:	f7ff fea3 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5106:	4620      	mov	r0, r4
   d5108:	2140      	movs	r1, #64	; 0x40
   d510a:	f7ff fe9f 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d510e:	4620      	mov	r0, r4
   d5110:	21a4      	movs	r1, #164	; 0xa4
   d5112:	f7ff fe9b 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5116:	4620      	mov	r0, r4
   d5118:	21a6      	movs	r1, #166	; 0xa6
   d511a:	f7ff fe97 	bl	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d511e:	4620      	mov	r0, r4
   d5120:	21af      	movs	r1, #175	; 0xaf
}
   d5122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5126:	f7ff be91 	b.w	d4e4c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   d512a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d512e:	2101      	movs	r1, #1
   d5130:	b280      	uxth	r0, r0
   d5132:	f002 ff97 	bl	d8064 <pinMode>
    	pinMode(sclk, OUTPUT);
   d5136:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d513a:	2101      	movs	r1, #1
   d513c:	b280      	uxth	r0, r0
   d513e:	f002 ff91 	bl	d8064 <pinMode>
    if (hwSPI){
   d5142:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5146:	2b00      	cmp	r3, #0
   d5148:	f43f af62 	beq.w	d5010 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   d514c:	e747      	b.n	d4fde <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   d514e:	f003 f81b 	bl	d8188 <_Z19__fetch_global_Wirev>
   d5152:	f002 fb65 	bl	d7820 <_ZN7TwoWire5beginEv>
   d5156:	e75b      	b.n	d5010 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000d5158 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d515c:	b085      	sub	sp, #20
   d515e:	461f      	mov	r7, r3
   d5160:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d5164:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5168:	eba8 0902 	sub.w	r9, r8, r2
   d516c:	eba7 0a01 	sub.w	sl, r7, r1
   d5170:	f1b9 0f00 	cmp.w	r9, #0
   d5174:	bfb8      	it	lt
   d5176:	f1c9 0900 	rsblt	r9, r9, #0
   d517a:	f1ba 0f00 	cmp.w	sl, #0
   d517e:	bfb8      	it	lt
   d5180:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   d5184:	45d1      	cmp	r9, sl
			    uint16_t color) {
   d5186:	4683      	mov	fp, r0
   d5188:	460c      	mov	r4, r1
   d518a:	4615      	mov	r5, r2
  if (steep) {
   d518c:	dd04      	ble.n	d5198 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   d518e:	463a      	mov	r2, r7
    swap(x0, y0);
   d5190:	462c      	mov	r4, r5
    swap(x1, y1);
   d5192:	4647      	mov	r7, r8
    swap(x0, y0);
   d5194:	460d      	mov	r5, r1
    swap(x1, y1);
   d5196:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   d5198:	42bc      	cmp	r4, r7
   d519a:	dd05      	ble.n	d51a8 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   d519c:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d519e:	4645      	mov	r5, r8
   d51a0:	4690      	mov	r8, r2
  if (x0 > x1) {
   d51a2:	4622      	mov	r2, r4
   d51a4:	463c      	mov	r4, r7
   d51a6:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d51a8:	1b3e      	subs	r6, r7, r4
   d51aa:	b2b2      	uxth	r2, r6
   d51ac:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   d51ae:	eba8 0205 	sub.w	r2, r8, r5
   d51b2:	2a00      	cmp	r2, #0
   d51b4:	bfb8      	it	lt
   d51b6:	4252      	neglt	r2, r2
   d51b8:	9201      	str	r2, [sp, #4]

  int16_t err = dx / 2;
   d51ba:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d51be:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d51c2:	4545      	cmp	r5, r8
   d51c4:	bfb4      	ite	lt
   d51c6:	2201      	movlt	r2, #1
   d51c8:	f04f 32ff 	movge.w	r2, #4294967295
  int16_t err = dx / 2;
   d51cc:	1076      	asrs	r6, r6, #1
    ystep = -1;
   d51ce:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   d51d0:	42bc      	cmp	r4, r7
   d51d2:	dc1c      	bgt.n	d520e <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (steep) {
   d51d4:	f8db 2000 	ldr.w	r2, [fp]
      drawPixel(y0, x0, color);
   d51d8:	9303      	str	r3, [sp, #12]
    if (steep) {
   d51da:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   d51dc:	f8d2 8010 	ldr.w	r8, [r2, #16]
   d51e0:	bfc7      	ittee	gt
   d51e2:	4629      	movgt	r1, r5
   d51e4:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   d51e6:	462a      	movle	r2, r5
   d51e8:	4621      	movle	r1, r4
   d51ea:	4658      	mov	r0, fp
   d51ec:	47c0      	blx	r8
    }
    err -= dy;
   d51ee:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   d51f0:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   d51f2:	1ab6      	subs	r6, r6, r2
   d51f4:	b2b1      	uxth	r1, r6
   d51f6:	b236      	sxth	r6, r6
    if (err < 0) {
   d51f8:	2e00      	cmp	r6, #0
   d51fa:	da05      	bge.n	d5208 <_ZN12Adafruit_GFX8drawLineEsssst+0xb0>
      y0 += ystep;
   d51fc:	9a02      	ldr	r2, [sp, #8]
   d51fe:	4415      	add	r5, r2
      err += dx;
   d5200:	9a00      	ldr	r2, [sp, #0]
   d5202:	1856      	adds	r6, r2, r1
      y0 += ystep;
   d5204:	b22d      	sxth	r5, r5
      err += dx;
   d5206:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   d5208:	3401      	adds	r4, #1
   d520a:	b224      	sxth	r4, r4
   d520c:	e7e0      	b.n	d51d0 <_ZN12Adafruit_GFX8drawLineEsssst+0x78>
    }
  }
}
   d520e:	b005      	add	sp, #20
   d5210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5214 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5214:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5218:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d521c:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   d521e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d5222:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   d5226:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5228:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   d522a:	4616      	mov	r6, r2
   d522c:	468a      	mov	sl, r1
   d522e:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   d5230:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d5232:	6823      	ldr	r3, [r4, #0]
   d5234:	f8cd 8000 	str.w	r8, [sp]
   d5238:	f109 32ff 	add.w	r2, r9, #4294967295
   d523c:	4432      	add	r2, r6
   d523e:	69df      	ldr	r7, [r3, #28]
   d5240:	4651      	mov	r1, sl
   d5242:	462b      	mov	r3, r5
   d5244:	4620      	mov	r0, r4
   d5246:	b212      	sxth	r2, r2
   d5248:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d524a:	6823      	ldr	r3, [r4, #0]
   d524c:	f8cd 8000 	str.w	r8, [sp]
   d5250:	699f      	ldr	r7, [r3, #24]
   d5252:	4632      	mov	r2, r6
   d5254:	464b      	mov	r3, r9
   d5256:	4651      	mov	r1, sl
   d5258:	4620      	mov	r0, r4
   d525a:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d525c:	1e6b      	subs	r3, r5, #1
   d525e:	eb03 010a 	add.w	r1, r3, sl
   d5262:	6823      	ldr	r3, [r4, #0]
   d5264:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d5268:	699d      	ldr	r5, [r3, #24]
   d526a:	4632      	mov	r2, r6
   d526c:	464b      	mov	r3, r9
   d526e:	b209      	sxth	r1, r1
   d5270:	4620      	mov	r0, r4
   d5272:	46ac      	mov	ip, r5
}
   d5274:	b002      	add	sp, #8
   d5276:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   d527a:	4760      	bx	ip

000d527c <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d527c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d527e:	3b01      	subs	r3, #1
   d5280:	4413      	add	r3, r2
   d5282:	6804      	ldr	r4, [r0, #0]
   d5284:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5288:	9501      	str	r5, [sp, #4]
   d528a:	b21b      	sxth	r3, r3
   d528c:	9300      	str	r3, [sp, #0]
   d528e:	6964      	ldr	r4, [r4, #20]
   d5290:	460b      	mov	r3, r1
   d5292:	47a0      	blx	r4
}
   d5294:	b003      	add	sp, #12
   d5296:	bd30      	pop	{r4, r5, pc}

000d5298 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d5298:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d529a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d529e:	6804      	ldr	r4, [r0, #0]
   d52a0:	e9cd 2500 	strd	r2, r5, [sp]
   d52a4:	3b01      	subs	r3, #1
   d52a6:	440b      	add	r3, r1
   d52a8:	6964      	ldr	r4, [r4, #20]
   d52aa:	b21b      	sxth	r3, r3
   d52ac:	47a0      	blx	r4
}
   d52ae:	b003      	add	sp, #12
   d52b0:	bd30      	pop	{r4, r5, pc}

000d52b2 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d52b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d52b6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d52ba:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d52be:	4605      	mov	r5, r0
   d52c0:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d52c2:	460c      	mov	r4, r1
   d52c4:	18ce      	adds	r6, r1, r3
   d52c6:	42b4      	cmp	r4, r6
   d52c8:	da0b      	bge.n	d52e2 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   d52ca:	682b      	ldr	r3, [r5, #0]
   d52cc:	f8cd 8000 	str.w	r8, [sp]
   d52d0:	699f      	ldr	r7, [r3, #24]
   d52d2:	4621      	mov	r1, r4
   d52d4:	464b      	mov	r3, r9
   d52d6:	4652      	mov	r2, sl
   d52d8:	4628      	mov	r0, r5
   d52da:	3401      	adds	r4, #1
   d52dc:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   d52de:	b224      	sxth	r4, r4
   d52e0:	e7f1      	b.n	d52c6 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   d52e2:	b002      	add	sp, #8
   d52e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d52e8 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d52e8:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d52ea:	6802      	ldr	r2, [r0, #0]
   d52ec:	9101      	str	r1, [sp, #4]
   d52ee:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d52f2:	9100      	str	r1, [sp, #0]
   d52f4:	6a54      	ldr	r4, [r2, #36]	; 0x24
   d52f6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d52fa:	2200      	movs	r2, #0
   d52fc:	4611      	mov	r1, r2
   d52fe:	47a0      	blx	r4
}
   d5300:	b002      	add	sp, #8
   d5302:	bd10      	pop	{r4, pc}

000d5304 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   d5304:	4770      	bx	lr
	...

000d5308 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5308:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d530a:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   d530c:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   d530e:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   d5312:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   d5314:	4d05      	ldr	r5, [pc, #20]	; (d532c <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   d5316:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   d5318:	2201      	movs	r2, #1
   d531a:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   d531c:	6005      	str	r5, [r0, #0]
   d531e:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   d5320:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   d5322:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   d5324:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   d5326:	7682      	strb	r2, [r0, #26]
}
   d5328:	bd30      	pop	{r4, r5, pc}
   d532a:	bf00      	nop
   d532c:	000db22c 	.word	0x000db22c

000d5330 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5334:	ed2d 8b02 	vpush	{d8}
   d5338:	b08b      	sub	sp, #44	; 0x2c
   d533a:	4606      	mov	r6, r0
   d533c:	9103      	str	r1, [sp, #12]
   d533e:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   d5342:	9105      	str	r1, [sp, #20]
   d5344:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   d5348:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   d534a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d534e:	9803      	ldr	r0, [sp, #12]
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5350:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
  if((x >= _width)            || // Clip right
   d5354:	4281      	cmp	r1, r0
   d5356:	dd51      	ble.n	d53fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
   d5358:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
   d535c:	4291      	cmp	r1, r2
   d535e:	dd4d      	ble.n	d53fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((x + 6 * size - 1) < 0) || // Clip left
   d5360:	2106      	movs	r1, #6
   d5362:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   d5366:	2c00      	cmp	r4, #0
   d5368:	dd48      	ble.n	d53fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
     ((y + 8 * size - 1) < 0))   // Clip top
   d536a:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   d536e:	2c00      	cmp	r4, #0
   d5370:	dd44      	ble.n	d53fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
      line = pgm_read_byte(font+(c*5)+i);
   d5372:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5376:	9309      	str	r3, [sp, #36]	; 0x24
   d5378:	b293      	uxth	r3, r2
   d537a:	9107      	str	r1, [sp, #28]
  for (int8_t i=0; i<6; i++ ) {
   d537c:	2400      	movs	r4, #0
   d537e:	9304      	str	r3, [sp, #16]
    if (i == 5) 
   d5380:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   d5382:	bf1c      	itt	ne
   d5384:	4b2d      	ldrne	r3, [pc, #180]	; (d543c <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   d5386:	9a09      	ldrne	r2, [sp, #36]	; 0x24
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5388:	9f04      	ldr	r7, [sp, #16]
      line = pgm_read_byte(font+(c*5)+i);
   d538a:	bf16      	itet	ne
   d538c:	191b      	addne	r3, r3, r4
      line = 0x0;
   d538e:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   d5390:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   d5392:	9302      	str	r3, [sp, #8]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5394:	9a03      	ldr	r2, [sp, #12]
   d5396:	b2ab      	uxth	r3, r5
   d5398:	9308      	str	r3, [sp, #32]
   d539a:	fb04 f305 	mul.w	r3, r4, r5
   d539e:	fa13 f382 	uxtah	r3, r3, r2
   d53a2:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   d53a4:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   d53a8:	ee08 3a10 	vmov	s16, r3
   d53ac:	f04f 0800 	mov.w	r8, #0
   d53b0:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   d53b4:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   d53b8:	9b02      	ldr	r3, [sp, #8]
   d53ba:	07db      	lsls	r3, r3, #31
   d53bc:	d52f      	bpl.n	d541e <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d53be:	2d01      	cmp	r5, #1
   d53c0:	6833      	ldr	r3, [r6, #0]
   d53c2:	d120      	bne.n	d5406 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, color);
   d53c4:	9a04      	ldr	r2, [sp, #16]
   d53c6:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d53ca:	9b05      	ldr	r3, [sp, #20]
   d53cc:	4442      	add	r2, r8
          drawPixel(x+i, y+j, bg);
   d53ce:	b212      	sxth	r2, r2
   d53d0:	4651      	mov	r1, sl
   d53d2:	4630      	mov	r0, r6
   d53d4:	47d8      	blx	fp
      line >>= 1;
   d53d6:	9b02      	ldr	r3, [sp, #8]
   d53d8:	085b      	lsrs	r3, r3, #1
   d53da:	9302      	str	r3, [sp, #8]
    for (int8_t j = 0; j<8; j++) {
   d53dc:	9b08      	ldr	r3, [sp, #32]
   d53de:	f108 0801 	add.w	r8, r8, #1
   d53e2:	441f      	add	r7, r3
   d53e4:	f1b8 0f08 	cmp.w	r8, #8
   d53e8:	b2bf      	uxth	r7, r7
   d53ea:	d1e5      	bne.n	d53b8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x88>
  for (int8_t i=0; i<6; i++ ) {
   d53ec:	9b07      	ldr	r3, [sp, #28]
   d53ee:	3b01      	subs	r3, #1
   d53f0:	3401      	adds	r4, #1
   d53f2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d53f6:	b264      	sxtb	r4, r4
   d53f8:	9307      	str	r3, [sp, #28]
   d53fa:	d1c1      	bne.n	d5380 <_ZN12Adafruit_GFX8drawCharEsshtth+0x50>
}
   d53fc:	b00b      	add	sp, #44	; 0x2c
   d53fe:	ecbd 8b02 	vpop	{d8}
   d5402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5406:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5408:	e9cd 9200 	strd	r9, r2, [sp]
   d540c:	ee18 1a10 	vmov	r1, s16
   d5410:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5414:	b23a      	sxth	r2, r7
   d5416:	464b      	mov	r3, r9
   d5418:	4630      	mov	r0, r6
   d541a:	47d8      	blx	fp
   d541c:	e7db      	b.n	d53d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   d541e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   d5422:	4293      	cmp	r3, r2
   d5424:	d0d7      	beq.n	d53d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   d5426:	2d01      	cmp	r5, #1
   d5428:	6833      	ldr	r3, [r6, #0]
   d542a:	d105      	bne.n	d5438 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   d542c:	9a04      	ldr	r2, [sp, #16]
   d542e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5432:	9b06      	ldr	r3, [sp, #24]
   d5434:	4442      	add	r2, r8
   d5436:	e7ca      	b.n	d53ce <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5438:	9a06      	ldr	r2, [sp, #24]
   d543a:	e7e5      	b.n	d5408 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
   d543c:	000dad28 	.word	0x000dad28

000d5440 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5440:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   d5442:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   d5444:	b085      	sub	sp, #20
   d5446:	4604      	mov	r4, r0
  if (c == '\n') {
   d5448:	d107      	bne.n	d545a <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   d544a:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   d544c:	8a63      	ldrh	r3, [r4, #18]
   d544e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5452:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5454:	2300      	movs	r3, #0
   d5456:	8223      	strh	r3, [r4, #16]
   d5458:	e021      	b.n	d549e <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   d545a:	290d      	cmp	r1, #13
   d545c:	d01f      	beq.n	d549e <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d545e:	7e03      	ldrb	r3, [r0, #24]
   d5460:	9302      	str	r3, [sp, #8]
   d5462:	8ac3      	ldrh	r3, [r0, #22]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	8a83      	ldrh	r3, [r0, #20]
   d5468:	9300      	str	r3, [sp, #0]
   d546a:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d546e:	460b      	mov	r3, r1
   d5470:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5474:	f7ff ff5c 	bl	d5330 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d5478:	7e21      	ldrb	r1, [r4, #24]
   d547a:	8a23      	ldrh	r3, [r4, #16]
   d547c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d5480:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5484:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x += textsize*6;
   d5486:	b21b      	sxth	r3, r3
   d5488:	460a      	mov	r2, r1
   d548a:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d548c:	b138      	cbz	r0, d549e <_ZN12Adafruit_GFX5writeEh+0x5e>
   d548e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d5492:	f06f 0505 	mvn.w	r5, #5
   d5496:	fb05 0101 	mla	r1, r5, r1, r0
   d549a:	428b      	cmp	r3, r1
   d549c:	dcd6      	bgt.n	d544c <_ZN12Adafruit_GFX5writeEh+0xc>
}
   d549e:	2001      	movs	r0, #1
   d54a0:	b005      	add	sp, #20
   d54a2:	bd30      	pop	{r4, r5, pc}

000d54a4 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   d54a4:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d54a6:	8242      	strh	r2, [r0, #18]
}
   d54a8:	4770      	bx	lr

000d54aa <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   d54aa:	2901      	cmp	r1, #1
   d54ac:	bf38      	it	cc
   d54ae:	2101      	movcc	r1, #1
   d54b0:	7601      	strb	r1, [r0, #24]
}
   d54b2:	4770      	bx	lr

000d54b4 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   d54b4:	82c1      	strh	r1, [r0, #22]
   d54b6:	8281      	strh	r1, [r0, #20]
}
   d54b8:	4770      	bx	lr

000d54ba <_ZN12Adafruit_GFX11getRotationEv>:
}
   d54ba:	7e40      	ldrb	r0, [r0, #25]
   d54bc:	4770      	bx	lr

000d54be <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   d54be:	f001 0303 	and.w	r3, r1, #3
   d54c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d54c6:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   d54c8:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   d54ca:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d54ce:	bf59      	ittee	pl
   d54d0:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   d54d2:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   d54d4:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   d54d6:	81c3      	strhmi	r3, [r0, #14]
}
   d54d8:	4770      	bx	lr

000d54da <_ZN12Adafruit_GFX5widthEv>:
}
   d54da:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d54de:	4770      	bx	lr

000d54e0 <_ZN12Adafruit_GFX6heightEv>:
}
   d54e0:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d54e4:	4770      	bx	lr

000d54e6 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d54e6:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d54e8:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d54ec:	6803      	ldr	r3, [r0, #0]
   d54ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54f0:	4798      	blx	r3
}
   d54f2:	3800      	subs	r0, #0
   d54f4:	bf18      	it	ne
   d54f6:	2001      	movne	r0, #1
   d54f8:	bd08      	pop	{r3, pc}

000d54fa <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d54fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54fc:	4606      	mov	r6, r0
   d54fe:	460f      	mov	r7, r1
   d5500:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d5502:	b1c4      	cbz	r4, d5536 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d5504:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5508:	6803      	ldr	r3, [r0, #0]
   d550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d550c:	4798      	blx	r3
   d550e:	b908      	cbnz	r0, d5514 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d5510:	2000      	movs	r0, #0
    }
  }
  return true;
}
   d5512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   d5514:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5518:	2cfa      	cmp	r4, #250	; 0xfa
   d551a:	6803      	ldr	r3, [r0, #0]
   d551c:	4625      	mov	r5, r4
   d551e:	bfa8      	it	ge
   d5520:	25fa      	movge	r5, #250	; 0xfa
   d5522:	68db      	ldr	r3, [r3, #12]
   d5524:	462a      	mov	r2, r5
   d5526:	4639      	mov	r1, r7
   d5528:	4798      	blx	r3
   d552a:	b283      	uxth	r3, r0
      len -= ret;
   d552c:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   d552e:	429d      	cmp	r5, r3
      len -= ret;
   d5530:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   d5532:	d0e6      	beq.n	d5502 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d5534:	e7ec      	b.n	d5510 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   d5536:	2001      	movs	r0, #1
   d5538:	e7eb      	b.n	d5512 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000d553a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   d553a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d553e:	4606      	mov	r6, r0
   d5540:	4688      	mov	r8, r1
   d5542:	4691      	mov	r9, r2
   d5544:	461f      	mov	r7, r3
   d5546:	461d      	mov	r5, r3
  uint16_t len = 0;
   d5548:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   d554a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d554e:	6803      	ldr	r3, [r0, #0]
   d5550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5552:	4798      	blx	r3
   d5554:	b1d0      	cbz	r0, d558c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d5556:	2d00      	cmp	r5, #0
   d5558:	db18      	blt.n	d558c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   d555a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d555e:	6803      	ldr	r3, [r0, #0]
   d5560:	691b      	ldr	r3, [r3, #16]
   d5562:	4798      	blx	r3
   d5564:	b160      	cbz	r0, d5580 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   d5566:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d556a:	6803      	ldr	r3, [r0, #0]
   d556c:	695b      	ldr	r3, [r3, #20]
   d556e:	4798      	blx	r3
   d5570:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   d5574:	3401      	adds	r4, #1
   d5576:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5578:	454c      	cmp	r4, r9
   d557a:	d007      	beq.n	d558c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   d557c:	463d      	mov	r5, r7
   d557e:	e7ec      	b.n	d555a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5580:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5582:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5584:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5586:	f001 fecf 	bl	d7328 <delay>
  while (client->connected() && (timeout >= 0)) {
   d558a:	e7de      	b.n	d554a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   d558c:	4620      	mov	r0, r4
   d558e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5592 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   d5592:	b570      	push	{r4, r5, r6, lr}
   d5594:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   d5596:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d559a:	2296      	movs	r2, #150	; 0x96
   d559c:	2100      	movs	r1, #0
   d559e:	4628      	mov	r0, r5
   d55a0:	f005 f91c 	bl	da7dc <memset>
  strcpy((char *)buffer, servername);
   d55a4:	6861      	ldr	r1, [r4, #4]
   d55a6:	4628      	mov	r0, r5
   d55a8:	f005 f94e 	bl	da848 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   d55ac:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d55b0:	8922      	ldrh	r2, [r4, #8]
   d55b2:	6803      	ldr	r3, [r0, #0]
   d55b4:	4629      	mov	r1, r5
   d55b6:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d55b8:	2300      	movs	r3, #0
   d55ba:	47b0      	blx	r6
}
   d55bc:	3800      	subs	r0, #0
   d55be:	bf18      	it	ne
   d55c0:	2001      	movne	r0, #1
   d55c2:	bd70      	pop	{r4, r5, r6, pc}

000d55c4 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   d55c4:	b510      	push	{r4, lr}
   d55c6:	4604      	mov	r4, r0
  if (client->connected()) {
   d55c8:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d55cc:	6803      	ldr	r3, [r0, #0]
   d55ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55d0:	4798      	blx	r3
   d55d2:	b120      	cbz	r0, d55de <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d55d4:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d55d8:	6803      	ldr	r3, [r0, #0]
   d55da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55dc:	4798      	blx	r3
}
   d55de:	2001      	movs	r0, #1
   d55e0:	bd10      	pop	{r4, pc}

000d55e2 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   d55e2:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   d55e4:	6803      	ldr	r3, [r0, #0]
   d55e6:	689b      	ldr	r3, [r3, #8]
{
   d55e8:	4604      	mov	r4, r0
    if (!connected())
   d55ea:	4798      	blx	r3
   d55ec:	b9c8      	cbnz	r0, d5622 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d55ee:	4620      	mov	r0, r4
   d55f0:	f000 fa95 	bl	d5b1e <_ZN13Adafruit_MQTT7connectEv>
   d55f4:	2504      	movs	r5, #4
   d55f6:	b170      	cbz	r0, d5616 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d55f8:	3d01      	subs	r5, #1
   d55fa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d55fe:	d00a      	beq.n	d5616 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   d5600:	4620      	mov	r0, r4
   d5602:	f000 f8b7 	bl	d5774 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d5606:	f241 3088 	movw	r0, #5000	; 0x1388
   d560a:	f001 fe8d 	bl	d7328 <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d560e:	4620      	mov	r0, r4
   d5610:	f000 fa85 	bl	d5b1e <_ZN13Adafruit_MQTT7connectEv>
   d5614:	e7ef      	b.n	d55f6 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   d5616:	6823      	ldr	r3, [r4, #0]
   d5618:	4620      	mov	r0, r4
   d561a:	689b      	ldr	r3, [r3, #8]
}
   d561c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   d5620:	4718      	bx	r3
}
   d5622:	bd70      	pop	{r4, r5, r6, pc}

000d5624 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5624:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5626:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5628:	4608      	mov	r0, r1
   d562a:	9101      	str	r1, [sp, #4]
   d562c:	f005 f914 	bl	da858 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d5630:	1203      	asrs	r3, r0, #8
   d5632:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d5634:	7060      	strb	r0, [r4, #1]
   d5636:	b285      	uxth	r5, r0
   d5638:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d563a:	9901      	ldr	r1, [sp, #4]
   d563c:	462a      	mov	r2, r5
   d563e:	4620      	mov	r0, r4
   d5640:	f005 f934 	bl	da8ac <strncpy>
  return p+len;
}
   d5644:	1960      	adds	r0, r4, r5
   d5646:	b003      	add	sp, #12
   d5648:	bd30      	pop	{r4, r5, pc}
	...

000d564c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d564c:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   d564e:	8102      	strh	r2, [r0, #8]
  clientid = "";
   d5650:	4a0a      	ldr	r2, [pc, #40]	; (d567c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   d5652:	4d0b      	ldr	r5, [pc, #44]	; (d5680 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   d5654:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   d5658:	9b03      	ldr	r3, [sp, #12]
   d565a:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d565c:	2300      	movs	r3, #0
  servername = server;
   d565e:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   d5662:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   d5666:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   d566a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   d566e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   d5672:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   d5674:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d5678:	bd30      	pop	{r4, r5, pc}
   d567a:	bf00      	nop
   d567c:	000daa9b 	.word	0x000daa9b
   d5680:	000db470 	.word	0x000db470

000d5684 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5688:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d568a:	6802      	ldr	r2, [r0, #0]
   d568c:	b21b      	sxth	r3, r3
   d568e:	6997      	ldr	r7, [r2, #24]
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5694:	4605      	mov	r5, r0
   d5696:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   d5698:	47b8      	blx	r7
  if (rlen != 1) return 0;
   d569a:	b2c7      	uxtb	r7, r0
   d569c:	2f01      	cmp	r7, #1
   d569e:	9b01      	ldr	r3, [sp, #4]
   d56a0:	d003      	beq.n	d56aa <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   d56a2:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   d56a4:	b003      	add	sp, #12
   d56a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   d56aa:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   d56ae:	f104 0a04 	add.w	sl, r4, #4
  uint32_t value = 0;
   d56b2:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   d56b6:	682a      	ldr	r2, [r5, #0]
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	f8d2 b018 	ldr.w	fp, [r2, #24]
   d56be:	4641      	mov	r1, r8
   d56c0:	2201      	movs	r2, #1
   d56c2:	4628      	mov	r0, r5
   d56c4:	47d8      	blx	fp
    if (rlen != 1) return 0;
   d56c6:	b2c0      	uxtb	r0, r0
   d56c8:	2801      	cmp	r0, #1
   d56ca:	d1ea      	bne.n	d56a2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    if (multiplier > (128UL*128UL*128UL)) {
   d56cc:	45c2      	cmp	sl, r8
    multiplier *= 128;
   d56ce:	ea4f 10c7 	mov.w	r0, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d56d2:	d0e6      	beq.n	d56a2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d56d4:	f818 2b01 	ldrb.w	r2, [r8], #1
  } while (encodedByte & 0x80);
   d56d8:	9b01      	ldr	r3, [sp, #4]
    uint32_t intermediate = encodedByte & 0x7F;
   d56da:	f002 017f 	and.w	r1, r2, #127	; 0x7f
  } while (encodedByte & 0x80);
   d56de:	f012 0f80 	tst.w	r2, #128	; 0x80
    value += intermediate;
   d56e2:	fb01 9907 	mla	r9, r1, r7, r9
  } while (encodedByte & 0x80);
   d56e6:	d116      	bne.n	d5716 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x92>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d56e8:	eba8 0404 	sub.w	r4, r8, r4
   d56ec:	b2a7      	uxth	r7, r4
   d56ee:	1b34      	subs	r4, r6, r4
   d56f0:	682a      	ldr	r2, [r5, #0]
   d56f2:	3c01      	subs	r4, #1
   d56f4:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d56f6:	f8d2 a018 	ldr.w	sl, [r2, #24]
   d56fa:	bf3d      	ittte	cc
   d56fc:	f106 32ff 	addcc.w	r2, r6, #4294967295
   d5700:	1bd2      	subcc	r2, r2, r7
   d5702:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   d5704:	fa1f f289 	uxthcs.w	r2, r9
   d5708:	4641      	mov	r1, r8
   d570a:	4628      	mov	r0, r5
   d570c:	47d0      	blx	sl
   d570e:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   d5710:	4438      	add	r0, r7
   d5712:	b280      	uxth	r0, r0
   d5714:	e7c6      	b.n	d56a4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
   d5716:	4607      	mov	r7, r0
   d5718:	e7cd      	b.n	d56b6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
	...

000d571c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   d5720:	f8df 8030 	ldr.w	r8, [pc, #48]	; d5754 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d5724:	4605      	mov	r5, r0
   d5726:	460c      	mov	r4, r1
   d5728:	4616      	mov	r6, r2
   d572a:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d572c:	463b      	mov	r3, r7
   d572e:	2296      	movs	r2, #150	; 0x96
   d5730:	4621      	mov	r1, r4
   d5732:	4628      	mov	r0, r5
   d5734:	f7ff ffa6 	bl	d5684 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d5738:	b148      	cbz	r0, d574e <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   d573a:	7823      	ldrb	r3, [r4, #0]
   d573c:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d5740:	d005      	beq.n	d574e <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   d5742:	f001 ff87 	bl	d7654 <_Z16_fetch_usbserialv>
   d5746:	4641      	mov	r1, r8
   d5748:	f001 fc71 	bl	d702e <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d574c:	e7ee      	b.n	d572c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   d574e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5752:	bf00      	nop
   d5754:	000db280 	.word	0x000db280

000d5758 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   d5758:	3102      	adds	r1, #2
   d575a:	b2c9      	uxtb	r1, r1
   d575c:	2909      	cmp	r1, #9
   d575e:	bf9a      	itte	ls
   d5760:	4b02      	ldrls	r3, [pc, #8]	; (d576c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d5762:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   d5766:	4802      	ldrhi	r0, [pc, #8]	; (d5770 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d5768:	4770      	bx	lr
   d576a:	bf00      	nop
   d576c:	000db48c 	.word	0x000db48c
   d5770:	000db291 	.word	0x000db291

000d5774 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d5774:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d5776:	23e0      	movs	r3, #224	; 0xe0
   d5778:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   d577c:	4601      	mov	r1, r0
  packet[1] = 0;
   d577e:	2300      	movs	r3, #0
   d5780:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   d5784:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   d5788:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   d578a:	695b      	ldr	r3, [r3, #20]
   d578c:	2202      	movs	r2, #2
   d578e:	4798      	blx	r3
  return disconnectServer();
   d5790:	6823      	ldr	r3, [r4, #0]
   d5792:	4620      	mov	r0, r4
   d5794:	691b      	ldr	r3, [r3, #16]
}
   d5796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   d579a:	4718      	bx	r3

000d579c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d579c:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d57a0:	b530      	push	{r4, r5, lr}
   d57a2:	4613      	mov	r3, r2
   d57a4:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   d57a8:	f853 5b04 	ldr.w	r5, [r3], #4
   d57ac:	428d      	cmp	r5, r1
   d57ae:	d009      	beq.n	d57c4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d57b0:	42a3      	cmp	r3, r4
   d57b2:	d1f9      	bne.n	d57a8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d57b4:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   d57b6:	f852 4b04 	ldr.w	r4, [r2], #4
   d57ba:	b92c      	cbnz	r4, d57c8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   d57bc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d57c0:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   d57c4:	2001      	movs	r0, #1
   d57c6:	e003      	b.n	d57d0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d57c8:	3301      	adds	r3, #1
   d57ca:	2b05      	cmp	r3, #5
   d57cc:	d1f3      	bne.n	d57b6 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   d57ce:	2000      	movs	r0, #0
}
   d57d0:	bd30      	pop	{r4, r5, pc}

000d57d2 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d57d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d57d6:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d57da:	b28b      	uxth	r3, r1
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d57dc:	b085      	sub	sp, #20
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d57de:	2296      	movs	r2, #150	; 0x96
   d57e0:	4649      	mov	r1, r9
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d57e2:	4605      	mov	r5, r0
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d57e4:	f7ff ff4e 	bl	d5684 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d57e8:	4606      	mov	r6, r0
   d57ea:	b1f0      	cbz	r0, d582a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x58>
  topiclen = buffer[3];
   d57ec:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
   d57f0:	9700      	str	r7, [sp, #0]
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d57f2:	f105 0abc 	add.w	sl, r5, #188	; 0xbc
  topiclen = buffer[3];
   d57f6:	f04f 0800 	mov.w	r8, #0
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d57fa:	f105 0b26 	add.w	fp, r5, #38	; 0x26
    if (subscriptions[i]) {
   d57fe:	f85a 4b04 	ldr.w	r4, [sl], #4
   d5802:	b16c      	cbz	r4, d5820 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strlen(subscriptions[i]->topic) != topiclen)
   d5804:	6821      	ldr	r1, [r4, #0]
   d5806:	9101      	str	r1, [sp, #4]
   d5808:	4608      	mov	r0, r1
   d580a:	f005 f825 	bl	da858 <strlen>
   d580e:	42b8      	cmp	r0, r7
   d5810:	d106      	bne.n	d5820 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5812:	9901      	ldr	r1, [sp, #4]
   d5814:	463a      	mov	r2, r7
   d5816:	4658      	mov	r0, fp
   d5818:	f005 f826 	bl	da868 <strncasecmp>
   d581c:	2800      	cmp	r0, #0
   d581e:	d045      	beq.n	d58ac <_ZN13Adafruit_MQTT16readSubscriptionEs+0xda>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5820:	f108 0801 	add.w	r8, r8, #1
   d5824:	f1b8 0f05 	cmp.w	r8, #5
   d5828:	d1e9      	bne.n	d57fe <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2c>
    return NULL;  // No data available, just quit.
   d582a:	2000      	movs	r0, #0
   d582c:	e03b      	b.n	d58a6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd4>
    packetid = buffer[topiclen+4];
   d582e:	19ea      	adds	r2, r5, r7
   d5830:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    packetid |= buffer[topiclen+5];
   d5834:	f892 a027 	ldrb.w	sl, [r2, #39]	; 0x27
   d5838:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d583c:	2214      	movs	r2, #20
   d583e:	2100      	movs	r1, #0
   d5840:	1d60      	adds	r0, r4, #5
   d5842:	f004 ffcb 	bl	da7dc <memset>
  datalen = len - topiclen - packet_id_len - 4;
   d5846:	9b00      	ldr	r3, [sp, #0]
   d5848:	f5c3 447f 	rsb	r4, r3, #65280	; 0xff00
   d584c:	34fc      	adds	r4, #252	; 0xfc
   d584e:	4426      	add	r6, r4
   d5850:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   d5854:	eba6 060b 	sub.w	r6, r6, fp
   d5858:	b2b6      	uxth	r6, r6
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d585a:	2e15      	cmp	r6, #21
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d585c:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   d5860:	f107 0104 	add.w	r1, r7, #4
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5864:	bf28      	it	cs
   d5866:	2613      	movcs	r6, #19
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5868:	4459      	add	r1, fp
   d586a:	4632      	mov	r2, r6
   d586c:	4449      	add	r1, r9
   d586e:	3005      	adds	r0, #5
   d5870:	f004 ff9a 	bl	da7a8 <memmove>
  subscriptions[i]->datalen = datalen;
   d5874:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
   d5878:	835e      	strh	r6, [r3, #26]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d587a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   d587e:	f003 0306 	and.w	r3, r3, #6
   d5882:	2b02      	cmp	r3, #2
   d5884:	d10d      	bne.n	d58a2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd0>
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d5886:	f44f 7310 	mov.w	r3, #576	; 0x240
   d588a:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (!sendPacket(ackpacket, len))
   d588e:	682b      	ldr	r3, [r5, #0]
  packet[2] = packetid >> 8;
   d5890:	fa9a fa9a 	rev16.w	sl, sl
    if (!sendPacket(ackpacket, len))
   d5894:	695b      	ldr	r3, [r3, #20]
  packet[2] = packetid >> 8;
   d5896:	f8ad a00e 	strh.w	sl, [sp, #14]
    if (!sendPacket(ackpacket, len))
   d589a:	2204      	movs	r2, #4
   d589c:	a903      	add	r1, sp, #12
   d589e:	4628      	mov	r0, r5
   d58a0:	4798      	blx	r3
  return subscriptions[i];
   d58a2:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
}
   d58a6:	b005      	add	sp, #20
   d58a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((buffer[0] & 0x6) == 0x2) {
   d58ac:	f895 b022 	ldrb.w	fp, [r5, #34]	; 0x22
   d58b0:	f00b 0b06 	and.w	fp, fp, #6
   d58b4:	f1bb 0f02 	cmp.w	fp, #2
   d58b8:	d0b9      	beq.n	d582e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x5c>
  uint16_t packetid=0;
   d58ba:	4682      	mov	sl, r0
  uint8_t packet_id_len = 0;
   d58bc:	4683      	mov	fp, r0
   d58be:	e7bd      	b.n	d583c <_ZN13Adafruit_MQTT16readSubscriptionEs+0x6a>

000d58c0 <_ZN13Adafruit_MQTT4pingEh>:
bool Adafruit_MQTT::ping(uint8_t num) {
   d58c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d58c4:	4604      	mov	r4, r0
   d58c6:	460d      	mov	r5, r1
   d58c8:	f04f 0800 	mov.w	r8, #0
    uint8_t len = pingPacket(buffer);
   d58cc:	f100 0722 	add.w	r7, r0, #34	; 0x22
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d58d0:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  while (num--) {
   d58d4:	b1e5      	cbz	r5, d5910 <_ZN13Adafruit_MQTT4pingEh+0x50>
    if (!sendPacket(buffer, len))
   d58d6:	6823      	ldr	r3, [r4, #0]
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d58d8:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d58dc:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
    if (!sendPacket(buffer, len))
   d58e0:	695b      	ldr	r3, [r3, #20]
   d58e2:	2202      	movs	r2, #2
   d58e4:	4639      	mov	r1, r7
   d58e6:	4620      	mov	r0, r4
   d58e8:	4798      	blx	r3
   d58ea:	4606      	mov	r6, r0
   d58ec:	b168      	cbz	r0, d590a <_ZN13Adafruit_MQTT4pingEh+0x4a>
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d58ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d58f2:	220d      	movs	r2, #13
   d58f4:	4639      	mov	r1, r7
   d58f6:	4620      	mov	r0, r4
   d58f8:	f7ff ff10 	bl	d571c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d58fc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5900:	2bd0      	cmp	r3, #208	; 0xd0
   d5902:	d102      	bne.n	d590a <_ZN13Adafruit_MQTT4pingEh+0x4a>
}
   d5904:	4630      	mov	r0, r6
   d5906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d590a:	3d01      	subs	r5, #1
   d590c:	b2ed      	uxtb	r5, r5
   d590e:	e7e1      	b.n	d58d4 <_ZN13Adafruit_MQTT4pingEh+0x14>
  return false;
   d5910:	462e      	mov	r6, r5
   d5912:	e7f7      	b.n	d5904 <_ZN13Adafruit_MQTT4pingEh+0x44>

000d5914 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5914:	b538      	push	{r3, r4, r5, lr}
   d5916:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d5918:	4608      	mov	r0, r1
   d591a:	2310      	movs	r3, #16
   d591c:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5920:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   d5922:	4929      	ldr	r1, [pc, #164]	; (d59c8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5924:	f7ff fe7e 	bl	d5624 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   d5928:	2304      	movs	r3, #4
   d592a:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   d592c:	2302      	movs	r3, #2
   d592e:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5930:	69ab      	ldr	r3, [r5, #24]
   d5932:	b18b      	cbz	r3, d5958 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   d5934:	781b      	ldrb	r3, [r3, #0]
   d5936:	b17b      	cbz	r3, d5958 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   d5938:	2306      	movs	r3, #6
   d593a:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   d593c:	f895 3020 	ldrb.w	r3, [r5, #32]
   d5940:	2b01      	cmp	r3, #1
   d5942:	d139      	bne.n	d59b8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5944:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5946:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   d5948:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d594c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d594e:	bf02      	ittt	eq
   d5950:	7843      	ldrbeq	r3, [r0, #1]
   d5952:	f043 0320 	orreq.w	r3, r3, #32
   d5956:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   d5958:	692b      	ldr	r3, [r5, #16]
   d595a:	781b      	ldrb	r3, [r3, #0]
   d595c:	b11b      	cbz	r3, d5966 <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d595e:	7843      	ldrb	r3, [r0, #1]
   d5960:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5964:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d5966:	696b      	ldr	r3, [r5, #20]
   d5968:	781b      	ldrb	r3, [r3, #0]
   d596a:	b11b      	cbz	r3, d5974 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d596c:	7843      	ldrb	r3, [r0, #1]
   d596e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d5972:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5974:	2301      	movs	r3, #1
   d5976:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5978:	232c      	movs	r3, #44	; 0x2c
   d597a:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   d597c:	68e9      	ldr	r1, [r5, #12]
   d597e:	780b      	ldrb	r3, [r1, #0]
   d5980:	b1f3      	cbz	r3, d59c0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   d5982:	3004      	adds	r0, #4
   d5984:	f7ff fe4e 	bl	d5624 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5988:	69a9      	ldr	r1, [r5, #24]
   d598a:	b131      	cbz	r1, d599a <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   d598c:	780b      	ldrb	r3, [r1, #0]
   d598e:	b123      	cbz	r3, d599a <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   d5990:	f7ff fe48 	bl	d5624 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   d5994:	69e9      	ldr	r1, [r5, #28]
   d5996:	f7ff fe45 	bl	d5624 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   d599a:	6929      	ldr	r1, [r5, #16]
   d599c:	780b      	ldrb	r3, [r1, #0]
   d599e:	b10b      	cbz	r3, d59a4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   d59a0:	f7ff fe40 	bl	d5624 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   d59a4:	6969      	ldr	r1, [r5, #20]
   d59a6:	780b      	ldrb	r3, [r1, #0]
   d59a8:	b10b      	cbz	r3, d59ae <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   d59aa:	f7ff fe3b 	bl	d5624 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   d59ae:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d59b0:	b2c0      	uxtb	r0, r0
   d59b2:	1e83      	subs	r3, r0, #2
   d59b4:	7063      	strb	r3, [r4, #1]
}
   d59b6:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   d59b8:	2b02      	cmp	r3, #2
   d59ba:	d1c5      	bne.n	d5948 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d59bc:	231e      	movs	r3, #30
   d59be:	e7c2      	b.n	d5946 <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   d59c0:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   d59c2:	7143      	strb	r3, [r0, #5]
      p++;
   d59c4:	3006      	adds	r0, #6
   d59c6:	e7df      	b.n	d5988 <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   d59c8:	000db29f 	.word	0x000db29f

000d59cc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d59cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d59d0:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   d59d2:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d59d4:	460e      	mov	r6, r1
   d59d6:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   d59d8:	9201      	str	r2, [sp, #4]
   d59da:	f004 ff3d 	bl	da858 <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d59de:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d59e2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   d59e6:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   d59e8:	b284      	uxth	r4, r0
  if(qos > 0) { 
   d59ea:	f1b9 0f00 	cmp.w	r9, #0
   d59ee:	d135      	bne.n	d5a5c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   d59f0:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d59f2:	ea4f 0349 	mov.w	r3, r9, lsl #1
   d59f6:	4630      	mov	r0, r6
    len += 2; // qos packet id
   d59f8:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d59fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   d59fe:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5a00:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   d5a04:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   d5a06:	4622      	mov	r2, r4
   d5a08:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   d5a0c:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   d5a0e:	bf88      	it	hi
   d5a10:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   d5a14:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   d5a16:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   d5a1a:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   d5a1e:	d8f2      	bhi.n	d5a06 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   d5a20:	f7ff fe00 	bl	d5624 <_ZL11stringprintPhPKct.constprop.0>
   d5a24:	4603      	mov	r3, r0
  if(qos > 0) {
   d5a26:	f1b9 0f00 	cmp.w	r9, #0
   d5a2a:	d00c      	beq.n	d5a46 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d5a2c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5a30:	0a12      	lsrs	r2, r2, #8
   d5a32:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d5a34:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5a38:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   d5a3a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5a3e:	3201      	adds	r2, #1
    p+=2;
   d5a40:	3302      	adds	r3, #2
    packet_id_counter++;
   d5a42:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   d5a46:	463a      	mov	r2, r7
   d5a48:	4641      	mov	r1, r8
   d5a4a:	4618      	mov	r0, r3
   d5a4c:	f004 feac 	bl	da7a8 <memmove>
  p+= bLen;
   d5a50:	4438      	add	r0, r7
  len = p - packet;
   d5a52:	1b80      	subs	r0, r0, r6
}
   d5a54:	b280      	uxth	r0, r0
   d5a56:	b003      	add	sp, #12
   d5a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   d5a5c:	3404      	adds	r4, #4
   d5a5e:	e7c8      	b.n	d59f2 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000d5a60 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5a62:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5a66:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5a6a:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5a6c:	e9cd 3600 	strd	r3, r6, [sp]
   d5a70:	4613      	mov	r3, r2
   d5a72:	460a      	mov	r2, r1
   d5a74:	4629      	mov	r1, r5
   d5a76:	f7ff ffa9 	bl	d59cc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d5a7a:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d5a7c:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   d5a7e:	695b      	ldr	r3, [r3, #20]
   d5a80:	4629      	mov	r1, r5
   d5a82:	4620      	mov	r0, r4
   d5a84:	4798      	blx	r3
   d5a86:	b910      	cbnz	r0, d5a8e <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   d5a88:	2000      	movs	r0, #0
}
   d5a8a:	b002      	add	sp, #8
   d5a8c:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   d5a8e:	2e00      	cmp	r6, #0
   d5a90:	d0fb      	beq.n	d5a8a <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d5a92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5a96:	2296      	movs	r2, #150	; 0x96
   d5a98:	4629      	mov	r1, r5
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	f7ff fdf2 	bl	d5684 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   d5aa0:	2804      	cmp	r0, #4
   d5aa2:	d1f1      	bne.n	d5a88 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d5aa4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5aa8:	111b      	asrs	r3, r3, #4
   d5aaa:	2b04      	cmp	r3, #4
   d5aac:	d1ec      	bne.n	d5a88 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    uint16_t packnum = buffer[2];
   d5aae:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   d5ab0:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d5ab4:	ba5b      	rev16	r3, r3
    packnum++;
   d5ab6:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   d5ab8:	b29b      	uxth	r3, r3
   d5aba:	1ac3      	subs	r3, r0, r3
   d5abc:	4258      	negs	r0, r3
   d5abe:	4158      	adcs	r0, r3
   d5ac0:	e7e3      	b.n	d5a8a <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000d5ac2 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5ac2:	b530      	push	{r4, r5, lr}
   d5ac4:	b085      	sub	sp, #20
   d5ac6:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5ac8:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5aca:	461d      	mov	r5, r3
   d5acc:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5ace:	9202      	str	r2, [sp, #8]
   d5ad0:	f004 fec2 	bl	da858 <strlen>
   d5ad4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   d5ad8:	b283      	uxth	r3, r0
   d5ada:	9500      	str	r5, [sp, #0]
   d5adc:	4620      	mov	r0, r4
   d5ade:	f7ff ffbf 	bl	d5a60 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5ae2:	b005      	add	sp, #20
   d5ae4:	bd30      	pop	{r4, r5, pc}

000d5ae6 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   d5ae6:	b538      	push	{r3, r4, r5, lr}
   d5ae8:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d5aea:	2382      	movs	r3, #130	; 0x82
   d5aec:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5aee:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5af2:	0a1b      	lsrs	r3, r3, #8
   d5af4:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   d5af6:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5afa:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   d5afc:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   d5b00:	460c      	mov	r4, r1
  packet_id_counter++;
   d5b02:	3301      	adds	r3, #1
   d5b04:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   d5b08:	4611      	mov	r1, r2
   d5b0a:	1d20      	adds	r0, r4, #4
   d5b0c:	f7ff fd8a 	bl	d5624 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   d5b10:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   d5b14:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5b16:	b2c0      	uxtb	r0, r0
   d5b18:	1e83      	subs	r3, r0, #2
   d5b1a:	7063      	strb	r3, [r4, #1]
}
   d5b1c:	bd38      	pop	{r3, r4, r5, pc}

000d5b1e <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   d5b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   d5b22:	6803      	ldr	r3, [r0, #0]
   d5b24:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   d5b26:	4604      	mov	r4, r0
  if (!connectServer())
   d5b28:	4798      	blx	r3
   d5b2a:	2800      	cmp	r0, #0
   d5b2c:	d04b      	beq.n	d5bc6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   d5b2e:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5b32:	4629      	mov	r1, r5
   d5b34:	4620      	mov	r0, r4
   d5b36:	f7ff feed 	bl	d5914 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5b3a:	6823      	ldr	r3, [r4, #0]
   d5b3c:	b282      	uxth	r2, r0
   d5b3e:	695b      	ldr	r3, [r3, #20]
   d5b40:	4629      	mov	r1, r5
   d5b42:	4620      	mov	r0, r4
   d5b44:	4798      	blx	r3
   d5b46:	2800      	cmp	r0, #0
   d5b48:	d03d      	beq.n	d5bc6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5b4a:	f241 7370 	movw	r3, #6000	; 0x1770
   d5b4e:	2296      	movs	r2, #150	; 0x96
   d5b50:	4629      	mov	r1, r5
   d5b52:	4620      	mov	r0, r4
   d5b54:	f7ff fd96 	bl	d5684 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5b58:	b2c0      	uxtb	r0, r0
   d5b5a:	2804      	cmp	r0, #4
   d5b5c:	d133      	bne.n	d5bc6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d5b5e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5b60:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5b64:	d12f      	bne.n	d5bc6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   d5b66:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d5b6a:	b110      	cbz	r0, d5b72 <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   d5b6c:	b240      	sxtb	r0, r0
}
   d5b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b72:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   d5b76:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   d5b7a:	f857 3b04 	ldr.w	r3, [r7], #4
   d5b7e:	b1f3      	cbz	r3, d5bbe <_ZN13Adafruit_MQTT7connectEv+0xa0>
   d5b80:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5b82:	f857 2c04 	ldr.w	r2, [r7, #-4]
   d5b86:	4629      	mov	r1, r5
   d5b88:	7913      	ldrb	r3, [r2, #4]
   d5b8a:	6812      	ldr	r2, [r2, #0]
   d5b8c:	4620      	mov	r0, r4
   d5b8e:	f7ff ffaa 	bl	d5ae6 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5b92:	6823      	ldr	r3, [r4, #0]
   d5b94:	b282      	uxth	r2, r0
   d5b96:	695b      	ldr	r3, [r3, #20]
   d5b98:	4629      	mov	r1, r5
   d5b9a:	4620      	mov	r0, r4
   d5b9c:	4798      	blx	r3
   d5b9e:	b190      	cbz	r0, d5bc6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5ba0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5ba4:	2209      	movs	r2, #9
   d5ba6:	4629      	mov	r1, r5
   d5ba8:	4620      	mov	r0, r4
   d5baa:	f7ff fdb7 	bl	d571c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d5bae:	b930      	cbnz	r0, d5bbe <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5bb0:	3e01      	subs	r6, #1
   d5bb2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5bb6:	d1e4      	bne.n	d5b82 <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   d5bb8:	f06f 0001 	mvn.w	r0, #1
   d5bbc:	e7d7      	b.n	d5b6e <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5bbe:	45b8      	cmp	r8, r7
   d5bc0:	d1db      	bne.n	d5b7a <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   d5bc2:	2000      	movs	r0, #0
   d5bc4:	e7d3      	b.n	d5b6e <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   d5bc6:	f04f 30ff 	mov.w	r0, #4294967295
   d5bca:	e7d0      	b.n	d5b6e <_ZN13Adafruit_MQTT7connectEv+0x50>

000d5bcc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5bcc:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5bce:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   d5bd2:	7203      	strb	r3, [r0, #8]
}
   d5bd4:	bd10      	pop	{r4, pc}

000d5bd6 <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   d5bd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5bd8:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d5bda:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   d5bdc:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   d5bde:	a901      	add	r1, sp, #4
   d5be0:	f001 f92a 	bl	d6e38 <ltoa>
  return mqtt->publish(topic, payload, qos);
   d5be4:	e9d4 0100 	ldrd	r0, r1, [r4]
   d5be8:	7a23      	ldrb	r3, [r4, #8]
   d5bea:	aa01      	add	r2, sp, #4
   d5bec:	f7ff ff69 	bl	d5ac2 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5bf0:	b004      	add	sp, #16
   d5bf2:	bd10      	pop	{r4, pc}

000d5bf4 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d5bf4:	b5d0      	push	{r4, r6, r7, lr}
   d5bf6:	ec57 6b10 	vmov	r6, r7, d0
   d5bfa:	b090      	sub	sp, #64	; 0x40
   d5bfc:	4604      	mov	r4, r0
   d5bfe:	460b      	mov	r3, r1
  sprintf(fmt, "%%%d.%df", width, prec);
   d5c00:	2200      	movs	r2, #0
   d5c02:	4909      	ldr	r1, [pc, #36]	; (d5c28 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x34>)
   d5c04:	4668      	mov	r0, sp
   d5c06:	f000 ff6f 	bl	d6ae8 <sprintf>
  sprintf(sout, fmt, val);
   d5c0a:	4632      	mov	r2, r6
   d5c0c:	463b      	mov	r3, r7
   d5c0e:	4669      	mov	r1, sp
   d5c10:	a805      	add	r0, sp, #20
   d5c12:	f000 ff69 	bl	d6ae8 <sprintf>
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d5c16:	e9d4 0100 	ldrd	r0, r1, [r4]
   d5c1a:	7a23      	ldrb	r3, [r4, #8]
   d5c1c:	aa05      	add	r2, sp, #20
   d5c1e:	f7ff ff50 	bl	d5ac2 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5c22:	b010      	add	sp, #64	; 0x40
   d5c24:	bdd0      	pop	{r4, r6, r7, pc}
   d5c26:	bf00      	nop
   d5c28:	000db2a4 	.word	0x000db2a4

000d5c2c <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5c2c:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5c2e:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5c30:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   d5c32:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   d5c36:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   d5c3a:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5c3c:	6002      	str	r2, [r0, #0]
  datalen = 0;
   d5c3e:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5c40:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   d5c42:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5c44:	bd10      	pop	{r4, pc}

000d5c46 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5c46:	4770      	bx	lr

000d5c48 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5c48:	b510      	push	{r4, lr}
  }
   d5c4a:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d5c4c:	4604      	mov	r4, r0
  }
   d5c4e:	f002 fac8 	bl	d81e2 <_ZdlPvj>
   d5c52:	4620      	mov	r0, r4
   d5c54:	bd10      	pop	{r4, pc}
	...

000d5c58 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5c58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5c5a:	4604      	mov	r4, r0
   d5c5c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5c5e:	7922      	ldrb	r2, [r4, #4]
   d5c60:	68a3      	ldr	r3, [r4, #8]
   d5c62:	b132      	cbz	r2, d5c72 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d5c64:	b9a3      	cbnz	r3, d5c90 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d5c66:	490b      	ldr	r1, [pc, #44]	; (d5c94 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5c68:	b002      	add	sp, #8
   d5c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d5c6e:	f001 b9cb 	b.w	d7008 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5c72:	4a09      	ldr	r2, [pc, #36]	; (d5c98 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d5c74:	7b26      	ldrb	r6, [r4, #12]
   d5c76:	4d09      	ldr	r5, [pc, #36]	; (d5c9c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5c78:	4909      	ldr	r1, [pc, #36]	; (d5ca0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d5c7a:	7b64      	ldrb	r4, [r4, #13]
   d5c7c:	2e01      	cmp	r6, #1
   d5c7e:	bf18      	it	ne
   d5c80:	4629      	movne	r1, r5
   d5c82:	e9cd 1400 	strd	r1, r4, [sp]
   d5c86:	4907      	ldr	r1, [pc, #28]	; (d5ca4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5c88:	f7fe fa42 	bl	d4110 <_ZN5Print6printfEPKcz>
  }
   d5c8c:	b002      	add	sp, #8
   d5c8e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5c90:	4a05      	ldr	r2, [pc, #20]	; (d5ca8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d5c92:	e7ef      	b.n	d5c74 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d5c94:	000db4c5 	.word	0x000db4c5
   d5c98:	000daa9b 	.word	0x000daa9b
   d5c9c:	000db4c1 	.word	0x000db4c1
   d5ca0:	000db4bd 	.word	0x000db4bd
   d5ca4:	000db4db 	.word	0x000db4db
   d5ca8:	000db4b4 	.word	0x000db4b4

000d5cac <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d5cac:	f04f 33ff 	mov.w	r3, #4294967295
   d5cb0:	6103      	str	r3, [r0, #16]
{ }
   d5cb2:	4770      	bx	lr

000d5cb4 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d5cb8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5cbc:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5cbe:	4605      	mov	r5, r0
   d5cc0:	460f      	mov	r7, r1
    if (_sck == -1)
   d5cc2:	d106      	bne.n	d5cd2 <_ZN15Adafruit_BME2807spixferEh+0x1e>
        return instance().transfer(data);
   d5cc4:	f7ff f890 	bl	d4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5cc8:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d5cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5cce:	f001 b88f 	b.w	d6df0 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d5cd2:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d5cd4:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d5cd6:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d5cda:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5cde:	2100      	movs	r1, #0
   d5ce0:	b280      	uxth	r0, r0
   d5ce2:	f002 f9d0 	bl	d8086 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d5ce6:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d5cea:	fa08 f106 	lsl.w	r1, r8, r6
   d5cee:	4039      	ands	r1, r7
   d5cf0:	b280      	uxth	r0, r0
   d5cf2:	f002 f9c8 	bl	d8086 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d5cf6:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5cfa:	2101      	movs	r1, #1
   d5cfc:	b280      	uxth	r0, r0
   d5cfe:	f002 f9c2 	bl	d8086 <digitalWrite>
        if (digitalRead(_miso))
   d5d02:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d5d06:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d5d08:	b280      	uxth	r0, r0
        reply <<= 1;
   d5d0a:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5d0c:	f002 f9d4 	bl	d80b8 <digitalRead>
   d5d10:	b108      	cbz	r0, d5d16 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d5d12:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d5d16:	3e01      	subs	r6, #1
   d5d18:	d2df      	bcs.n	d5cda <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d5d20:	b508      	push	{r3, lr}
        instance().endTransaction();
   d5d22:	f7ff f861 	bl	d4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d5d26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d5d2a:	f000 bf82 	b.w	d6c32 <_ZN8SPIClass14endTransactionEv>

000d5d2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d5d2e:	b507      	push	{r0, r1, r2, lr}
   d5d30:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d5d32:	f7ff f859 	bl	d4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5d36:	9901      	ldr	r1, [sp, #4]
    }
   d5d38:	b003      	add	sp, #12
   d5d3a:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d5d3e:	f000 bf91 	b.w	d6c64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d5d44 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d5d44:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d5d46:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5d4a:	3301      	adds	r3, #1
{
   d5d4c:	b085      	sub	sp, #20
   d5d4e:	4604      	mov	r4, r0
   d5d50:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5d52:	d123      	bne.n	d5d9c <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5d54:	7901      	ldrb	r1, [r0, #4]
   d5d56:	6800      	ldr	r0, [r0, #0]
   d5d58:	f001 fd94 	bl	d7884 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5d5c:	6820      	ldr	r0, [r4, #0]
   d5d5e:	6803      	ldr	r3, [r0, #0]
   d5d60:	4629      	mov	r1, r5
   d5d62:	689b      	ldr	r3, [r3, #8]
   d5d64:	4798      	blx	r3
        _wire -> endTransmission();
   d5d66:	6820      	ldr	r0, [r4, #0]
   d5d68:	f001 fd97 	bl	d789a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d5d6c:	7921      	ldrb	r1, [r4, #4]
   d5d6e:	6820      	ldr	r0, [r4, #0]
   d5d70:	2203      	movs	r2, #3
   d5d72:	f001 fd84 	bl	d787e <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d5d76:	6820      	ldr	r0, [r4, #0]
   d5d78:	6803      	ldr	r3, [r0, #0]
   d5d7a:	695b      	ldr	r3, [r3, #20]
   d5d7c:	4798      	blx	r3
        value <<= 8;
   d5d7e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5d80:	6820      	ldr	r0, [r4, #0]
   d5d82:	6803      	ldr	r3, [r0, #0]
   d5d84:	695b      	ldr	r3, [r3, #20]
   d5d86:	4798      	blx	r3
   d5d88:	4328      	orrs	r0, r5
        value <<= 8;
   d5d8a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d5d8c:	6820      	ldr	r0, [r4, #0]
   d5d8e:	6803      	ldr	r3, [r0, #0]
   d5d90:	695b      	ldr	r3, [r3, #20]
   d5d92:	4798      	blx	r3
   d5d94:	4305      	orrs	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d5d96:	4628      	mov	r0, r5
   d5d98:	b005      	add	sp, #20
   d5d9a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5d9c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5da0:	3301      	adds	r3, #1
   d5da2:	d10c      	bne.n	d5dbe <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d5da4:	4b1a      	ldr	r3, [pc, #104]	; (d5e10 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d5da6:	9300      	str	r3, [sp, #0]
   d5da8:	2300      	movs	r3, #0
   d5daa:	f88d 3004 	strb.w	r3, [sp, #4]
   d5dae:	4b19      	ldr	r3, [pc, #100]	; (d5e14 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d5db0:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5db2:	4668      	mov	r0, sp
   d5db4:	2301      	movs	r3, #1
   d5db6:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5dba:	f7ff ffb8 	bl	d5d2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5dbe:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5dc2:	2100      	movs	r1, #0
   d5dc4:	b280      	uxth	r0, r0
   d5dc6:	f002 f95e 	bl	d8086 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5dca:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5dce:	4620      	mov	r0, r4
   d5dd0:	f7ff ff70 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5dd4:	2100      	movs	r1, #0
   d5dd6:	4620      	mov	r0, r4
   d5dd8:	f7ff ff6c 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5ddc:	2100      	movs	r1, #0
        value <<= 8;
   d5dde:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5de0:	4620      	mov	r0, r4
   d5de2:	f7ff ff67 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
   d5de6:	4328      	orrs	r0, r5
        value <<= 8;
   d5de8:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5dea:	2100      	movs	r1, #0
   d5dec:	4620      	mov	r0, r4
   d5dee:	f7ff ff61 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
   d5df2:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5df4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5df8:	2101      	movs	r1, #1
   d5dfa:	b280      	uxth	r0, r0
   d5dfc:	f002 f943 	bl	d8086 <digitalWrite>
        if (_sck == -1)
   d5e00:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5e04:	3301      	adds	r3, #1
   d5e06:	d1c6      	bne.n	d5d96 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d5e08:	f7ff ff8a 	bl	d5d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5e0c:	e7c3      	b.n	d5d96 <_ZN15Adafruit_BME2806read24Eh+0x52>
   d5e0e:	bf00      	nop
   d5e10:	000db500 	.word	0x000db500
   d5e14:	0007a120 	.word	0x0007a120

000d5e18 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d5e18:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5e1a:	21fa      	movs	r1, #250	; 0xfa
{
   d5e1c:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5e1e:	f7ff ff91 	bl	d5d44 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d5e22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d5e26:	d01e      	beq.n	d5e66 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5e28:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d5e2a:	ed9f 7a10 	vldr	s14, [pc, #64]	; d5e6c <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5e2e:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5e30:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5e34:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5e38:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5e3c:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5e3e:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d5e40:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5e44:	1312      	asrs	r2, r2, #12
   d5e46:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5e48:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5e4a:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5e4e:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d5e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5e54:	3380      	adds	r3, #128	; 0x80
   d5e56:	121b      	asrs	r3, r3, #8
   d5e58:	ee07 3a90 	vmov	s15, r3
   d5e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d5e60:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5e64:	bd10      	pop	{r4, pc}
        return NAN;
   d5e66:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5e70 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d5e6a:	e7fb      	b.n	d5e64 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d5e6c:	42c80000 	.word	0x42c80000
   d5e70:	7fc00000 	.word	0x7fc00000

000d5e74 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d5e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5e78:	4604      	mov	r4, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d5e7a:	f7ff ffcd 	bl	d5e18 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5e7e:	21f7      	movs	r1, #247	; 0xf7
   d5e80:	4620      	mov	r0, r4
   d5e82:	f7ff ff5f 	bl	d5d44 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5e86:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d5e8a:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d5e8c:	f000 80bf 	beq.w	d600e <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d5e90:	68e0      	ldr	r0, [r4, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5e92:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d5e96:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d5e9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d5e9e:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5ea2:	fba3 8903 	umull	r8, r9, r3, r3
   d5ea6:	fb03 f102 	mul.w	r1, r3, r2
   d5eaa:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d5eae:	17f7      	asrs	r7, r6, #31
   d5eb0:	fb06 f102 	mul.w	r1, r6, r2
   d5eb4:	fb03 1107 	mla	r1, r3, r7, r1
   d5eb8:	fba6 6703 	umull	r6, r7, r6, r3
   d5ebc:	440f      	add	r7, r1
   d5ebe:	0339      	lsls	r1, r7, #12
   d5ec0:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5ec4:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5ec6:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d5eca:	17f7      	asrs	r7, r6, #31
   d5ecc:	fb06 fc09 	mul.w	ip, r6, r9
   d5ed0:	fb08 cc07 	mla	ip, r8, r7, ip
   d5ed4:	fba6 6708 	umull	r6, r7, r6, r8
   d5ed8:	4467      	add	r7, ip
   d5eda:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d5ede:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5ee2:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5ee4:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d5ee8:	eb1c 0000 	adds.w	r0, ip, r0
   d5eec:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5ef0:	3000      	adds	r0, #0
   d5ef2:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d5ef6:	fba0 0106 	umull	r0, r1, r0, r6
   d5efa:	fb06 110e 	mla	r1, r6, lr, r1
   d5efe:	104e      	asrs	r6, r1, #1
   d5f00:	17cf      	asrs	r7, r1, #31

    if (var1 == 0) {
   d5f02:	ea56 0107 	orrs.w	r1, r6, r7
   d5f06:	f000 8085 	beq.w	d6014 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5f0a:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d5f0e:	fb00 fc09 	mul.w	ip, r0, r9
   d5f12:	17c1      	asrs	r1, r0, #31
   d5f14:	fb08 cc01 	mla	ip, r8, r1, ip
   d5f18:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5f1c:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d5f20:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5f24:	fb08 f202 	mul.w	r2, r8, r2
   d5f28:	fb03 2209 	mla	r2, r3, r9, r2
   d5f2c:	fba8 8903 	umull	r8, r9, r8, r3
   d5f30:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5f32:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5f34:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5f38:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5f3c:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5f3e:	1812      	adds	r2, r2, r0
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
   d5f40:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5f44:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5f48:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5f4c:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5f50:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d5f52:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5f54:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d5f56:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d5f5a:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5f5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d5f62:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d5f66:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d5f6a:	1ac0      	subs	r0, r0, r3
   d5f6c:	f640 4335 	movw	r3, #3125	; 0xc35
   d5f70:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d5f74:	fba0 0103 	umull	r0, r1, r0, r3
   d5f78:	fb03 110e 	mla	r1, r3, lr, r1
   d5f7c:	4632      	mov	r2, r6
   d5f7e:	463b      	mov	r3, r7
   d5f80:	f004 f9f6 	bl	da370 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5f84:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d5f88:	134d      	asrs	r5, r1, #13
   d5f8a:	0b46      	lsrs	r6, r0, #13
   d5f8c:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d5f90:	fb02 f705 	mul.w	r7, r2, r5
   d5f94:	17d3      	asrs	r3, r2, #31
   d5f96:	fb06 7703 	mla	r7, r6, r3, r7
   d5f9a:	fba2 2306 	umull	r2, r3, r2, r6
   d5f9e:	443b      	add	r3, r7
   d5fa0:	4355      	muls	r5, r2
   d5fa2:	fb06 5503 	mla	r5, r6, r3, r5
   d5fa6:	fba2 2306 	umull	r2, r3, r2, r6
   d5faa:	442b      	add	r3, r5
   d5fac:	0e55      	lsrs	r5, r2, #25
   d5fae:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5fb2:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5fb6:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d5fba:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5fbc:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5fc0:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5fc4:	17d3      	asrs	r3, r2, #31
   d5fc6:	4351      	muls	r1, r2
   d5fc8:	fb00 1103 	mla	r1, r0, r3, r1
   d5fcc:	fba2 2300 	umull	r2, r3, r2, r0
   d5fd0:	440b      	add	r3, r1
   d5fd2:	0cd1      	lsrs	r1, r2, #19
   d5fd4:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5fd8:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5fda:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5fde:	eb46 0300 	adc.w	r3, r6, r0
   d5fe2:	0a2a      	lsrs	r2, r5, #8
   d5fe4:	17e5      	asrs	r5, r4, #31
   d5fe6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d5fea:	1219      	asrs	r1, r3, #8
   d5fec:	0120      	lsls	r0, r4, #4
   d5fee:	012b      	lsls	r3, r5, #4
   d5ff0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5ff4:	1880      	adds	r0, r0, r2
   d5ff6:	eb43 0101 	adc.w	r1, r3, r1
   d5ffa:	f004 f97b 	bl	da2f4 <__aeabi_l2f>
   d5ffe:	ed9f 0a07 	vldr	s0, [pc, #28]	; d601c <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d6002:	ee07 0a90 	vmov	s15, r0
   d6006:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d600a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d600e:	ed9f 0a04 	vldr	s0, [pc, #16]	; d6020 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d6012:	e7fa      	b.n	d600a <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d6014:	ed9f 0a03 	vldr	s0, [pc, #12]	; d6024 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d6018:	e7f7      	b.n	d600a <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d601a:	bf00      	nop
   d601c:	3b800000 	.word	0x3b800000
   d6020:	7fc00000 	.word	0x7fc00000
   d6024:	00000000 	.word	0x00000000

000d6028 <_ZN15Adafruit_BME2806read16Eh>:
{
   d6028:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d602a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d602e:	3301      	adds	r3, #1
{
   d6030:	b085      	sub	sp, #20
   d6032:	4604      	mov	r4, r0
   d6034:	460d      	mov	r5, r1
    if (_cs == -1) {
   d6036:	d11f      	bne.n	d6078 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d6038:	7901      	ldrb	r1, [r0, #4]
   d603a:	6800      	ldr	r0, [r0, #0]
   d603c:	f001 fc22 	bl	d7884 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d6040:	6820      	ldr	r0, [r4, #0]
   d6042:	6803      	ldr	r3, [r0, #0]
   d6044:	4629      	mov	r1, r5
   d6046:	689b      	ldr	r3, [r3, #8]
   d6048:	4798      	blx	r3
        _wire -> endTransmission();
   d604a:	6820      	ldr	r0, [r4, #0]
   d604c:	f001 fc25 	bl	d789a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d6050:	7921      	ldrb	r1, [r4, #4]
   d6052:	6820      	ldr	r0, [r4, #0]
   d6054:	2202      	movs	r2, #2
   d6056:	f001 fc12 	bl	d787e <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d605a:	6820      	ldr	r0, [r4, #0]
   d605c:	6803      	ldr	r3, [r0, #0]
   d605e:	695b      	ldr	r3, [r3, #20]
   d6060:	4798      	blx	r3
   d6062:	4605      	mov	r5, r0
   d6064:	6820      	ldr	r0, [r4, #0]
   d6066:	6803      	ldr	r3, [r0, #0]
   d6068:	695b      	ldr	r3, [r3, #20]
   d606a:	4798      	blx	r3
   d606c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d6070:	b285      	uxth	r5, r0
}
   d6072:	4628      	mov	r0, r5
   d6074:	b005      	add	sp, #20
   d6076:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d6078:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d607c:	3301      	adds	r3, #1
   d607e:	d10c      	bne.n	d609a <_ZN15Adafruit_BME2806read16Eh+0x72>
   d6080:	4b18      	ldr	r3, [pc, #96]	; (d60e4 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d6082:	9300      	str	r3, [sp, #0]
   d6084:	2300      	movs	r3, #0
   d6086:	f88d 3004 	strb.w	r3, [sp, #4]
   d608a:	4b17      	ldr	r3, [pc, #92]	; (d60e8 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d608c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d608e:	4668      	mov	r0, sp
   d6090:	2301      	movs	r3, #1
   d6092:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6096:	f7ff fe4a 	bl	d5d2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d609a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d609e:	2100      	movs	r1, #0
   d60a0:	b280      	uxth	r0, r0
   d60a2:	f001 fff0 	bl	d8086 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d60a6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d60aa:	4620      	mov	r0, r4
   d60ac:	f7ff fe02 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d60b0:	2100      	movs	r1, #0
   d60b2:	4620      	mov	r0, r4
   d60b4:	f7ff fdfe 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
   d60b8:	2100      	movs	r1, #0
   d60ba:	4605      	mov	r5, r0
   d60bc:	4620      	mov	r0, r4
   d60be:	f7ff fdf9 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
   d60c2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d60c6:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d60c8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d60cc:	2101      	movs	r1, #1
   d60ce:	b280      	uxth	r0, r0
   d60d0:	f001 ffd9 	bl	d8086 <digitalWrite>
        if (_sck == -1)
   d60d4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d60d8:	3301      	adds	r3, #1
   d60da:	d1ca      	bne.n	d6072 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d60dc:	f7ff fe20 	bl	d5d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d60e0:	e7c7      	b.n	d6072 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d60e2:	bf00      	nop
   d60e4:	000db500 	.word	0x000db500
   d60e8:	0007a120 	.word	0x0007a120

000d60ec <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d60ec:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d60ee:	f7ff ff9b 	bl	d6028 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d60f2:	ba40      	rev16	r0, r0
}
   d60f4:	b280      	uxth	r0, r0
   d60f6:	bd08      	pop	{r3, pc}

000d60f8 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d60f8:	b538      	push	{r3, r4, r5, lr}
   d60fa:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d60fc:	f7ff fe8c 	bl	d5e18 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d6100:	21fd      	movs	r1, #253	; 0xfd
   d6102:	4620      	mov	r0, r4
   d6104:	f7ff ff90 	bl	d6028 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d6108:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d610c:	d038      	beq.n	d6180 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d610e:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d6112:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d6114:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d6118:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d611a:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d611e:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d6122:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d6126:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d612a:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d612c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d6130:	4353      	muls	r3, r2
   d6132:	12db      	asrs	r3, r3, #11
   d6134:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d6138:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d613c:	4353      	muls	r3, r2
   d613e:	129b      	asrs	r3, r3, #10
   d6140:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d6142:	129b      	asrs	r3, r3, #10
   d6144:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d6148:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d614c:	4353      	muls	r3, r2
   d614e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d6152:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d6154:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d6156:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d6158:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d615c:	4352      	muls	r2, r2
   d615e:	11d2      	asrs	r2, r2, #7
   d6160:	434a      	muls	r2, r1
   d6162:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d6166:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d616a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d616e:	bfa8      	it	ge
   d6170:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d6174:	131b      	asrs	r3, r3, #12
   d6176:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d617a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d617e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d6180:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6188 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d6184:	e7fb      	b.n	d617e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d6186:	bf00      	nop
   d6188:	7fc00000 	.word	0x7fc00000

000d618c <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d618c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d618e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d6192:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d6194:	b085      	sub	sp, #20
   d6196:	4604      	mov	r4, r0
   d6198:	460d      	mov	r5, r1
    if (_cs == -1) {
   d619a:	d118      	bne.n	d61ce <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d619c:	7901      	ldrb	r1, [r0, #4]
   d619e:	6800      	ldr	r0, [r0, #0]
   d61a0:	f001 fb70 	bl	d7884 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d61a4:	6820      	ldr	r0, [r4, #0]
   d61a6:	6803      	ldr	r3, [r0, #0]
   d61a8:	4629      	mov	r1, r5
   d61aa:	689b      	ldr	r3, [r3, #8]
   d61ac:	4798      	blx	r3
        _wire -> endTransmission();
   d61ae:	6820      	ldr	r0, [r4, #0]
   d61b0:	f001 fb73 	bl	d789a <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d61b4:	7921      	ldrb	r1, [r4, #4]
   d61b6:	6820      	ldr	r0, [r4, #0]
   d61b8:	2201      	movs	r2, #1
   d61ba:	f001 fb60 	bl	d787e <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d61be:	6820      	ldr	r0, [r4, #0]
   d61c0:	6803      	ldr	r3, [r0, #0]
   d61c2:	695b      	ldr	r3, [r3, #20]
   d61c4:	4798      	blx	r3
   d61c6:	b2c5      	uxtb	r5, r0
}
   d61c8:	4628      	mov	r0, r5
   d61ca:	b005      	add	sp, #20
   d61cc:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d61ce:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d61d2:	3301      	adds	r3, #1
   d61d4:	d10c      	bne.n	d61f0 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d61d6:	4b15      	ldr	r3, [pc, #84]	; (d622c <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d61d8:	9300      	str	r3, [sp, #0]
   d61da:	2300      	movs	r3, #0
   d61dc:	f88d 3004 	strb.w	r3, [sp, #4]
   d61e0:	4b13      	ldr	r3, [pc, #76]	; (d6230 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d61e2:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d61e4:	4668      	mov	r0, sp
   d61e6:	2301      	movs	r3, #1
   d61e8:	f8ad 300c 	strh.w	r3, [sp, #12]
   d61ec:	f7ff fd9f 	bl	d5d2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d61f0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d61f4:	2100      	movs	r1, #0
   d61f6:	b280      	uxth	r0, r0
   d61f8:	f001 ff45 	bl	d8086 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d61fc:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d6200:	4620      	mov	r0, r4
   d6202:	f7ff fd57 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d6206:	2100      	movs	r1, #0
   d6208:	4620      	mov	r0, r4
   d620a:	f7ff fd53 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
   d620e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d6210:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6214:	2101      	movs	r1, #1
   d6216:	b280      	uxth	r0, r0
   d6218:	f001 ff35 	bl	d8086 <digitalWrite>
        if (_sck == -1)
   d621c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d6220:	3301      	adds	r3, #1
   d6222:	d1d1      	bne.n	d61c8 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d6224:	f7ff fd7c 	bl	d5d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d6228:	e7ce      	b.n	d61c8 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d622a:	bf00      	nop
   d622c:	000db500 	.word	0x000db500
   d6230:	0007a120 	.word	0x0007a120

000d6234 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d6234:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d6236:	21f3      	movs	r1, #243	; 0xf3
   d6238:	f7ff ffa8 	bl	d618c <_ZN15Adafruit_BME2805read8Eh>
}
   d623c:	f000 0001 	and.w	r0, r0, #1
   d6240:	bd08      	pop	{r3, pc}

000d6242 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d6242:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d6244:	2188      	movs	r1, #136	; 0x88
{
   d6246:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d6248:	f7ff ff50 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d624c:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d624e:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d6250:	4620      	mov	r0, r4
   d6252:	f7ff ff4b 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
   d6256:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d6258:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d625a:	4620      	mov	r0, r4
   d625c:	f7ff ff46 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d6260:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d6262:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d6264:	4620      	mov	r0, r4
   d6266:	f7ff ff41 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d626a:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d626c:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d626e:	4620      	mov	r0, r4
   d6270:	f7ff ff3c 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
   d6274:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d6276:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d6278:	4620      	mov	r0, r4
   d627a:	f7ff ff37 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
   d627e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d6280:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d6282:	4620      	mov	r0, r4
   d6284:	f7ff ff32 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
   d6288:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d628a:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d628c:	4620      	mov	r0, r4
   d628e:	f7ff ff2d 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
   d6292:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d6294:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d6296:	4620      	mov	r0, r4
   d6298:	f7ff ff28 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
   d629c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d629e:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d62a0:	4620      	mov	r0, r4
   d62a2:	f7ff ff23 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
   d62a6:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d62a8:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d62aa:	4620      	mov	r0, r4
   d62ac:	f7ff ff1e 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
   d62b0:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d62b2:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d62b4:	4620      	mov	r0, r4
   d62b6:	f7ff ff19 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d62ba:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d62bc:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d62be:	4620      	mov	r0, r4
   d62c0:	f7ff ff64 	bl	d618c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d62c4:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d62c6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d62ca:	4620      	mov	r0, r4
   d62cc:	f7ff ff0e 	bl	d60ec <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d62d0:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d62d2:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d62d4:	4620      	mov	r0, r4
   d62d6:	f7ff ff59 	bl	d618c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d62da:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d62dc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d62e0:	4620      	mov	r0, r4
   d62e2:	f7ff ff53 	bl	d618c <_ZN15Adafruit_BME2805read8Eh>
   d62e6:	21e5      	movs	r1, #229	; 0xe5
   d62e8:	4605      	mov	r5, r0
   d62ea:	4620      	mov	r0, r4
   d62ec:	f7ff ff4e 	bl	d618c <_ZN15Adafruit_BME2805read8Eh>
   d62f0:	f000 030f 	and.w	r3, r0, #15
   d62f4:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d62f8:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d62fa:	21e6      	movs	r1, #230	; 0xe6
   d62fc:	4620      	mov	r0, r4
   d62fe:	f7ff ff45 	bl	d618c <_ZN15Adafruit_BME2805read8Eh>
   d6302:	21e5      	movs	r1, #229	; 0xe5
   d6304:	4605      	mov	r5, r0
   d6306:	4620      	mov	r0, r4
   d6308:	f7ff ff40 	bl	d618c <_ZN15Adafruit_BME2805read8Eh>
   d630c:	1103      	asrs	r3, r0, #4
   d630e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d6312:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d6314:	21e7      	movs	r1, #231	; 0xe7
   d6316:	4620      	mov	r0, r4
   d6318:	f7ff ff38 	bl	d618c <_ZN15Adafruit_BME2805read8Eh>
   d631c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d6320:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6324 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d6324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d6326:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d632a:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d632c:	4604      	mov	r4, r0
   d632e:	460e      	mov	r6, r1
   d6330:	4615      	mov	r5, r2
    if (_cs == -1) {
   d6332:	d112      	bne.n	d635a <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d6334:	7901      	ldrb	r1, [r0, #4]
   d6336:	6800      	ldr	r0, [r0, #0]
   d6338:	f001 faa4 	bl	d7884 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d633c:	6820      	ldr	r0, [r4, #0]
   d633e:	6803      	ldr	r3, [r0, #0]
   d6340:	4631      	mov	r1, r6
   d6342:	689b      	ldr	r3, [r3, #8]
   d6344:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d6346:	6820      	ldr	r0, [r4, #0]
   d6348:	6803      	ldr	r3, [r0, #0]
   d634a:	4629      	mov	r1, r5
   d634c:	689b      	ldr	r3, [r3, #8]
   d634e:	4798      	blx	r3
        _wire -> endTransmission();
   d6350:	6820      	ldr	r0, [r4, #0]
   d6352:	f001 faa2 	bl	d789a <_ZN7TwoWire15endTransmissionEv>
}
   d6356:	b004      	add	sp, #16
   d6358:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d635a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d635e:	3301      	adds	r3, #1
   d6360:	d10c      	bne.n	d637c <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d6362:	4b14      	ldr	r3, [pc, #80]	; (d63b4 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d6364:	9300      	str	r3, [sp, #0]
   d6366:	2300      	movs	r3, #0
   d6368:	f88d 3004 	strb.w	r3, [sp, #4]
   d636c:	4b12      	ldr	r3, [pc, #72]	; (d63b8 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d636e:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d6370:	4668      	mov	r0, sp
   d6372:	2301      	movs	r3, #1
   d6374:	f8ad 300c 	strh.w	r3, [sp, #12]
   d6378:	f7ff fcd9 	bl	d5d2e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d637c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6380:	2100      	movs	r1, #0
   d6382:	b280      	uxth	r0, r0
   d6384:	f001 fe7f 	bl	d8086 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d6388:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d638c:	4620      	mov	r0, r4
   d638e:	f7ff fc91 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d6392:	4629      	mov	r1, r5
   d6394:	4620      	mov	r0, r4
   d6396:	f7ff fc8d 	bl	d5cb4 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d639a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d639e:	2101      	movs	r1, #1
   d63a0:	b280      	uxth	r0, r0
   d63a2:	f001 fe70 	bl	d8086 <digitalWrite>
    if (_sck == -1)
   d63a6:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d63aa:	3301      	adds	r3, #1
   d63ac:	d1d3      	bne.n	d6356 <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d63ae:	f7ff fcb7 	bl	d5d20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d63b2:	e7d0      	b.n	d6356 <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d63b4:	000db500 	.word	0x000db500
   d63b8:	0007a120 	.word	0x0007a120

000d63bc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d63bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d63be:	00db      	lsls	r3, r3, #3
   d63c0:	f002 0207 	and.w	r2, r2, #7
   d63c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d63c8:	4313      	orrs	r3, r2
   d63ca:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d63ce:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d63d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d63d6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d63da:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d63de:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d63e2:	f366 1347 	bfi	r3, r6, #5, #3
   d63e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d63ea:	00ed      	lsls	r5, r5, #3
   d63ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d63f0:	f007 0707 	and.w	r7, r7, #7
   d63f4:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d63f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d63fc:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d63fe:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d6400:	431d      	orrs	r5, r3
   d6402:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d6406:	f006 0207 	and.w	r2, r6, #7
   d640a:	21f2      	movs	r1, #242	; 0xf2
   d640c:	f7ff ff8a 	bl	d6324 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d6410:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d6414:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d6418:	f002 0107 	and.w	r1, r2, #7
   d641c:	009b      	lsls	r3, r3, #2
   d641e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d6422:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d6426:	4620      	mov	r0, r4
   d6428:	21f5      	movs	r1, #245	; 0xf5
   d642a:	f7ff ff7b 	bl	d6324 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d642e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d6432:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d6436:	f002 0107 	and.w	r1, r2, #7
   d643a:	009b      	lsls	r3, r3, #2
   d643c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d6440:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d6444:	4620      	mov	r0, r4
   d6446:	21f4      	movs	r1, #244	; 0xf4
}
   d6448:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d644c:	f7ff bf6a 	b.w	d6324 <_ZN15Adafruit_BME2806write8Ehh>

000d6450 <_ZN15Adafruit_BME2804initEv>:
{
   d6450:	b530      	push	{r4, r5, lr}
   d6452:	4604      	mov	r4, r0
    if (_cs == -1) {
   d6454:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d6458:	1c42      	adds	r2, r0, #1
{
   d645a:	b085      	sub	sp, #20
    if (_cs == -1) {
   d645c:	d119      	bne.n	d6492 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d645e:	6820      	ldr	r0, [r4, #0]
   d6460:	f001 f9de 	bl	d7820 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d6464:	21d0      	movs	r1, #208	; 0xd0
   d6466:	4620      	mov	r0, r4
   d6468:	f7ff fe90 	bl	d618c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d646c:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d646e:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d6470:	d145      	bne.n	d64fe <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d6472:	4620      	mov	r0, r4
   d6474:	22b6      	movs	r2, #182	; 0xb6
   d6476:	21e0      	movs	r1, #224	; 0xe0
   d6478:	f7ff ff54 	bl	d6324 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d647c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6480:	f000 ff52 	bl	d7328 <delay>
    while (isReadingCalibration())
   d6484:	4620      	mov	r0, r4
   d6486:	f7ff fed5 	bl	d6234 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d648a:	4605      	mov	r5, r0
   d648c:	b328      	cbz	r0, d64da <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d648e:	2064      	movs	r0, #100	; 0x64
   d6490:	e7f6      	b.n	d6480 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d6492:	2101      	movs	r1, #1
   d6494:	b280      	uxth	r0, r0
   d6496:	f001 fdf6 	bl	d8086 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d649a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d649e:	2101      	movs	r1, #1
   d64a0:	b280      	uxth	r0, r0
   d64a2:	f001 fddf 	bl	d8064 <pinMode>
        if (_sck == -1) {
   d64a6:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d64aa:	1c43      	adds	r3, r0, #1
   d64ac:	d104      	bne.n	d64b8 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d64ae:	f7fe fc9b 	bl	d4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d64b2:	f000 fb87 	bl	d6bc4 <_ZN8SPIClass5beginEv>
    }
   d64b6:	e7d5      	b.n	d6464 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d64b8:	2101      	movs	r1, #1
   d64ba:	b280      	uxth	r0, r0
   d64bc:	f001 fdd2 	bl	d8064 <pinMode>
            pinMode(_mosi, OUTPUT);
   d64c0:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d64c4:	2101      	movs	r1, #1
   d64c6:	b280      	uxth	r0, r0
   d64c8:	f001 fdcc 	bl	d8064 <pinMode>
            pinMode(_miso, INPUT);
   d64cc:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d64d0:	2100      	movs	r1, #0
   d64d2:	b280      	uxth	r0, r0
   d64d4:	f001 fdc6 	bl	d8064 <pinMode>
   d64d8:	e7c4      	b.n	d6464 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d64da:	4620      	mov	r0, r4
   d64dc:	f7ff feb1 	bl	d6242 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d64e0:	2305      	movs	r3, #5
   d64e2:	9300      	str	r3, [sp, #0]
   d64e4:	461a      	mov	r2, r3
   d64e6:	2103      	movs	r1, #3
   d64e8:	4620      	mov	r0, r4
   d64ea:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d64ee:	f7ff ff65 	bl	d63bc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d64f2:	2064      	movs	r0, #100	; 0x64
   d64f4:	f000 ff18 	bl	d7328 <delay>
   d64f8:	2001      	movs	r0, #1
}
   d64fa:	b005      	add	sp, #20
   d64fc:	bd30      	pop	{r4, r5, pc}
        return false;
   d64fe:	2000      	movs	r0, #0
   d6500:	e7fb      	b.n	d64fa <_ZN15Adafruit_BME2804initEv+0xaa>

000d6502 <_ZN15Adafruit_BME2805beginEh>:
{
   d6502:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d6504:	7101      	strb	r1, [r0, #4]
{
   d6506:	4604      	mov	r4, r0
	_wire = &Wire;
   d6508:	f001 fe3e 	bl	d8188 <_Z19__fetch_global_Wirev>
   d650c:	6020      	str	r0, [r4, #0]
	return init();
   d650e:	4620      	mov	r0, r4
}
   d6510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
   d6514:	f7ff bf9c 	b.w	d6450 <_ZN15Adafruit_BME2804initEv>

000d6518 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d6518:	2200      	movs	r2, #0
   d651a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   d651e:	6001      	str	r1, [r0, #0]
    // do nothing
}
   d6520:	4770      	bx	lr
	...

000d6524 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
   d6524:	b510      	push	{r4, lr}
   d6526:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6528:	f000 f8a2 	bl	d6670 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d652c:	69a3      	ldr	r3, [r4, #24]
   d652e:	1ac0      	subs	r0, r0, r3
   d6530:	4b07      	ldr	r3, [pc, #28]	; (d6550 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d6532:	4298      	cmp	r0, r3
   d6534:	d90a      	bls.n	d654c <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d6536:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d653a:	fb93 f3f2 	sdiv	r3, r3, r2
   d653e:	60e3      	str	r3, [r4, #12]
   d6540:	f000 f896 	bl	d6670 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d6544:	2300      	movs	r3, #0
        _volSumCount = 0;
   d6546:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   d654a:	61a0      	str	r0, [r4, #24]
    }
}
   d654c:	bd10      	pop	{r4, pc}
   d654e:	bf00      	nop
   d6550:	0007a120 	.word	0x0007a120

000d6554 <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   d6554:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d6556:	6883      	ldr	r3, [r0, #8]
   d6558:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   d655a:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   d655c:	8800      	ldrh	r0, [r0, #0]
   d655e:	f001 fdbe 	bl	d80de <analogRead>
    _voltageSum += _currentVoltage;
   d6562:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   d6564:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   d6566:	4418      	add	r0, r3
    _volSumCount += 1;
   d6568:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   d656a:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d656c:	3301      	adds	r3, #1
   d656e:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   d6570:	4620      	mov	r0, r4
   d6572:	f7ff ffd7 	bl	d6524 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d6576:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   d657a:	1a51      	subs	r1, r2, r1
   d657c:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d6580:	dc10      	bgt.n	d65a4 <_ZN16AirQualitySensor5slopeEv+0x50>
   d6582:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d6586:	dc0d      	bgt.n	d65a4 <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   d6588:	68e3      	ldr	r3, [r4, #12]
   d658a:	1ad3      	subs	r3, r2, r3
   d658c:	2b96      	cmp	r3, #150	; 0x96
   d658e:	dc0b      	bgt.n	d65a8 <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d6590:	29c8      	cmp	r1, #200	; 0xc8
   d6592:	dd02      	ble.n	d659a <_ZN16AirQualitySensor5slopeEv+0x46>
   d6594:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d6598:	d108      	bne.n	d65ac <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   d659a:	2b32      	cmp	r3, #50	; 0x32
   d659c:	bfcc      	ite	gt
   d659e:	2002      	movgt	r0, #2
   d65a0:	2003      	movle	r0, #3
}
   d65a2:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   d65a4:	2000      	movs	r0, #0
   d65a6:	e7fc      	b.n	d65a2 <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   d65a8:	2001      	movs	r0, #1
   d65aa:	e7fa      	b.n	d65a2 <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   d65ac:	2002      	movs	r0, #2
   d65ae:	e7f8      	b.n	d65a2 <_ZN16AirQualitySensor5slopeEv+0x4e>

000d65b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d65b0:	b508      	push	{r3, lr}
   d65b2:	4b02      	ldr	r3, [pc, #8]	; (d65bc <netdb_freeaddrinfo+0xc>)
   d65b4:	681b      	ldr	r3, [r3, #0]
   d65b6:	689b      	ldr	r3, [r3, #8]
   d65b8:	9301      	str	r3, [sp, #4]
   d65ba:	bd08      	pop	{r3, pc}
   d65bc:	00030268 	.word	0x00030268

000d65c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d65c0:	b508      	push	{r3, lr}
   d65c2:	4b02      	ldr	r3, [pc, #8]	; (d65cc <netdb_getaddrinfo+0xc>)
   d65c4:	681b      	ldr	r3, [r3, #0]
   d65c6:	68db      	ldr	r3, [r3, #12]
   d65c8:	9301      	str	r3, [sp, #4]
   d65ca:	bd08      	pop	{r3, pc}
   d65cc:	00030268 	.word	0x00030268

000d65d0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d65d0:	b508      	push	{r3, lr}
   d65d2:	4b02      	ldr	r3, [pc, #8]	; (d65dc <HAL_Validate_Pin_Function+0xc>)
   d65d4:	681b      	ldr	r3, [r3, #0]
   d65d6:	685b      	ldr	r3, [r3, #4]
   d65d8:	9301      	str	r3, [sp, #4]
   d65da:	bd08      	pop	{r3, pc}
   d65dc:	0003022c 	.word	0x0003022c

000d65e0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d65e0:	b508      	push	{r3, lr}
   d65e2:	4b02      	ldr	r3, [pc, #8]	; (d65ec <HAL_Pin_Mode+0xc>)
   d65e4:	681b      	ldr	r3, [r3, #0]
   d65e6:	689b      	ldr	r3, [r3, #8]
   d65e8:	9301      	str	r3, [sp, #4]
   d65ea:	bd08      	pop	{r3, pc}
   d65ec:	0003022c 	.word	0x0003022c

000d65f0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d65f0:	b508      	push	{r3, lr}
   d65f2:	4b02      	ldr	r3, [pc, #8]	; (d65fc <HAL_Get_Pin_Mode+0xc>)
   d65f4:	681b      	ldr	r3, [r3, #0]
   d65f6:	68db      	ldr	r3, [r3, #12]
   d65f8:	9301      	str	r3, [sp, #4]
   d65fa:	bd08      	pop	{r3, pc}
   d65fc:	0003022c 	.word	0x0003022c

000d6600 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6600:	b508      	push	{r3, lr}
   d6602:	4b02      	ldr	r3, [pc, #8]	; (d660c <HAL_GPIO_Write+0xc>)
   d6604:	681b      	ldr	r3, [r3, #0]
   d6606:	691b      	ldr	r3, [r3, #16]
   d6608:	9301      	str	r3, [sp, #4]
   d660a:	bd08      	pop	{r3, pc}
   d660c:	0003022c 	.word	0x0003022c

000d6610 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6610:	b508      	push	{r3, lr}
   d6612:	4b02      	ldr	r3, [pc, #8]	; (d661c <HAL_GPIO_Read+0xc>)
   d6614:	681b      	ldr	r3, [r3, #0]
   d6616:	695b      	ldr	r3, [r3, #20]
   d6618:	9301      	str	r3, [sp, #4]
   d661a:	bd08      	pop	{r3, pc}
   d661c:	0003022c 	.word	0x0003022c

000d6620 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6620:	b508      	push	{r3, lr}
   d6622:	4b02      	ldr	r3, [pc, #8]	; (d662c <hal_adc_read+0xc>)
   d6624:	681b      	ldr	r3, [r3, #0]
   d6626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6628:	9301      	str	r3, [sp, #4]
   d662a:	bd08      	pop	{r3, pc}
   d662c:	0003022c 	.word	0x0003022c

000d6630 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d6630:	b508      	push	{r3, lr}
   d6632:	4b02      	ldr	r3, [pc, #8]	; (d663c <HAL_Pulse_In+0xc>)
   d6634:	681b      	ldr	r3, [r3, #0]
   d6636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6638:	9301      	str	r3, [sp, #4]
   d663a:	bd08      	pop	{r3, pc}
   d663c:	0003022c 	.word	0x0003022c

000d6640 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6640:	b508      	push	{r3, lr}
   d6642:	4b02      	ldr	r3, [pc, #8]	; (d664c <if_index_to_name+0xc>)
   d6644:	681b      	ldr	r3, [r3, #0]
   d6646:	695b      	ldr	r3, [r3, #20]
   d6648:	9301      	str	r3, [sp, #4]
   d664a:	bd08      	pop	{r3, pc}
   d664c:	0003026c 	.word	0x0003026c

000d6650 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6650:	b508      	push	{r3, lr}
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <HAL_RNG_GetRandomNumber+0xc>)
   d6654:	681b      	ldr	r3, [r3, #0]
   d6656:	685b      	ldr	r3, [r3, #4]
   d6658:	9301      	str	r3, [sp, #4]
   d665a:	bd08      	pop	{r3, pc}
   d665c:	00030218 	.word	0x00030218

000d6660 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6660:	b508      	push	{r3, lr}
   d6662:	4b02      	ldr	r3, [pc, #8]	; (d666c <HAL_Delay_Microseconds+0xc>)
   d6664:	681b      	ldr	r3, [r3, #0]
   d6666:	68db      	ldr	r3, [r3, #12]
   d6668:	9301      	str	r3, [sp, #4]
   d666a:	bd08      	pop	{r3, pc}
   d666c:	00030218 	.word	0x00030218

000d6670 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6670:	b508      	push	{r3, lr}
   d6672:	4b02      	ldr	r3, [pc, #8]	; (d667c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6674:	681b      	ldr	r3, [r3, #0]
   d6676:	695b      	ldr	r3, [r3, #20]
   d6678:	9301      	str	r3, [sp, #4]
   d667a:	bd08      	pop	{r3, pc}
   d667c:	00030218 	.word	0x00030218

000d6680 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6680:	b508      	push	{r3, lr}
   d6682:	4b02      	ldr	r3, [pc, #8]	; (d668c <os_mutex_recursive_create+0xc>)
   d6684:	681b      	ldr	r3, [r3, #0]
   d6686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6688:	9301      	str	r3, [sp, #4]
   d668a:	bd08      	pop	{r3, pc}
   d668c:	00030248 	.word	0x00030248

000d6690 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6690:	b508      	push	{r3, lr}
   d6692:	4b02      	ldr	r3, [pc, #8]	; (d669c <os_mutex_recursive_destroy+0xc>)
   d6694:	681b      	ldr	r3, [r3, #0]
   d6696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6698:	9301      	str	r3, [sp, #4]
   d669a:	bd08      	pop	{r3, pc}
   d669c:	00030248 	.word	0x00030248

000d66a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d66a0:	b508      	push	{r3, lr}
   d66a2:	4b02      	ldr	r3, [pc, #8]	; (d66ac <inet_inet_ntop+0xc>)
   d66a4:	681b      	ldr	r3, [r3, #0]
   d66a6:	695b      	ldr	r3, [r3, #20]
   d66a8:	9301      	str	r3, [sp, #4]
   d66aa:	bd08      	pop	{r3, pc}
   d66ac:	00030264 	.word	0x00030264

000d66b0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d66b0:	b508      	push	{r3, lr}
   d66b2:	4b02      	ldr	r3, [pc, #8]	; (d66bc <inet_htonl+0xc>)
   d66b4:	681b      	ldr	r3, [r3, #0]
   d66b6:	6a1b      	ldr	r3, [r3, #32]
   d66b8:	9301      	str	r3, [sp, #4]
   d66ba:	bd08      	pop	{r3, pc}
   d66bc:	00030264 	.word	0x00030264

000d66c0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d66c0:	b508      	push	{r3, lr}
   d66c2:	4b02      	ldr	r3, [pc, #8]	; (d66cc <inet_htons+0xc>)
   d66c4:	681b      	ldr	r3, [r3, #0]
   d66c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d66c8:	9301      	str	r3, [sp, #4]
   d66ca:	bd08      	pop	{r3, pc}
   d66cc:	00030264 	.word	0x00030264

000d66d0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d66d0:	b508      	push	{r3, lr}
   d66d2:	4b02      	ldr	r3, [pc, #8]	; (d66dc <hal_usart_init+0xc>)
   d66d4:	681b      	ldr	r3, [r3, #0]
   d66d6:	681b      	ldr	r3, [r3, #0]
   d66d8:	9301      	str	r3, [sp, #4]
   d66da:	bd08      	pop	{r3, pc}
   d66dc:	0003023c 	.word	0x0003023c

000d66e0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d66e0:	b508      	push	{r3, lr}
   d66e2:	4b02      	ldr	r3, [pc, #8]	; (d66ec <hal_usart_write+0xc>)
   d66e4:	681b      	ldr	r3, [r3, #0]
   d66e6:	68db      	ldr	r3, [r3, #12]
   d66e8:	9301      	str	r3, [sp, #4]
   d66ea:	bd08      	pop	{r3, pc}
   d66ec:	0003023c 	.word	0x0003023c

000d66f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d66f0:	b508      	push	{r3, lr}
   d66f2:	4b02      	ldr	r3, [pc, #8]	; (d66fc <hal_usart_available+0xc>)
   d66f4:	681b      	ldr	r3, [r3, #0]
   d66f6:	691b      	ldr	r3, [r3, #16]
   d66f8:	9301      	str	r3, [sp, #4]
   d66fa:	bd08      	pop	{r3, pc}
   d66fc:	0003023c 	.word	0x0003023c

000d6700 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6700:	b508      	push	{r3, lr}
   d6702:	4b02      	ldr	r3, [pc, #8]	; (d670c <hal_usart_read+0xc>)
   d6704:	681b      	ldr	r3, [r3, #0]
   d6706:	695b      	ldr	r3, [r3, #20]
   d6708:	9301      	str	r3, [sp, #4]
   d670a:	bd08      	pop	{r3, pc}
   d670c:	0003023c 	.word	0x0003023c

000d6710 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6710:	b508      	push	{r3, lr}
   d6712:	4b02      	ldr	r3, [pc, #8]	; (d671c <hal_usart_peek+0xc>)
   d6714:	681b      	ldr	r3, [r3, #0]
   d6716:	699b      	ldr	r3, [r3, #24]
   d6718:	9301      	str	r3, [sp, #4]
   d671a:	bd08      	pop	{r3, pc}
   d671c:	0003023c 	.word	0x0003023c

000d6720 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6720:	b508      	push	{r3, lr}
   d6722:	4b02      	ldr	r3, [pc, #8]	; (d672c <hal_usart_flush+0xc>)
   d6724:	681b      	ldr	r3, [r3, #0]
   d6726:	69db      	ldr	r3, [r3, #28]
   d6728:	9301      	str	r3, [sp, #4]
   d672a:	bd08      	pop	{r3, pc}
   d672c:	0003023c 	.word	0x0003023c

000d6730 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6730:	b508      	push	{r3, lr}
   d6732:	4b02      	ldr	r3, [pc, #8]	; (d673c <hal_usart_is_enabled+0xc>)
   d6734:	681b      	ldr	r3, [r3, #0]
   d6736:	6a1b      	ldr	r3, [r3, #32]
   d6738:	9301      	str	r3, [sp, #4]
   d673a:	bd08      	pop	{r3, pc}
   d673c:	0003023c 	.word	0x0003023c

000d6740 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6740:	b508      	push	{r3, lr}
   d6742:	4b02      	ldr	r3, [pc, #8]	; (d674c <hal_usart_available_data_for_write+0xc>)
   d6744:	681b      	ldr	r3, [r3, #0]
   d6746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6748:	9301      	str	r3, [sp, #4]
   d674a:	bd08      	pop	{r3, pc}
   d674c:	0003023c 	.word	0x0003023c

000d6750 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6750:	b508      	push	{r3, lr}
   d6752:	4b02      	ldr	r3, [pc, #8]	; (d675c <hal_i2c_begin+0xc>)
   d6754:	681b      	ldr	r3, [r3, #0]
   d6756:	68db      	ldr	r3, [r3, #12]
   d6758:	9301      	str	r3, [sp, #4]
   d675a:	bd08      	pop	{r3, pc}
   d675c:	00030228 	.word	0x00030228

000d6760 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6760:	b508      	push	{r3, lr}
   d6762:	4b02      	ldr	r3, [pc, #8]	; (d676c <hal_i2c_begin_transmission+0xc>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	699b      	ldr	r3, [r3, #24]
   d6768:	9301      	str	r3, [sp, #4]
   d676a:	bd08      	pop	{r3, pc}
   d676c:	00030228 	.word	0x00030228

000d6770 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6770:	b508      	push	{r3, lr}
   d6772:	4b02      	ldr	r3, [pc, #8]	; (d677c <hal_i2c_end_transmission+0xc>)
   d6774:	681b      	ldr	r3, [r3, #0]
   d6776:	69db      	ldr	r3, [r3, #28]
   d6778:	9301      	str	r3, [sp, #4]
   d677a:	bd08      	pop	{r3, pc}
   d677c:	00030228 	.word	0x00030228

000d6780 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6780:	b508      	push	{r3, lr}
   d6782:	4b02      	ldr	r3, [pc, #8]	; (d678c <hal_i2c_write+0xc>)
   d6784:	681b      	ldr	r3, [r3, #0]
   d6786:	6a1b      	ldr	r3, [r3, #32]
   d6788:	9301      	str	r3, [sp, #4]
   d678a:	bd08      	pop	{r3, pc}
   d678c:	00030228 	.word	0x00030228

000d6790 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6790:	b508      	push	{r3, lr}
   d6792:	4b02      	ldr	r3, [pc, #8]	; (d679c <hal_i2c_available+0xc>)
   d6794:	681b      	ldr	r3, [r3, #0]
   d6796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6798:	9301      	str	r3, [sp, #4]
   d679a:	bd08      	pop	{r3, pc}
   d679c:	00030228 	.word	0x00030228

000d67a0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d67a0:	b508      	push	{r3, lr}
   d67a2:	4b02      	ldr	r3, [pc, #8]	; (d67ac <hal_i2c_read+0xc>)
   d67a4:	681b      	ldr	r3, [r3, #0]
   d67a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d67a8:	9301      	str	r3, [sp, #4]
   d67aa:	bd08      	pop	{r3, pc}
   d67ac:	00030228 	.word	0x00030228

000d67b0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d67b0:	b508      	push	{r3, lr}
   d67b2:	4b02      	ldr	r3, [pc, #8]	; (d67bc <hal_i2c_peek+0xc>)
   d67b4:	681b      	ldr	r3, [r3, #0]
   d67b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d67b8:	9301      	str	r3, [sp, #4]
   d67ba:	bd08      	pop	{r3, pc}
   d67bc:	00030228 	.word	0x00030228

000d67c0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d67c0:	b508      	push	{r3, lr}
   d67c2:	4b02      	ldr	r3, [pc, #8]	; (d67cc <hal_i2c_flush+0xc>)
   d67c4:	681b      	ldr	r3, [r3, #0]
   d67c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d67c8:	9301      	str	r3, [sp, #4]
   d67ca:	bd08      	pop	{r3, pc}
   d67cc:	00030228 	.word	0x00030228

000d67d0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d67d0:	b508      	push	{r3, lr}
   d67d2:	4b02      	ldr	r3, [pc, #8]	; (d67dc <hal_i2c_is_enabled+0xc>)
   d67d4:	681b      	ldr	r3, [r3, #0]
   d67d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d67d8:	9301      	str	r3, [sp, #4]
   d67da:	bd08      	pop	{r3, pc}
   d67dc:	00030228 	.word	0x00030228

000d67e0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d67e0:	b508      	push	{r3, lr}
   d67e2:	4b02      	ldr	r3, [pc, #8]	; (d67ec <hal_i2c_init+0xc>)
   d67e4:	681b      	ldr	r3, [r3, #0]
   d67e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d67e8:	9301      	str	r3, [sp, #4]
   d67ea:	bd08      	pop	{r3, pc}
   d67ec:	00030228 	.word	0x00030228

000d67f0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d67f0:	b508      	push	{r3, lr}
   d67f2:	4b02      	ldr	r3, [pc, #8]	; (d67fc <hal_i2c_request_ex+0xc>)
   d67f4:	681b      	ldr	r3, [r3, #0]
   d67f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d67f8:	9301      	str	r3, [sp, #4]
   d67fa:	bd08      	pop	{r3, pc}
   d67fc:	00030228 	.word	0x00030228

000d6800 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6800:	b508      	push	{r3, lr}
   d6802:	4b02      	ldr	r3, [pc, #8]	; (d680c <sock_setsockopt+0xc>)
   d6804:	681b      	ldr	r3, [r3, #0]
   d6806:	699b      	ldr	r3, [r3, #24]
   d6808:	9301      	str	r3, [sp, #4]
   d680a:	bd08      	pop	{r3, pc}
   d680c:	00030238 	.word	0x00030238

000d6810 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6810:	b508      	push	{r3, lr}
   d6812:	4b02      	ldr	r3, [pc, #8]	; (d681c <sock_close+0xc>)
   d6814:	681b      	ldr	r3, [r3, #0]
   d6816:	69db      	ldr	r3, [r3, #28]
   d6818:	9301      	str	r3, [sp, #4]
   d681a:	bd08      	pop	{r3, pc}
   d681c:	00030238 	.word	0x00030238

000d6820 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6820:	b508      	push	{r3, lr}
   d6822:	4b02      	ldr	r3, [pc, #8]	; (d682c <sock_connect+0xc>)
   d6824:	681b      	ldr	r3, [r3, #0]
   d6826:	6a1b      	ldr	r3, [r3, #32]
   d6828:	9301      	str	r3, [sp, #4]
   d682a:	bd08      	pop	{r3, pc}
   d682c:	00030238 	.word	0x00030238

000d6830 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6830:	b508      	push	{r3, lr}
   d6832:	4b02      	ldr	r3, [pc, #8]	; (d683c <sock_recv+0xc>)
   d6834:	681b      	ldr	r3, [r3, #0]
   d6836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6838:	9301      	str	r3, [sp, #4]
   d683a:	bd08      	pop	{r3, pc}
   d683c:	00030238 	.word	0x00030238

000d6840 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6840:	b508      	push	{r3, lr}
   d6842:	4b02      	ldr	r3, [pc, #8]	; (d684c <sock_send+0xc>)
   d6844:	681b      	ldr	r3, [r3, #0]
   d6846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6848:	9301      	str	r3, [sp, #4]
   d684a:	bd08      	pop	{r3, pc}
   d684c:	00030238 	.word	0x00030238

000d6850 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6850:	b508      	push	{r3, lr}
   d6852:	4b02      	ldr	r3, [pc, #8]	; (d685c <sock_socket+0xc>)
   d6854:	681b      	ldr	r3, [r3, #0]
   d6856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6858:	9301      	str	r3, [sp, #4]
   d685a:	bd08      	pop	{r3, pc}
   d685c:	00030238 	.word	0x00030238

000d6860 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d6860:	b508      	push	{r3, lr}
   d6862:	4b02      	ldr	r3, [pc, #8]	; (d686c <hal_spi_begin+0xc>)
   d6864:	681b      	ldr	r3, [r3, #0]
   d6866:	681b      	ldr	r3, [r3, #0]
   d6868:	9301      	str	r3, [sp, #4]
   d686a:	bd08      	pop	{r3, pc}
   d686c:	00030230 	.word	0x00030230

000d6870 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d6870:	b508      	push	{r3, lr}
   d6872:	4b02      	ldr	r3, [pc, #8]	; (d687c <hal_spi_set_bit_order+0xc>)
   d6874:	681b      	ldr	r3, [r3, #0]
   d6876:	689b      	ldr	r3, [r3, #8]
   d6878:	9301      	str	r3, [sp, #4]
   d687a:	bd08      	pop	{r3, pc}
   d687c:	00030230 	.word	0x00030230

000d6880 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d6880:	b508      	push	{r3, lr}
   d6882:	4b02      	ldr	r3, [pc, #8]	; (d688c <hal_spi_set_data_mode+0xc>)
   d6884:	681b      	ldr	r3, [r3, #0]
   d6886:	68db      	ldr	r3, [r3, #12]
   d6888:	9301      	str	r3, [sp, #4]
   d688a:	bd08      	pop	{r3, pc}
   d688c:	00030230 	.word	0x00030230

000d6890 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d6890:	b508      	push	{r3, lr}
   d6892:	4b02      	ldr	r3, [pc, #8]	; (d689c <hal_spi_set_clock_divider+0xc>)
   d6894:	681b      	ldr	r3, [r3, #0]
   d6896:	691b      	ldr	r3, [r3, #16]
   d6898:	9301      	str	r3, [sp, #4]
   d689a:	bd08      	pop	{r3, pc}
   d689c:	00030230 	.word	0x00030230

000d68a0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d68a0:	b508      	push	{r3, lr}
   d68a2:	4b02      	ldr	r3, [pc, #8]	; (d68ac <hal_spi_transfer+0xc>)
   d68a4:	681b      	ldr	r3, [r3, #0]
   d68a6:	695b      	ldr	r3, [r3, #20]
   d68a8:	9301      	str	r3, [sp, #4]
   d68aa:	bd08      	pop	{r3, pc}
   d68ac:	00030230 	.word	0x00030230

000d68b0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d68b0:	b508      	push	{r3, lr}
   d68b2:	4b02      	ldr	r3, [pc, #8]	; (d68bc <hal_spi_init+0xc>)
   d68b4:	681b      	ldr	r3, [r3, #0]
   d68b6:	69db      	ldr	r3, [r3, #28]
   d68b8:	9301      	str	r3, [sp, #4]
   d68ba:	bd08      	pop	{r3, pc}
   d68bc:	00030230 	.word	0x00030230

000d68c0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d68c0:	b508      	push	{r3, lr}
   d68c2:	4b02      	ldr	r3, [pc, #8]	; (d68cc <hal_spi_is_enabled+0xc>)
   d68c4:	681b      	ldr	r3, [r3, #0]
   d68c6:	6a1b      	ldr	r3, [r3, #32]
   d68c8:	9301      	str	r3, [sp, #4]
   d68ca:	bd08      	pop	{r3, pc}
   d68cc:	00030230 	.word	0x00030230

000d68d0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d68d0:	b508      	push	{r3, lr}
   d68d2:	4b02      	ldr	r3, [pc, #8]	; (d68dc <hal_spi_info+0xc>)
   d68d4:	681b      	ldr	r3, [r3, #0]
   d68d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d68d8:	9301      	str	r3, [sp, #4]
   d68da:	bd08      	pop	{r3, pc}
   d68dc:	00030230 	.word	0x00030230

000d68e0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d68e0:	b508      	push	{r3, lr}
   d68e2:	4b02      	ldr	r3, [pc, #8]	; (d68ec <hal_spi_set_settings+0xc>)
   d68e4:	681b      	ldr	r3, [r3, #0]
   d68e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d68e8:	9301      	str	r3, [sp, #4]
   d68ea:	bd08      	pop	{r3, pc}
   d68ec:	00030230 	.word	0x00030230

000d68f0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d68f0:	b508      	push	{r3, lr}
   d68f2:	4b02      	ldr	r3, [pc, #8]	; (d68fc <hal_spi_acquire+0xc>)
   d68f4:	681b      	ldr	r3, [r3, #0]
   d68f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d68f8:	9301      	str	r3, [sp, #4]
   d68fa:	bd08      	pop	{r3, pc}
   d68fc:	00030230 	.word	0x00030230

000d6900 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6900:	b508      	push	{r3, lr}
   d6902:	4b02      	ldr	r3, [pc, #8]	; (d690c <hal_spi_release+0xc>)
   d6904:	681b      	ldr	r3, [r3, #0]
   d6906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6908:	9301      	str	r3, [sp, #4]
   d690a:	bd08      	pop	{r3, pc}
   d690c:	00030230 	.word	0x00030230

000d6910 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6910:	b508      	push	{r3, lr}
   d6912:	4b02      	ldr	r3, [pc, #8]	; (d691c <HAL_USB_USART_Init+0xc>)
   d6914:	681b      	ldr	r3, [r3, #0]
   d6916:	681b      	ldr	r3, [r3, #0]
   d6918:	9301      	str	r3, [sp, #4]
   d691a:	bd08      	pop	{r3, pc}
   d691c:	0003024c 	.word	0x0003024c

000d6920 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6920:	b508      	push	{r3, lr}
   d6922:	4b02      	ldr	r3, [pc, #8]	; (d692c <HAL_USB_USART_Begin+0xc>)
   d6924:	681b      	ldr	r3, [r3, #0]
   d6926:	685b      	ldr	r3, [r3, #4]
   d6928:	9301      	str	r3, [sp, #4]
   d692a:	bd08      	pop	{r3, pc}
   d692c:	0003024c 	.word	0x0003024c

000d6930 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6930:	b508      	push	{r3, lr}
   d6932:	4b02      	ldr	r3, [pc, #8]	; (d693c <HAL_USB_USART_Available_Data+0xc>)
   d6934:	681b      	ldr	r3, [r3, #0]
   d6936:	691b      	ldr	r3, [r3, #16]
   d6938:	9301      	str	r3, [sp, #4]
   d693a:	bd08      	pop	{r3, pc}
   d693c:	0003024c 	.word	0x0003024c

000d6940 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6940:	b508      	push	{r3, lr}
   d6942:	4b02      	ldr	r3, [pc, #8]	; (d694c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6944:	681b      	ldr	r3, [r3, #0]
   d6946:	695b      	ldr	r3, [r3, #20]
   d6948:	9301      	str	r3, [sp, #4]
   d694a:	bd08      	pop	{r3, pc}
   d694c:	0003024c 	.word	0x0003024c

000d6950 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6950:	b508      	push	{r3, lr}
   d6952:	4b02      	ldr	r3, [pc, #8]	; (d695c <HAL_USB_USART_Receive_Data+0xc>)
   d6954:	681b      	ldr	r3, [r3, #0]
   d6956:	699b      	ldr	r3, [r3, #24]
   d6958:	9301      	str	r3, [sp, #4]
   d695a:	bd08      	pop	{r3, pc}
   d695c:	0003024c 	.word	0x0003024c

000d6960 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6960:	b508      	push	{r3, lr}
   d6962:	4b02      	ldr	r3, [pc, #8]	; (d696c <HAL_USB_USART_Send_Data+0xc>)
   d6964:	681b      	ldr	r3, [r3, #0]
   d6966:	69db      	ldr	r3, [r3, #28]
   d6968:	9301      	str	r3, [sp, #4]
   d696a:	bd08      	pop	{r3, pc}
   d696c:	0003024c 	.word	0x0003024c

000d6970 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6970:	b508      	push	{r3, lr}
   d6972:	4b02      	ldr	r3, [pc, #8]	; (d697c <HAL_USB_USART_Flush_Data+0xc>)
   d6974:	681b      	ldr	r3, [r3, #0]
   d6976:	6a1b      	ldr	r3, [r3, #32]
   d6978:	9301      	str	r3, [sp, #4]
   d697a:	bd08      	pop	{r3, pc}
   d697c:	0003024c 	.word	0x0003024c

000d6980 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6980:	b508      	push	{r3, lr}
   d6982:	4b02      	ldr	r3, [pc, #8]	; (d698c <panic_+0xc>)
   d6984:	681b      	ldr	r3, [r3, #0]
   d6986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6988:	9301      	str	r3, [sp, #4]
   d698a:	bd08      	pop	{r3, pc}
   d698c:	00030260 	.word	0x00030260

000d6990 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6990:	b508      	push	{r3, lr}
   d6992:	4b02      	ldr	r3, [pc, #8]	; (d699c <log_message+0xc>)
   d6994:	681b      	ldr	r3, [r3, #0]
   d6996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6998:	9301      	str	r3, [sp, #4]
   d699a:	bd08      	pop	{r3, pc}
   d699c:	00030260 	.word	0x00030260

000d69a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d69a0:	b508      	push	{r3, lr}
   d69a2:	4b02      	ldr	r3, [pc, #8]	; (d69ac <set_system_mode+0xc>)
   d69a4:	681b      	ldr	r3, [r3, #0]
   d69a6:	685b      	ldr	r3, [r3, #4]
   d69a8:	9301      	str	r3, [sp, #4]
   d69aa:	bd08      	pop	{r3, pc}
   d69ac:	00030220 	.word	0x00030220

000d69b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d69b0:	b508      	push	{r3, lr}
   d69b2:	4b02      	ldr	r3, [pc, #8]	; (d69bc <system_delay_ms+0xc>)
   d69b4:	681b      	ldr	r3, [r3, #0]
   d69b6:	695b      	ldr	r3, [r3, #20]
   d69b8:	9301      	str	r3, [sp, #4]
   d69ba:	bd08      	pop	{r3, pc}
   d69bc:	00030220 	.word	0x00030220

000d69c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d69c0:	b508      	push	{r3, lr}
   d69c2:	4b03      	ldr	r3, [pc, #12]	; (d69d0 <system_ctrl_set_app_request_handler+0x10>)
   d69c4:	681b      	ldr	r3, [r3, #0]
   d69c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d69ca:	9301      	str	r3, [sp, #4]
   d69cc:	bd08      	pop	{r3, pc}
   d69ce:	0000      	.short	0x0000
   d69d0:	00030220 	.word	0x00030220

000d69d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d69d4:	b508      	push	{r3, lr}
   d69d6:	4b03      	ldr	r3, [pc, #12]	; (d69e4 <system_ctrl_set_result+0x10>)
   d69d8:	681b      	ldr	r3, [r3, #0]
   d69da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d69de:	9301      	str	r3, [sp, #4]
   d69e0:	bd08      	pop	{r3, pc}
   d69e2:	0000      	.short	0x0000
   d69e4:	00030220 	.word	0x00030220

000d69e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d69e8:	b508      	push	{r3, lr}
   d69ea:	4b02      	ldr	r3, [pc, #8]	; (d69f4 <network_connect+0xc>)
   d69ec:	681b      	ldr	r3, [r3, #0]
   d69ee:	685b      	ldr	r3, [r3, #4]
   d69f0:	9301      	str	r3, [sp, #4]
   d69f2:	bd08      	pop	{r3, pc}
   d69f4:	00030240 	.word	0x00030240

000d69f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d69f8:	b508      	push	{r3, lr}
   d69fa:	4b02      	ldr	r3, [pc, #8]	; (d6a04 <network_connecting+0xc>)
   d69fc:	681b      	ldr	r3, [r3, #0]
   d69fe:	689b      	ldr	r3, [r3, #8]
   d6a00:	9301      	str	r3, [sp, #4]
   d6a02:	bd08      	pop	{r3, pc}
   d6a04:	00030240 	.word	0x00030240

000d6a08 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6a08:	b508      	push	{r3, lr}
   d6a0a:	4b02      	ldr	r3, [pc, #8]	; (d6a14 <network_disconnect+0xc>)
   d6a0c:	681b      	ldr	r3, [r3, #0]
   d6a0e:	68db      	ldr	r3, [r3, #12]
   d6a10:	9301      	str	r3, [sp, #4]
   d6a12:	bd08      	pop	{r3, pc}
   d6a14:	00030240 	.word	0x00030240

000d6a18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6a18:	b508      	push	{r3, lr}
   d6a1a:	4b02      	ldr	r3, [pc, #8]	; (d6a24 <network_ready+0xc>)
   d6a1c:	681b      	ldr	r3, [r3, #0]
   d6a1e:	691b      	ldr	r3, [r3, #16]
   d6a20:	9301      	str	r3, [sp, #4]
   d6a22:	bd08      	pop	{r3, pc}
   d6a24:	00030240 	.word	0x00030240

000d6a28 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6a28:	b508      	push	{r3, lr}
   d6a2a:	4b02      	ldr	r3, [pc, #8]	; (d6a34 <network_on+0xc>)
   d6a2c:	681b      	ldr	r3, [r3, #0]
   d6a2e:	695b      	ldr	r3, [r3, #20]
   d6a30:	9301      	str	r3, [sp, #4]
   d6a32:	bd08      	pop	{r3, pc}
   d6a34:	00030240 	.word	0x00030240

000d6a38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6a38:	b508      	push	{r3, lr}
   d6a3a:	4b02      	ldr	r3, [pc, #8]	; (d6a44 <network_off+0xc>)
   d6a3c:	681b      	ldr	r3, [r3, #0]
   d6a3e:	699b      	ldr	r3, [r3, #24]
   d6a40:	9301      	str	r3, [sp, #4]
   d6a42:	bd08      	pop	{r3, pc}
   d6a44:	00030240 	.word	0x00030240

000d6a48 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6a48:	b508      	push	{r3, lr}
   d6a4a:	4b02      	ldr	r3, [pc, #8]	; (d6a54 <network_listen+0xc>)
   d6a4c:	681b      	ldr	r3, [r3, #0]
   d6a4e:	69db      	ldr	r3, [r3, #28]
   d6a50:	9301      	str	r3, [sp, #4]
   d6a52:	bd08      	pop	{r3, pc}
   d6a54:	00030240 	.word	0x00030240

000d6a58 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6a58:	b508      	push	{r3, lr}
   d6a5a:	4b02      	ldr	r3, [pc, #8]	; (d6a64 <network_listening+0xc>)
   d6a5c:	681b      	ldr	r3, [r3, #0]
   d6a5e:	6a1b      	ldr	r3, [r3, #32]
   d6a60:	9301      	str	r3, [sp, #4]
   d6a62:	bd08      	pop	{r3, pc}
   d6a64:	00030240 	.word	0x00030240

000d6a68 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6a68:	b508      	push	{r3, lr}
   d6a6a:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <network_set_listen_timeout+0xc>)
   d6a6c:	681b      	ldr	r3, [r3, #0]
   d6a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a70:	9301      	str	r3, [sp, #4]
   d6a72:	bd08      	pop	{r3, pc}
   d6a74:	00030240 	.word	0x00030240

000d6a78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6a78:	b508      	push	{r3, lr}
   d6a7a:	4b02      	ldr	r3, [pc, #8]	; (d6a84 <network_get_listen_timeout+0xc>)
   d6a7c:	681b      	ldr	r3, [r3, #0]
   d6a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a80:	9301      	str	r3, [sp, #4]
   d6a82:	bd08      	pop	{r3, pc}
   d6a84:	00030240 	.word	0x00030240

000d6a88 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6a88:	b508      	push	{r3, lr}
   d6a8a:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <spark_cloud_flag_connected+0xc>)
   d6a8c:	681b      	ldr	r3, [r3, #0]
   d6a8e:	695b      	ldr	r3, [r3, #20]
   d6a90:	9301      	str	r3, [sp, #4]
   d6a92:	bd08      	pop	{r3, pc}
   d6a94:	00030244 	.word	0x00030244

000d6a98 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6a98:	b508      	push	{r3, lr}
   d6a9a:	4b02      	ldr	r3, [pc, #8]	; (d6aa4 <spark_sync_time+0xc>)
   d6a9c:	681b      	ldr	r3, [r3, #0]
   d6a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6aa0:	9301      	str	r3, [sp, #4]
   d6aa2:	bd08      	pop	{r3, pc}
   d6aa4:	00030244 	.word	0x00030244

000d6aa8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6aa8:	b508      	push	{r3, lr}
   d6aaa:	4b02      	ldr	r3, [pc, #8]	; (d6ab4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6aac:	681b      	ldr	r3, [r3, #0]
   d6aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6ab0:	9301      	str	r3, [sp, #4]
   d6ab2:	bd08      	pop	{r3, pc}
   d6ab4:	00030244 	.word	0x00030244

000d6ab8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6ab8:	b508      	push	{r3, lr}
   d6aba:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <malloc+0xc>)
   d6abc:	681b      	ldr	r3, [r3, #0]
   d6abe:	681b      	ldr	r3, [r3, #0]
   d6ac0:	9301      	str	r3, [sp, #4]
   d6ac2:	bd08      	pop	{r3, pc}
   d6ac4:	0003021c 	.word	0x0003021c

000d6ac8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6ac8:	b508      	push	{r3, lr}
   d6aca:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <free+0xc>)
   d6acc:	681b      	ldr	r3, [r3, #0]
   d6ace:	685b      	ldr	r3, [r3, #4]
   d6ad0:	9301      	str	r3, [sp, #4]
   d6ad2:	bd08      	pop	{r3, pc}
   d6ad4:	0003021c 	.word	0x0003021c

000d6ad8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6ad8:	b508      	push	{r3, lr}
   d6ada:	4b02      	ldr	r3, [pc, #8]	; (d6ae4 <realloc+0xc>)
   d6adc:	681b      	ldr	r3, [r3, #0]
   d6ade:	689b      	ldr	r3, [r3, #8]
   d6ae0:	9301      	str	r3, [sp, #4]
   d6ae2:	bd08      	pop	{r3, pc}
   d6ae4:	0003021c 	.word	0x0003021c

000d6ae8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6ae8:	b508      	push	{r3, lr}
   d6aea:	4b02      	ldr	r3, [pc, #8]	; (d6af4 <sprintf+0xc>)
   d6aec:	681b      	ldr	r3, [r3, #0]
   d6aee:	68db      	ldr	r3, [r3, #12]
   d6af0:	9301      	str	r3, [sp, #4]
   d6af2:	bd08      	pop	{r3, pc}
   d6af4:	0003021c 	.word	0x0003021c

000d6af8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6af8:	b508      	push	{r3, lr}
   d6afa:	4b02      	ldr	r3, [pc, #8]	; (d6b04 <vsnprintf+0xc>)
   d6afc:	681b      	ldr	r3, [r3, #0]
   d6afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b00:	9301      	str	r3, [sp, #4]
   d6b02:	bd08      	pop	{r3, pc}
   d6b04:	0003021c 	.word	0x0003021c

000d6b08 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6b08:	b508      	push	{r3, lr}
   d6b0a:	4b02      	ldr	r3, [pc, #8]	; (d6b14 <__errno+0xc>)
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6b10:	9301      	str	r3, [sp, #4]
   d6b12:	bd08      	pop	{r3, pc}
   d6b14:	0003021c 	.word	0x0003021c

000d6b18 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6b18:	b508      	push	{r3, lr}
   d6b1a:	4b02      	ldr	r3, [pc, #8]	; (d6b24 <newlib_impure_ptr_callback+0xc>)
   d6b1c:	681b      	ldr	r3, [r3, #0]
   d6b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	bd08      	pop	{r3, pc}
   d6b24:	0003021c 	.word	0x0003021c

000d6b28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6b28:	2200      	movs	r2, #0
   d6b2a:	6840      	ldr	r0, [r0, #4]
   d6b2c:	4611      	mov	r1, r2
   d6b2e:	f7ff bf93 	b.w	d6a58 <network_listening>

000d6b32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6b32:	2200      	movs	r2, #0
   d6b34:	6840      	ldr	r0, [r0, #4]
   d6b36:	4611      	mov	r1, r2
   d6b38:	f7ff bf9e 	b.w	d6a78 <network_get_listen_timeout>

000d6b3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6b3c:	6840      	ldr	r0, [r0, #4]
   d6b3e:	2200      	movs	r2, #0
   d6b40:	f7ff bf92 	b.w	d6a68 <network_set_listen_timeout>

000d6b44 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b44:	6840      	ldr	r0, [r0, #4]
   d6b46:	2200      	movs	r2, #0
   d6b48:	f081 0101 	eor.w	r1, r1, #1
   d6b4c:	f7ff bf7c 	b.w	d6a48 <network_listen>

000d6b50 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6b50:	2300      	movs	r3, #0
   d6b52:	6840      	ldr	r0, [r0, #4]
   d6b54:	461a      	mov	r2, r3
   d6b56:	4619      	mov	r1, r3
   d6b58:	f7ff bf6e 	b.w	d6a38 <network_off>

000d6b5c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6b5c:	2300      	movs	r3, #0
   d6b5e:	6840      	ldr	r0, [r0, #4]
   d6b60:	461a      	mov	r2, r3
   d6b62:	4619      	mov	r1, r3
   d6b64:	f7ff bf60 	b.w	d6a28 <network_on>

000d6b68 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6b68:	2200      	movs	r2, #0
   d6b6a:	6840      	ldr	r0, [r0, #4]
   d6b6c:	4611      	mov	r1, r2
   d6b6e:	f7ff bf53 	b.w	d6a18 <network_ready>

000d6b72 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6b72:	2200      	movs	r2, #0
   d6b74:	6840      	ldr	r0, [r0, #4]
   d6b76:	4611      	mov	r1, r2
   d6b78:	f7ff bf3e 	b.w	d69f8 <network_connecting>

000d6b7c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b7c:	6840      	ldr	r0, [r0, #4]
   d6b7e:	2200      	movs	r2, #0
   d6b80:	2102      	movs	r1, #2
   d6b82:	f7ff bf41 	b.w	d6a08 <network_disconnect>

000d6b86 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6b86:	2300      	movs	r3, #0
   d6b88:	6840      	ldr	r0, [r0, #4]
   d6b8a:	461a      	mov	r2, r3
   d6b8c:	f7ff bf2c 	b.w	d69e8 <network_connect>

000d6b90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6b90:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6b92:	2203      	movs	r2, #3
   d6b94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6b96:	4a02      	ldr	r2, [pc, #8]	; (d6ba0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6b98:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6b9a:	4770      	bx	lr
   d6b9c:	2003e648 	.word	0x2003e648
   d6ba0:	000db514 	.word	0x000db514

000d6ba4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6ba4:	2100      	movs	r1, #0
   d6ba6:	f7ff bea3 	b.w	d68f0 <hal_spi_acquire>

000d6baa <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6baa:	2100      	movs	r1, #0
   d6bac:	f7ff bea8 	b.w	d6900 <hal_spi_release>

000d6bb0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6bb0:	b510      	push	{r4, lr}
   d6bb2:	4604      	mov	r4, r0
   d6bb4:	4608      	mov	r0, r1
{
    _spi = spi;
   d6bb6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6bb8:	f7ff fe7a 	bl	d68b0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6bbc:	2300      	movs	r3, #0
   d6bbe:	6063      	str	r3, [r4, #4]
}
   d6bc0:	4620      	mov	r0, r4
   d6bc2:	bd10      	pop	{r4, pc}

000d6bc4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6bc4:	b510      	push	{r4, lr}
   d6bc6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6bc8:	7800      	ldrb	r0, [r0, #0]
   d6bca:	f7ff ffeb 	bl	d6ba4 <_ZN8SPIClass4lockEv.isra.0>
   d6bce:	b948      	cbnz	r0, d6be4 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6bd0:	7820      	ldrb	r0, [r4, #0]
   d6bd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6bd6:	f7ff fe43 	bl	d6860 <hal_spi_begin>
        unlock();
   d6bda:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6be0:	f7ff bfe3 	b.w	d6baa <_ZN8SPIClass6unlockEv.isra.0>
}
   d6be4:	bd10      	pop	{r4, pc}

000d6be6 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6be6:	b513      	push	{r0, r1, r4, lr}
   d6be8:	4604      	mov	r4, r0
    if (!lock())
   d6bea:	7800      	ldrb	r0, [r0, #0]
{
   d6bec:	9101      	str	r1, [sp, #4]
    if (!lock())
   d6bee:	f7ff ffd9 	bl	d6ba4 <_ZN8SPIClass4lockEv.isra.0>
   d6bf2:	9901      	ldr	r1, [sp, #4]
   d6bf4:	b940      	cbnz	r0, d6c08 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d6bf6:	7820      	ldrb	r0, [r4, #0]
   d6bf8:	f7ff fe3a 	bl	d6870 <hal_spi_set_bit_order>
        unlock();
   d6bfc:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6bfe:	b002      	add	sp, #8
   d6c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6c04:	f7ff bfd1 	b.w	d6baa <_ZN8SPIClass6unlockEv.isra.0>
}
   d6c08:	b002      	add	sp, #8
   d6c0a:	bd10      	pop	{r4, pc}

000d6c0c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d6c0c:	b513      	push	{r0, r1, r4, lr}
   d6c0e:	4604      	mov	r4, r0
    if (!lock())
   d6c10:	7800      	ldrb	r0, [r0, #0]
{
   d6c12:	9101      	str	r1, [sp, #4]
    if (!lock())
   d6c14:	f7ff ffc6 	bl	d6ba4 <_ZN8SPIClass4lockEv.isra.0>
   d6c18:	9901      	ldr	r1, [sp, #4]
   d6c1a:	b940      	cbnz	r0, d6c2e <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d6c1c:	7820      	ldrb	r0, [r4, #0]
   d6c1e:	f7ff fe2f 	bl	d6880 <hal_spi_set_data_mode>
        unlock();
   d6c22:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6c24:	b002      	add	sp, #8
   d6c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6c2a:	f7ff bfbe 	b.w	d6baa <_ZN8SPIClass6unlockEv.isra.0>
}
   d6c2e:	b002      	add	sp, #8
   d6c30:	bd10      	pop	{r4, pc}

000d6c32 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6c32:	7800      	ldrb	r0, [r0, #0]
   d6c34:	f7ff bfb9 	b.w	d6baa <_ZN8SPIClass6unlockEv.isra.0>

000d6c38 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6c38:	0840      	lsrs	r0, r0, #1
{
   d6c3a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6c3c:	6018      	str	r0, [r3, #0]
   d6c3e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6c40:	6818      	ldr	r0, [r3, #0]
   d6c42:	4288      	cmp	r0, r1
   d6c44:	b2e5      	uxtb	r5, r4
   d6c46:	d906      	bls.n	d6c56 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6c48:	3401      	adds	r4, #1
   d6c4a:	2c08      	cmp	r4, #8
   d6c4c:	d002      	beq.n	d6c54 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6c4e:	0840      	lsrs	r0, r0, #1
   d6c50:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6c52:	e7f5      	b.n	d6c40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6c54:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6c56:	4b02      	ldr	r3, [pc, #8]	; (d6c60 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6c58:	5d5b      	ldrb	r3, [r3, r5]
   d6c5a:	7013      	strb	r3, [r2, #0]
}
   d6c5c:	bd30      	pop	{r4, r5, pc}
   d6c5e:	bf00      	nop
   d6c60:	000db540 	.word	0x000db540

000d6c64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c68:	4606      	mov	r6, r0
   d6c6a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d6c6c:	7800      	ldrb	r0, [r0, #0]
{
   d6c6e:	460d      	mov	r5, r1
    CHECK(lock());
   d6c70:	f7ff ff98 	bl	d6ba4 <_ZN8SPIClass4lockEv.isra.0>
   d6c74:	2800      	cmp	r0, #0
   d6c76:	db1b      	blt.n	d6cb0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6c78:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6c7a:	2214      	movs	r2, #20
   d6c7c:	2100      	movs	r1, #0
   d6c7e:	a809      	add	r0, sp, #36	; 0x24
   d6c80:	f003 fdac 	bl	da7dc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6c84:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6c86:	2200      	movs	r2, #0
   d6c88:	a909      	add	r1, sp, #36	; 0x24
   d6c8a:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d6c8c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d6c90:	f7ff fe1e 	bl	d68d0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d6c94:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d6c98:	b113      	cbz	r3, d6ca0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d6c9a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d6c9e:	b154      	cbz	r4, d6cb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d6ca0:	2700      	movs	r7, #0
   d6ca2:	46b9      	mov	r9, r7
   d6ca4:	46b8      	mov	r8, r7
   d6ca6:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d6ca8:	792b      	ldrb	r3, [r5, #4]
   d6caa:	b15c      	cbz	r4, d6cc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d6cac:	b1c3      	cbz	r3, d6ce0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d6cae:	2000      	movs	r0, #0
}
   d6cb0:	b00f      	add	sp, #60	; 0x3c
   d6cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d6cb6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6cba:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6cbe:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d6cc2:	e7f1      	b.n	d6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d6cc4:	2b00      	cmp	r3, #0
   d6cc6:	d135      	bne.n	d6d34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d6cc8:	68ab      	ldr	r3, [r5, #8]
   d6cca:	4543      	cmp	r3, r8
   d6ccc:	d108      	bne.n	d6ce0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d6cce:	f88d 9020 	strb.w	r9, [sp, #32]
   d6cd2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6cd6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6cda:	89ab      	ldrh	r3, [r5, #12]
   d6cdc:	429a      	cmp	r2, r3
   d6cde:	d0e6      	beq.n	d6cae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d6ce0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6ce2:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d6ce4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6ce8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6cea:	ab04      	add	r3, sp, #16
   d6cec:	f10d 020f 	add.w	r2, sp, #15
   d6cf0:	f7ff ffa2 	bl	d6c38 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d6cf4:	7929      	ldrb	r1, [r5, #4]
   d6cf6:	b984      	cbnz	r4, d6d1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d6cf8:	b989      	cbnz	r1, d6d1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6cfa:	68ab      	ldr	r3, [r5, #8]
   d6cfc:	4543      	cmp	r3, r8
   d6cfe:	d30e      	bcc.n	d6d1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d6d00:	f88d 9020 	strb.w	r9, [sp, #32]
   d6d04:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6d08:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6d0c:	89ab      	ldrh	r3, [r5, #12]
   d6d0e:	429a      	cmp	r2, r3
   d6d10:	d105      	bne.n	d6d1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6d12:	9b04      	ldr	r3, [sp, #16]
   d6d14:	4543      	cmp	r3, r8
   d6d16:	d102      	bne.n	d6d1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6d18:	e7c9      	b.n	d6cae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d6d1a:	2900      	cmp	r1, #0
   d6d1c:	d1f9      	bne.n	d6d12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d6d1e:	2300      	movs	r3, #0
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	7b6b      	ldrb	r3, [r5, #13]
   d6d24:	9300      	str	r3, [sp, #0]
   d6d26:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6d2a:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6d2c:	7830      	ldrb	r0, [r6, #0]
   d6d2e:	f7ff fdd7 	bl	d68e0 <hal_spi_set_settings>
   d6d32:	e7bc      	b.n	d6cae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d6d34:	e9cd 4400 	strd	r4, r4, [sp]
   d6d38:	4623      	mov	r3, r4
   d6d3a:	4622      	mov	r2, r4
   d6d3c:	2101      	movs	r1, #1
   d6d3e:	e7f5      	b.n	d6d2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d6d40 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d44:	b088      	sub	sp, #32
    unsigned clock = 0;
   d6d46:	2300      	movs	r3, #0
{
   d6d48:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6d4a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d6d4c:	9302      	str	r3, [sp, #8]
{
   d6d4e:	460e      	mov	r6, r1
   d6d50:	4617      	mov	r7, r2
    if (!lock())
   d6d52:	f7ff ff27 	bl	d6ba4 <_ZN8SPIClass4lockEv.isra.0>
   d6d56:	4605      	mov	r5, r0
   d6d58:	bb00      	cbnz	r0, d6d9c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d6d5a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6d5e:	4601      	mov	r1, r0
   d6d60:	2214      	movs	r2, #20
   d6d62:	a803      	add	r0, sp, #12
   d6d64:	f003 fd3a 	bl	da7dc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6d68:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6d6a:	462a      	mov	r2, r5
   d6d6c:	a903      	add	r1, sp, #12
   d6d6e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d6d70:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d6d74:	f7ff fdac 	bl	d68d0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6d78:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d6d7a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6d7e:	ab02      	add	r3, sp, #8
   d6d80:	f10d 0207 	add.w	r2, sp, #7
   d6d84:	fb07 f106 	mul.w	r1, r7, r6
   d6d88:	f7ff ff56 	bl	d6c38 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d6d8c:	7820      	ldrb	r0, [r4, #0]
   d6d8e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6d92:	f7ff fd7d 	bl	d6890 <hal_spi_set_clock_divider>
        unlock();
   d6d96:	7820      	ldrb	r0, [r4, #0]
   d6d98:	f7ff ff07 	bl	d6baa <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d6d9c:	9802      	ldr	r0, [sp, #8]
   d6d9e:	b008      	add	sp, #32
   d6da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6da4 <_ZN8SPIClass15setClockDividerEh>:
{
   d6da4:	b538      	push	{r3, r4, r5, lr}
   d6da6:	4604      	mov	r4, r0
    if (!lock())
   d6da8:	7800      	ldrb	r0, [r0, #0]
{
   d6daa:	460d      	mov	r5, r1
    if (!lock())
   d6dac:	f7ff fefa 	bl	d6ba4 <_ZN8SPIClass4lockEv.isra.0>
   d6db0:	4603      	mov	r3, r0
   d6db2:	b9d0      	cbnz	r0, d6dea <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d6db4:	6861      	ldr	r1, [r4, #4]
   d6db6:	b199      	cbz	r1, d6de0 <_ZN8SPIClass15setClockDividerEh+0x3c>
   d6db8:	4a0c      	ldr	r2, [pc, #48]	; (d6dec <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d6dba:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6dbe:	4285      	cmp	r5, r0
   d6dc0:	d002      	beq.n	d6dc8 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d6dc2:	3301      	adds	r3, #1
   d6dc4:	2b08      	cmp	r3, #8
   d6dc6:	d1f8      	bne.n	d6dba <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d6dc8:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d6dca:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d6dcc:	2201      	movs	r2, #1
   d6dce:	40d9      	lsrs	r1, r3
   d6dd0:	4620      	mov	r0, r4
   d6dd2:	f7ff ffb5 	bl	d6d40 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d6dd6:	7820      	ldrb	r0, [r4, #0]
}
   d6dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d6ddc:	f7ff bee5 	b.w	d6baa <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d6de0:	7820      	ldrb	r0, [r4, #0]
   d6de2:	4629      	mov	r1, r5
   d6de4:	f7ff fd54 	bl	d6890 <hal_spi_set_clock_divider>
   d6de8:	e7f5      	b.n	d6dd6 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d6dea:	bd38      	pop	{r3, r4, r5, pc}
   d6dec:	000db540 	.word	0x000db540

000d6df0 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d6df0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6df2:	7800      	ldrb	r0, [r0, #0]
   d6df4:	f7ff fd54 	bl	d68a0 <hal_spi_transfer>
}
   d6df8:	b2c0      	uxtb	r0, r0
   d6dfa:	bd08      	pop	{r3, pc}

000d6dfc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6dfc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6dfe:	4b09      	ldr	r3, [pc, #36]	; (d6e24 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6e00:	4c09      	ldr	r4, [pc, #36]	; (d6e28 <_GLOBAL__sub_I_System+0x2c>)
   d6e02:	2202      	movs	r2, #2
   d6e04:	2000      	movs	r0, #0
   d6e06:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6e08:	4b08      	ldr	r3, [pc, #32]	; (d6e2c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6e0a:	6020      	str	r0, [r4, #0]
   d6e0c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6e0e:	71a0      	strb	r0, [r4, #6]
   d6e10:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6e12:	f7ff fdc5 	bl	d69a0 <set_system_mode>
SystemClass System;
   d6e16:	4620      	mov	r0, r4
   d6e18:	4a05      	ldr	r2, [pc, #20]	; (d6e30 <_GLOBAL__sub_I_System+0x34>)
   d6e1a:	4906      	ldr	r1, [pc, #24]	; (d6e34 <_GLOBAL__sub_I_System+0x38>)
   d6e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6e20:	f001 b9da 	b.w	d81d8 <__aeabi_atexit>
   d6e24:	2003e65c 	.word	0x2003e65c
   d6e28:	2003e650 	.word	0x2003e650
   d6e2c:	ffff0000 	.word	0xffff0000
   d6e30:	2003e3d8 	.word	0x2003e3d8
   d6e34:	000d4101 	.word	0x000d4101

000d6e38 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d6e3c:	1e93      	subs	r3, r2, #2
{
   d6e3e:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d6e40:	2b22      	cmp	r3, #34	; 0x22
   d6e42:	f04f 0300 	mov.w	r3, #0
{
   d6e46:	460d      	mov	r5, r1
   d6e48:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6e4a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d6e4e:	d927      	bls.n	d6ea0 <ltoa+0x68>

      if (10 == base && N < 0L)
   d6e50:	2800      	cmp	r0, #0
   d6e52:	da2a      	bge.n	d6eaa <ltoa+0x72>
      {
            *head++ = '-';
   d6e54:	462e      	mov	r6, r5
   d6e56:	232d      	movs	r3, #45	; 0x2d
   d6e58:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d6e5c:	4240      	negs	r0, r0
   d6e5e:	240a      	movs	r4, #10
      *tail-- = '\0';
   d6e60:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d6e64:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d6e68:	4622      	mov	r2, r4
   d6e6a:	4601      	mov	r1, r0
   d6e6c:	a801      	add	r0, sp, #4
   d6e6e:	f003 fc79 	bl	da764 <ldiv>
   d6e72:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d6e74:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d6e76:	2b09      	cmp	r3, #9
   d6e78:	bfcc      	ite	gt
   d6e7a:	2237      	movgt	r2, #55	; 0x37
   d6e7c:	2230      	movle	r2, #48	; 0x30
   d6e7e:	fa52 f383 	uxtab	r3, r2, r3
   d6e82:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d6e86:	f108 0801 	add.w	r8, r8, #1
   d6e8a:	2800      	cmp	r0, #0
   d6e8c:	d1ec      	bne.n	d6e68 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d6e8e:	4642      	mov	r2, r8
   d6e90:	1c79      	adds	r1, r7, #1
   d6e92:	4630      	mov	r0, r6
   d6e94:	f003 fc7a 	bl	da78c <memcpy>
      return str;
}
   d6e98:	4628      	mov	r0, r5
   d6e9a:	b00c      	add	sp, #48	; 0x30
   d6e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d6ea0:	2a0a      	cmp	r2, #10
   d6ea2:	d0d5      	beq.n	d6e50 <ltoa+0x18>
      if (uarg)
   d6ea4:	b118      	cbz	r0, d6eae <ltoa+0x76>
   d6ea6:	462e      	mov	r6, r5
   d6ea8:	e7da      	b.n	d6e60 <ltoa+0x28>
   d6eaa:	240a      	movs	r4, #10
   d6eac:	e7fa      	b.n	d6ea4 <ltoa+0x6c>
      else  *tail-- = '0';
   d6eae:	2330      	movs	r3, #48	; 0x30
   d6eb0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6eb4:	462e      	mov	r6, r5
   d6eb6:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d6eba:	f04f 0802 	mov.w	r8, #2
   d6ebe:	e7e6      	b.n	d6e8e <ltoa+0x56>

000d6ec0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6ec0:	b510      	push	{r4, lr}
   d6ec2:	4604      	mov	r4, r0
{
	free(buffer);
   d6ec4:	6800      	ldr	r0, [r0, #0]
   d6ec6:	f7ff fdff 	bl	d6ac8 <free>
}
   d6eca:	4620      	mov	r0, r4
   d6ecc:	bd10      	pop	{r4, pc}

000d6ece <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6ece:	b510      	push	{r4, lr}
   d6ed0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6ed2:	6800      	ldr	r0, [r0, #0]
   d6ed4:	b108      	cbz	r0, d6eda <_ZN6String10invalidateEv+0xc>
   d6ed6:	f7ff fdf7 	bl	d6ac8 <free>
	buffer = NULL;
   d6eda:	2300      	movs	r3, #0
	capacity = len = 0;
   d6edc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6ee0:	6023      	str	r3, [r4, #0]
}
   d6ee2:	bd10      	pop	{r4, pc}

000d6ee4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6ee4:	b538      	push	{r3, r4, r5, lr}
   d6ee6:	4604      	mov	r4, r0
   d6ee8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6eea:	6800      	ldr	r0, [r0, #0]
   d6eec:	3101      	adds	r1, #1
   d6eee:	f7ff fdf3 	bl	d6ad8 <realloc>
	if (newbuffer) {
   d6ef2:	b110      	cbz	r0, d6efa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6ef4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6ef8:	2001      	movs	r0, #1
	}
	return 0;
}
   d6efa:	bd38      	pop	{r3, r4, r5, pc}

000d6efc <_ZN6String7reserveEj>:
{
   d6efc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6efe:	6803      	ldr	r3, [r0, #0]
{
   d6f00:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6f02:	b123      	cbz	r3, d6f0e <_ZN6String7reserveEj+0x12>
   d6f04:	6843      	ldr	r3, [r0, #4]
   d6f06:	428b      	cmp	r3, r1
   d6f08:	d301      	bcc.n	d6f0e <_ZN6String7reserveEj+0x12>
   d6f0a:	2001      	movs	r0, #1
}
   d6f0c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6f0e:	4620      	mov	r0, r4
   d6f10:	f7ff ffe8 	bl	d6ee4 <_ZN6String12changeBufferEj>
   d6f14:	2800      	cmp	r0, #0
   d6f16:	d0f9      	beq.n	d6f0c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6f18:	68a3      	ldr	r3, [r4, #8]
   d6f1a:	2b00      	cmp	r3, #0
   d6f1c:	d1f5      	bne.n	d6f0a <_ZN6String7reserveEj+0xe>
   d6f1e:	6822      	ldr	r2, [r4, #0]
   d6f20:	7013      	strb	r3, [r2, #0]
   d6f22:	e7f2      	b.n	d6f0a <_ZN6String7reserveEj+0xe>

000d6f24 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6f26:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6f28:	4611      	mov	r1, r2
   d6f2a:	9201      	str	r2, [sp, #4]
{
   d6f2c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6f2e:	f7ff ffe5 	bl	d6efc <_ZN6String7reserveEj>
   d6f32:	9a01      	ldr	r2, [sp, #4]
   d6f34:	b928      	cbnz	r0, d6f42 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6f36:	4620      	mov	r0, r4
   d6f38:	f7ff ffc9 	bl	d6ece <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6f3c:	4620      	mov	r0, r4
   d6f3e:	b003      	add	sp, #12
   d6f40:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6f42:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6f44:	4629      	mov	r1, r5
   d6f46:	6820      	ldr	r0, [r4, #0]
   d6f48:	f003 fc20 	bl	da78c <memcpy>
	buffer[len] = 0;
   d6f4c:	6822      	ldr	r2, [r4, #0]
   d6f4e:	68a3      	ldr	r3, [r4, #8]
   d6f50:	2100      	movs	r1, #0
   d6f52:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6f54:	e7f2      	b.n	d6f3c <_ZN6String4copyEPKcj+0x18>

000d6f56 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6f56:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6f58:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6f5a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6f5e:	4604      	mov	r4, r0
	len = 0;
   d6f60:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f62:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6f64:	b141      	cbz	r1, d6f78 <_ZN6StringC1EPKc+0x22>
   d6f66:	4608      	mov	r0, r1
   d6f68:	9101      	str	r1, [sp, #4]
   d6f6a:	f003 fc75 	bl	da858 <strlen>
   d6f6e:	9901      	ldr	r1, [sp, #4]
   d6f70:	4602      	mov	r2, r0
   d6f72:	4620      	mov	r0, r4
   d6f74:	f7ff ffd6 	bl	d6f24 <_ZN6String4copyEPKcj>
}
   d6f78:	4620      	mov	r0, r4
   d6f7a:	b002      	add	sp, #8
   d6f7c:	bd10      	pop	{r4, pc}

000d6f7e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6f7e:	b510      	push	{r4, lr}
   d6f80:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6f82:	6800      	ldr	r0, [r0, #0]
   d6f84:	b108      	cbz	r0, d6f8a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6f86:	f7ff fb83 	bl	d6690 <os_mutex_recursive_destroy>
    }
   d6f8a:	4620      	mov	r0, r4
   d6f8c:	bd10      	pop	{r4, pc}
	...

000d6f90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6f90:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6f92:	4c06      	ldr	r4, [pc, #24]	; (d6fac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6f94:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6f96:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6f98:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6f9a:	f7ff fb71 	bl	d6680 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6f9e:	4620      	mov	r0, r4
   d6fa0:	4a03      	ldr	r2, [pc, #12]	; (d6fb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6fa2:	4904      	ldr	r1, [pc, #16]	; (d6fb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6fa8:	f001 b916 	b.w	d81d8 <__aeabi_atexit>
   d6fac:	2003e660 	.word	0x2003e660
   d6fb0:	2003e3d8 	.word	0x2003e3d8
   d6fb4:	000d6f7f 	.word	0x000d6f7f

000d6fb8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fba:	4606      	mov	r6, r0
   d6fbc:	460d      	mov	r5, r1
  size_t n = 0;
   d6fbe:	188f      	adds	r7, r1, r2
   d6fc0:	2400      	movs	r4, #0
  while (size--) {
   d6fc2:	42bd      	cmp	r5, r7
   d6fc4:	d00c      	beq.n	d6fe0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6fc6:	6833      	ldr	r3, [r6, #0]
   d6fc8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6fcc:	689b      	ldr	r3, [r3, #8]
   d6fce:	4630      	mov	r0, r6
   d6fd0:	4798      	blx	r3
     if (chunk>=0)
   d6fd2:	1e03      	subs	r3, r0, #0
   d6fd4:	db01      	blt.n	d6fda <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6fd6:	441c      	add	r4, r3
  while (size--) {
   d6fd8:	e7f3      	b.n	d6fc2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6fda:	2c00      	cmp	r4, #0
   d6fdc:	bf08      	it	eq
   d6fde:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6fe0:	4620      	mov	r0, r4
   d6fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6fe4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6fe4:	b513      	push	{r0, r1, r4, lr}
   d6fe6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6fe8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6fea:	b159      	cbz	r1, d7004 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6fec:	9101      	str	r1, [sp, #4]
   d6fee:	f003 fc33 	bl	da858 <strlen>
   d6ff2:	6823      	ldr	r3, [r4, #0]
   d6ff4:	9901      	ldr	r1, [sp, #4]
   d6ff6:	68db      	ldr	r3, [r3, #12]
   d6ff8:	4602      	mov	r2, r0
   d6ffa:	4620      	mov	r0, r4
    }
   d6ffc:	b002      	add	sp, #8
   d6ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7002:	4718      	bx	r3
    }
   d7004:	b002      	add	sp, #8
   d7006:	bd10      	pop	{r4, pc}

000d7008 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7008:	b508      	push	{r3, lr}
  return write(str);
   d700a:	f7ff ffeb 	bl	d6fe4 <_ZN5Print5writeEPKc>
}
   d700e:	bd08      	pop	{r3, pc}

000d7010 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7010:	6803      	ldr	r3, [r0, #0]
   d7012:	689b      	ldr	r3, [r3, #8]
   d7014:	4718      	bx	r3

000d7016 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7016:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7018:	210d      	movs	r1, #13
{
   d701a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d701c:	f7ff fff8 	bl	d7010 <_ZN5Print5printEc>
  n += print('\n');
   d7020:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7022:	4604      	mov	r4, r0
  n += print('\n');
   d7024:	4628      	mov	r0, r5
   d7026:	f7ff fff3 	bl	d7010 <_ZN5Print5printEc>
  return n;
}
   d702a:	4420      	add	r0, r4
   d702c:	bd38      	pop	{r3, r4, r5, pc}

000d702e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d702e:	b538      	push	{r3, r4, r5, lr}
   d7030:	4605      	mov	r5, r0
  return write(str);
   d7032:	f7ff ffd7 	bl	d6fe4 <_ZN5Print5writeEPKc>
   d7036:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7038:	4628      	mov	r0, r5
   d703a:	f7ff ffec 	bl	d7016 <_ZN5Print7printlnEv>
  return n;
}
   d703e:	4420      	add	r0, r4
   d7040:	bd38      	pop	{r3, r4, r5, pc}

000d7042 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7042:	b530      	push	{r4, r5, lr}
   d7044:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7046:	2300      	movs	r3, #0
   d7048:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d704c:	2a01      	cmp	r2, #1
   d704e:	bf98      	it	ls
   d7050:	220a      	movls	r2, #10
   d7052:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7054:	460d      	mov	r5, r1
   d7056:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d705a:	fb01 5312 	mls	r3, r1, r2, r5
   d705e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7062:	2b09      	cmp	r3, #9
   d7064:	bf94      	ite	ls
   d7066:	3330      	addls	r3, #48	; 0x30
   d7068:	3337      	addhi	r3, #55	; 0x37
   d706a:	b2db      	uxtb	r3, r3
  } while(n);
   d706c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d706e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7072:	d9ef      	bls.n	d7054 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7074:	4621      	mov	r1, r4
   d7076:	f7ff ffb5 	bl	d6fe4 <_ZN5Print5writeEPKc>
}
   d707a:	b00b      	add	sp, #44	; 0x2c
   d707c:	bd30      	pop	{r4, r5, pc}
	...

000d7080 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7084:	ec55 4b10 	vmov	r4, r5, d0
   d7088:	4606      	mov	r6, r0
   d708a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d708c:	ee10 2a10 	vmov	r2, s0
   d7090:	ee10 0a10 	vmov	r0, s0
   d7094:	462b      	mov	r3, r5
   d7096:	4629      	mov	r1, r5
   d7098:	f002 ffae 	bl	d9ff8 <__aeabi_dcmpun>
   d709c:	b140      	cbz	r0, d70b0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d709e:	4953      	ldr	r1, [pc, #332]	; (d71ec <_ZN5Print10printFloatEdh+0x16c>)
   d70a0:	4630      	mov	r0, r6
   d70a2:	f7ff ff9f 	bl	d6fe4 <_ZN5Print5writeEPKc>
   d70a6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d70a8:	4650      	mov	r0, sl
   d70aa:	b003      	add	sp, #12
   d70ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d70b0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d70b4:	4b4e      	ldr	r3, [pc, #312]	; (d71f0 <_ZN5Print10printFloatEdh+0x170>)
   d70b6:	f04f 32ff 	mov.w	r2, #4294967295
   d70ba:	4620      	mov	r0, r4
   d70bc:	4649      	mov	r1, r9
   d70be:	f002 ff9b 	bl	d9ff8 <__aeabi_dcmpun>
   d70c2:	b948      	cbnz	r0, d70d8 <_ZN5Print10printFloatEdh+0x58>
   d70c4:	4b4a      	ldr	r3, [pc, #296]	; (d71f0 <_ZN5Print10printFloatEdh+0x170>)
   d70c6:	f04f 32ff 	mov.w	r2, #4294967295
   d70ca:	4620      	mov	r0, r4
   d70cc:	4649      	mov	r1, r9
   d70ce:	f002 ff75 	bl	d9fbc <__aeabi_dcmple>
   d70d2:	b908      	cbnz	r0, d70d8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d70d4:	4947      	ldr	r1, [pc, #284]	; (d71f4 <_ZN5Print10printFloatEdh+0x174>)
   d70d6:	e7e3      	b.n	d70a0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d70d8:	4b47      	ldr	r3, [pc, #284]	; (d71f8 <_ZN5Print10printFloatEdh+0x178>)
   d70da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d70de:	4620      	mov	r0, r4
   d70e0:	4629      	mov	r1, r5
   d70e2:	f002 ff7f 	bl	d9fe4 <__aeabi_dcmpgt>
   d70e6:	b108      	cbz	r0, d70ec <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d70e8:	4944      	ldr	r1, [pc, #272]	; (d71fc <_ZN5Print10printFloatEdh+0x17c>)
   d70ea:	e7d9      	b.n	d70a0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d70ec:	4b44      	ldr	r3, [pc, #272]	; (d7200 <_ZN5Print10printFloatEdh+0x180>)
   d70ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d70f2:	4620      	mov	r0, r4
   d70f4:	4629      	mov	r1, r5
   d70f6:	f002 ff57 	bl	d9fa8 <__aeabi_dcmplt>
   d70fa:	2800      	cmp	r0, #0
   d70fc:	d1f4      	bne.n	d70e8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d70fe:	2200      	movs	r2, #0
   d7100:	2300      	movs	r3, #0
   d7102:	4620      	mov	r0, r4
   d7104:	4629      	mov	r1, r5
   d7106:	f002 ff4f 	bl	d9fa8 <__aeabi_dcmplt>
   d710a:	b1d0      	cbz	r0, d7142 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d710c:	212d      	movs	r1, #45	; 0x2d
   d710e:	4630      	mov	r0, r6
   d7110:	f7ff ff7e 	bl	d7010 <_ZN5Print5printEc>
     number = -number;
   d7114:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d7118:	4682      	mov	sl, r0
     number = -number;
   d711a:	461d      	mov	r5, r3
  double rounding = 0.5;
   d711c:	4939      	ldr	r1, [pc, #228]	; (d7204 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d711e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d720c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d7122:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d7126:	2000      	movs	r0, #0
    rounding /= 10.0;
   d7128:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d712c:	fa5f f38b 	uxtb.w	r3, fp
   d7130:	429f      	cmp	r7, r3
   d7132:	d908      	bls.n	d7146 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d7134:	4642      	mov	r2, r8
   d7136:	464b      	mov	r3, r9
   d7138:	f002 fdee 	bl	d9d18 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d713c:	f10b 0b01 	add.w	fp, fp, #1
   d7140:	e7f4      	b.n	d712c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d7142:	4682      	mov	sl, r0
   d7144:	e7ea      	b.n	d711c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d7146:	4622      	mov	r2, r4
   d7148:	462b      	mov	r3, r5
   d714a:	f002 fb05 	bl	d9758 <__adddf3>
   d714e:	460d      	mov	r5, r1
   d7150:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d7152:	f002 ff8f 	bl	da074 <__aeabi_d2uiz>
   d7156:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d7158:	f002 fc3a 	bl	d99d0 <__aeabi_ui2d>
   d715c:	4602      	mov	r2, r0
   d715e:	460b      	mov	r3, r1
   d7160:	4620      	mov	r0, r4
   d7162:	4629      	mov	r1, r5
   d7164:	f002 faf6 	bl	d9754 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7168:	220a      	movs	r2, #10
   d716a:	4604      	mov	r4, r0
   d716c:	460d      	mov	r5, r1
   d716e:	4630      	mov	r0, r6
   d7170:	4641      	mov	r1, r8
   d7172:	f7ff ff66 	bl	d7042 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d7176:	4482      	add	sl, r0
  if (digits > 0) {
   d7178:	b127      	cbz	r7, d7184 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d717a:	4923      	ldr	r1, [pc, #140]	; (d7208 <_ZN5Print10printFloatEdh+0x188>)
   d717c:	4630      	mov	r0, r6
   d717e:	f7ff ff31 	bl	d6fe4 <_ZN5Print5writeEPKc>
    n += print(".");
   d7182:	4482      	add	sl, r0
    remainder *= 10.0;
   d7184:	f8df 9084 	ldr.w	r9, [pc, #132]	; d720c <_ZN5Print10printFloatEdh+0x18c>
   d7188:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d718c:	3f01      	subs	r7, #1
   d718e:	b2ff      	uxtb	r7, r7
   d7190:	2fff      	cmp	r7, #255	; 0xff
   d7192:	d089      	beq.n	d70a8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d7194:	4642      	mov	r2, r8
   d7196:	464b      	mov	r3, r9
   d7198:	4620      	mov	r0, r4
   d719a:	4629      	mov	r1, r5
   d719c:	f002 fc92 	bl	d9ac4 <__aeabi_dmul>
   d71a0:	4604      	mov	r4, r0
   d71a2:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d71a4:	f002 ff3e 	bl	da024 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d71a8:	f1b0 0b00 	subs.w	fp, r0, #0
   d71ac:	da1a      	bge.n	d71e4 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d71ae:	212d      	movs	r1, #45	; 0x2d
   d71b0:	4630      	mov	r0, r6
   d71b2:	f7ff ff2d 	bl	d7010 <_ZN5Print5printEc>
            val = -n;
   d71b6:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d71ba:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d71bc:	220a      	movs	r2, #10
   d71be:	4630      	mov	r0, r6
   d71c0:	9301      	str	r3, [sp, #4]
   d71c2:	f7ff ff3e 	bl	d7042 <_ZN5Print11printNumberEmh>
   d71c6:	9b01      	ldr	r3, [sp, #4]
   d71c8:	4418      	add	r0, r3
    n += print(toPrint);
   d71ca:	4482      	add	sl, r0
    remainder -= toPrint;
   d71cc:	4658      	mov	r0, fp
   d71ce:	f002 fc0f 	bl	d99f0 <__aeabi_i2d>
   d71d2:	4602      	mov	r2, r0
   d71d4:	460b      	mov	r3, r1
   d71d6:	4620      	mov	r0, r4
   d71d8:	4629      	mov	r1, r5
   d71da:	f002 fabb 	bl	d9754 <__aeabi_dsub>
   d71de:	4604      	mov	r4, r0
   d71e0:	460d      	mov	r5, r1
  while (digits-- > 0)
   d71e2:	e7d3      	b.n	d718c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d71e4:	4659      	mov	r1, fp
        size_t t = 0;
   d71e6:	2300      	movs	r3, #0
   d71e8:	e7e8      	b.n	d71bc <_ZN5Print10printFloatEdh+0x13c>
   d71ea:	bf00      	nop
   d71ec:	000db550 	.word	0x000db550
   d71f0:	7fefffff 	.word	0x7fefffff
   d71f4:	000db554 	.word	0x000db554
   d71f8:	41efffff 	.word	0x41efffff
   d71fc:	000db558 	.word	0x000db558
   d7200:	c1efffff 	.word	0xc1efffff
   d7204:	3fe00000 	.word	0x3fe00000
   d7208:	000daada 	.word	0x000daada
   d720c:	40240000 	.word	0x40240000

000d7210 <_ZN5Print5printEfi>:
{
   d7210:	b538      	push	{r3, r4, r5, lr}
   d7212:	4604      	mov	r4, r0
   d7214:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d7218:	b2cd      	uxtb	r5, r1
   d721a:	f002 fbfb 	bl	d9a14 <__aeabi_f2d>
   d721e:	ec41 0b10 	vmov	d0, r0, r1
   d7222:	4629      	mov	r1, r5
   d7224:	4620      	mov	r0, r4
}
   d7226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d722a:	f7ff bf29 	b.w	d7080 <_ZN5Print10printFloatEdh>

000d722e <_ZN5Print7printlnEdi>:
{
   d722e:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d7230:	b2c9      	uxtb	r1, r1
{
   d7232:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d7234:	f7ff ff24 	bl	d7080 <_ZN5Print10printFloatEdh>
   d7238:	4604      	mov	r4, r0
  n += println();
   d723a:	4628      	mov	r0, r5
   d723c:	f7ff feeb 	bl	d7016 <_ZN5Print7printlnEv>
}
   d7240:	4420      	add	r0, r4
   d7242:	bd38      	pop	{r3, r4, r5, pc}

000d7244 <_ZN5Print7printlnEfi>:
{
   d7244:	b538      	push	{r3, r4, r5, lr}
   d7246:	4604      	mov	r4, r0
   d7248:	ee10 0a10 	vmov	r0, s0
   d724c:	460d      	mov	r5, r1
    return println((double)num, digits);
   d724e:	f002 fbe1 	bl	d9a14 <__aeabi_f2d>
   d7252:	ec41 0b10 	vmov	d0, r0, r1
   d7256:	4629      	mov	r1, r5
   d7258:	4620      	mov	r0, r4
}
   d725a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d725e:	f7ff bfe6 	b.w	d722e <_ZN5Print7printlnEdi>

000d7262 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7266:	b086      	sub	sp, #24
   d7268:	af00      	add	r7, sp, #0
   d726a:	4605      	mov	r5, r0
   d726c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d726e:	1d38      	adds	r0, r7, #4
   d7270:	2114      	movs	r1, #20
{
   d7272:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7274:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7276:	f7ff fc3f 	bl	d6af8 <vsnprintf>

    if (n<bufsize)
   d727a:	2813      	cmp	r0, #19
   d727c:	d80e      	bhi.n	d729c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d727e:	1d39      	adds	r1, r7, #4
   d7280:	4628      	mov	r0, r5
   d7282:	f7ff feaf 	bl	d6fe4 <_ZN5Print5writeEPKc>
   d7286:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7288:	b11e      	cbz	r6, d7292 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d728a:	4628      	mov	r0, r5
   d728c:	f7ff fec3 	bl	d7016 <_ZN5Print7printlnEv>
   d7290:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7292:	4620      	mov	r0, r4
   d7294:	3718      	adds	r7, #24
   d7296:	46bd      	mov	sp, r7
   d7298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d729c:	f100 0308 	add.w	r3, r0, #8
   d72a0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d72a4:	46e8      	mov	r8, sp
        char bigger[n+1];
   d72a6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d72aa:	4622      	mov	r2, r4
   d72ac:	1c41      	adds	r1, r0, #1
   d72ae:	683b      	ldr	r3, [r7, #0]
   d72b0:	4668      	mov	r0, sp
   d72b2:	f7ff fc21 	bl	d6af8 <vsnprintf>
  return write(str);
   d72b6:	4669      	mov	r1, sp
   d72b8:	4628      	mov	r0, r5
   d72ba:	f7ff fe93 	bl	d6fe4 <_ZN5Print5writeEPKc>
   d72be:	4604      	mov	r4, r0
   d72c0:	46c5      	mov	sp, r8
   d72c2:	e7e1      	b.n	d7288 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d72c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d72c4:	4b01      	ldr	r3, [pc, #4]	; (d72cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d72c6:	4a02      	ldr	r2, [pc, #8]	; (d72d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d72c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d72ca:	4770      	bx	lr
   d72cc:	2003e664 	.word	0x2003e664
   d72d0:	000db55c 	.word	0x000db55c

000d72d4 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d72d4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d72d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d72dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d72e0:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d72e2:	d411      	bmi.n	d7308 <_ZN9TimeClass4zoneEf+0x34>
   d72e4:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d72e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d72ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d72f0:	dc0a      	bgt.n	d7308 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d72f2:	eddf 7a06 	vldr	s15, [pc, #24]	; d730c <_ZN9TimeClass4zoneEf+0x38>
   d72f6:	ee60 7a27 	vmul.f32	s15, s0, s15
   d72fa:	ee17 0a90 	vmov	r0, s15
   d72fe:	f003 f887 	bl	da410 <__aeabi_f2lz>
   d7302:	4b03      	ldr	r3, [pc, #12]	; (d7310 <_ZN9TimeClass4zoneEf+0x3c>)
   d7304:	e9c3 0100 	strd	r0, r1, [r3]
}
   d7308:	bd08      	pop	{r3, pc}
   d730a:	bf00      	nop
   d730c:	45610000 	.word	0x45610000
   d7310:	2003e670 	.word	0x2003e670

000d7314 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7314:	4b02      	ldr	r3, [pc, #8]	; (d7320 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7316:	681a      	ldr	r2, [r3, #0]
   d7318:	4b02      	ldr	r3, [pc, #8]	; (d7324 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d731a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d731c:	4770      	bx	lr
   d731e:	bf00      	nop
   d7320:	2003e368 	.word	0x2003e368
   d7324:	2003e668 	.word	0x2003e668

000d7328 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7328:	2100      	movs	r1, #0
   d732a:	f7ff bb41 	b.w	d69b0 <system_delay_ms>

000d732e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d732e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7330:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d7332:	4604      	mov	r4, r0
      if (_M_manager)
   d7334:	b113      	cbz	r3, d733c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7336:	2203      	movs	r2, #3
   d7338:	4601      	mov	r1, r0
   d733a:	4798      	blx	r3
    }
   d733c:	4620      	mov	r0, r4
   d733e:	bd10      	pop	{r4, pc}

000d7340 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7340:	b510      	push	{r4, lr}
   d7342:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7344:	f7ff fff3 	bl	d732e <_ZNSt14_Function_baseD1Ev>
   d7348:	4620      	mov	r0, r4
   d734a:	bd10      	pop	{r4, pc}

000d734c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d734c:	4803      	ldr	r0, [pc, #12]	; (d735c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d734e:	4a04      	ldr	r2, [pc, #16]	; (d7360 <_GLOBAL__sub_I_RGB+0x14>)
   d7350:	4904      	ldr	r1, [pc, #16]	; (d7364 <_GLOBAL__sub_I_RGB+0x18>)
   d7352:	2300      	movs	r3, #0
   d7354:	6083      	str	r3, [r0, #8]
   d7356:	f000 bf3f 	b.w	d81d8 <__aeabi_atexit>
   d735a:	bf00      	nop
   d735c:	2003e678 	.word	0x2003e678
   d7360:	2003e3d8 	.word	0x2003e3d8
   d7364:	000d7341 	.word	0x000d7341

000d7368 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7368:	4b01      	ldr	r3, [pc, #4]	; (d7370 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d736a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d736c:	4770      	bx	lr
   d736e:	bf00      	nop
   d7370:	2003e370 	.word	0x2003e370

000d7374 <serialEventRun>:
{
   d7374:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7376:	4b0b      	ldr	r3, [pc, #44]	; (d73a4 <serialEventRun+0x30>)
   d7378:	b143      	cbz	r3, d738c <serialEventRun+0x18>
   d737a:	f000 f96b 	bl	d7654 <_Z16_fetch_usbserialv>
   d737e:	6803      	ldr	r3, [r0, #0]
   d7380:	691b      	ldr	r3, [r3, #16]
   d7382:	4798      	blx	r3
   d7384:	2800      	cmp	r0, #0
   d7386:	dd01      	ble.n	d738c <serialEventRun+0x18>
        serialEvent();
   d7388:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d738c:	4b06      	ldr	r3, [pc, #24]	; (d73a8 <serialEventRun+0x34>)
   d738e:	b143      	cbz	r3, d73a2 <serialEventRun+0x2e>
   d7390:	f000 f9de 	bl	d7750 <_Z22__fetch_global_Serial1v>
   d7394:	6803      	ldr	r3, [r0, #0]
   d7396:	691b      	ldr	r3, [r3, #16]
   d7398:	4798      	blx	r3
   d739a:	2800      	cmp	r0, #0
   d739c:	dd01      	ble.n	d73a2 <serialEventRun+0x2e>
        serialEvent1();
   d739e:	f3af 8000 	nop.w
}
   d73a2:	bd08      	pop	{r3, pc}
	...

000d73ac <_post_loop>:
{
   d73ac:	b508      	push	{r3, lr}
	serialEventRun();
   d73ae:	f7ff ffe1 	bl	d7374 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d73b2:	f7ff f95d 	bl	d6670 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d73b6:	4b01      	ldr	r3, [pc, #4]	; (d73bc <_post_loop+0x10>)
   d73b8:	6018      	str	r0, [r3, #0]
}
   d73ba:	bd08      	pop	{r3, pc}
   d73bc:	2003e7d8 	.word	0x2003e7d8

000d73c0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d73c0:	4802      	ldr	r0, [pc, #8]	; (d73cc <_Z33system_initialize_user_backup_ramv+0xc>)
   d73c2:	4a03      	ldr	r2, [pc, #12]	; (d73d0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d73c4:	4903      	ldr	r1, [pc, #12]	; (d73d4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d73c6:	1a12      	subs	r2, r2, r0
   d73c8:	f003 b9e0 	b.w	da78c <memcpy>
   d73cc:	2003f400 	.word	0x2003f400
   d73d0:	2003f404 	.word	0x2003f404
   d73d4:	000db948 	.word	0x000db948

000d73d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d73d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d73da:	2300      	movs	r3, #0
   d73dc:	9300      	str	r3, [sp, #0]
   d73de:	461a      	mov	r2, r3
   d73e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d73e4:	f7ff faf6 	bl	d69d4 <system_ctrl_set_result>
}
   d73e8:	b003      	add	sp, #12
   d73ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d73f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d73f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d73f2:	8843      	ldrh	r3, [r0, #2]
   d73f4:	2b0a      	cmp	r3, #10
   d73f6:	d008      	beq.n	d740a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d73f8:	2b50      	cmp	r3, #80	; 0x50
   d73fa:	d10b      	bne.n	d7414 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d73fc:	4b09      	ldr	r3, [pc, #36]	; (d7424 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d73fe:	681b      	ldr	r3, [r3, #0]
   d7400:	b14b      	cbz	r3, d7416 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7402:	b003      	add	sp, #12
   d7404:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7408:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d740a:	f7ff ffe5 	bl	d73d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d740e:	b003      	add	sp, #12
   d7410:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7414:	2300      	movs	r3, #0
   d7416:	9300      	str	r3, [sp, #0]
   d7418:	461a      	mov	r2, r3
   d741a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d741e:	f7ff fad9 	bl	d69d4 <system_ctrl_set_result>
}
   d7422:	e7f4      	b.n	d740e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7424:	2003e68c 	.word	0x2003e68c

000d7428 <module_user_init_hook>:
{
   d7428:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d742a:	4c12      	ldr	r4, [pc, #72]	; (d7474 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d742c:	4812      	ldr	r0, [pc, #72]	; (d7478 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d742e:	4d13      	ldr	r5, [pc, #76]	; (d747c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7430:	2100      	movs	r1, #0
   d7432:	f7ff fb71 	bl	d6b18 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7436:	6823      	ldr	r3, [r4, #0]
   d7438:	42ab      	cmp	r3, r5
   d743a:	4b11      	ldr	r3, [pc, #68]	; (d7480 <module_user_init_hook+0x58>)
   d743c:	bf0c      	ite	eq
   d743e:	2201      	moveq	r2, #1
   d7440:	2200      	movne	r2, #0
   d7442:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7444:	d002      	beq.n	d744c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7446:	f7ff ffbb 	bl	d73c0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d744a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d744c:	f7ff f900 	bl	d6650 <HAL_RNG_GetRandomNumber>
   d7450:	4604      	mov	r4, r0
    srand(seed);
   d7452:	f003 f9cb 	bl	da7ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7456:	4b0b      	ldr	r3, [pc, #44]	; (d7484 <module_user_init_hook+0x5c>)
   d7458:	b113      	cbz	r3, d7460 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d745a:	4620      	mov	r0, r4
   d745c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7460:	2100      	movs	r1, #0
   d7462:	4808      	ldr	r0, [pc, #32]	; (d7484 <module_user_init_hook+0x5c>)
   d7464:	f7ff fb20 	bl	d6aa8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d746c:	4806      	ldr	r0, [pc, #24]	; (d7488 <module_user_init_hook+0x60>)
   d746e:	2100      	movs	r1, #0
   d7470:	f7ff baa6 	b.w	d69c0 <system_ctrl_set_app_request_handler>
   d7474:	2003f400 	.word	0x2003f400
   d7478:	000d7369 	.word	0x000d7369
   d747c:	9a271c1e 	.word	0x9a271c1e
   d7480:	2003e688 	.word	0x2003e688
   d7484:	00000000 	.word	0x00000000
   d7488:	000d73f1 	.word	0x000d73f1

000d748c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d748c:	4770      	bx	lr

000d748e <_ZN9IPAddressD0Ev>:
   d748e:	b510      	push	{r4, lr}
   d7490:	2118      	movs	r1, #24
   d7492:	4604      	mov	r4, r0
   d7494:	f000 fea5 	bl	d81e2 <_ZdlPvj>
   d7498:	4620      	mov	r0, r4
   d749a:	bd10      	pop	{r4, pc}

000d749c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d749c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d749e:	7d03      	ldrb	r3, [r0, #20]
   d74a0:	2b06      	cmp	r3, #6
{
   d74a2:	b08d      	sub	sp, #52	; 0x34
   d74a4:	460e      	mov	r6, r1
   d74a6:	f100 0704 	add.w	r7, r0, #4
   d74aa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d74ae:	d012      	beq.n	d74d6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d74b0:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d74b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d74b8:	220a      	movs	r2, #10
   d74ba:	4630      	mov	r0, r6
   d74bc:	f7ff fdc1 	bl	d7042 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d74c0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d74c2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d74c4:	d019      	beq.n	d74fa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d74c6:	2c00      	cmp	r4, #0
   d74c8:	d0f4      	beq.n	d74b4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d74ca:	212e      	movs	r1, #46	; 0x2e
   d74cc:	4630      	mov	r0, r6
   d74ce:	f7ff fd9f 	bl	d7010 <_ZN5Print5printEc>
   d74d2:	4404      	add	r4, r0
   d74d4:	e7ee      	b.n	d74b4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d74d6:	232f      	movs	r3, #47	; 0x2f
   d74d8:	466a      	mov	r2, sp
   d74da:	4639      	mov	r1, r7
   d74dc:	200a      	movs	r0, #10
		buf[0] = 0;
   d74de:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d74e2:	f7ff f8dd 	bl	d66a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d74e6:	4668      	mov	r0, sp
   d74e8:	f003 f9b6 	bl	da858 <strlen>
   d74ec:	6833      	ldr	r3, [r6, #0]
   d74ee:	4602      	mov	r2, r0
   d74f0:	68db      	ldr	r3, [r3, #12]
   d74f2:	4669      	mov	r1, sp
   d74f4:	4630      	mov	r0, r6
   d74f6:	4798      	blx	r3
   d74f8:	4604      	mov	r4, r0
    }
    return n;
}
   d74fa:	4620      	mov	r0, r4
   d74fc:	b00d      	add	sp, #52	; 0x34
   d74fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7500 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7500:	b510      	push	{r4, lr}
   d7502:	4b05      	ldr	r3, [pc, #20]	; (d7518 <_ZN9IPAddressC1Ev+0x18>)
   d7504:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7506:	2211      	movs	r2, #17
   d7508:	f840 3b04 	str.w	r3, [r0], #4
   d750c:	2100      	movs	r1, #0
   d750e:	f003 f965 	bl	da7dc <memset>
}
   d7512:	4620      	mov	r0, r4
   d7514:	bd10      	pop	{r4, pc}
   d7516:	bf00      	nop
   d7518:	000db584 	.word	0x000db584

000d751c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d751c:	4603      	mov	r3, r0
   d751e:	4a07      	ldr	r2, [pc, #28]	; (d753c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7520:	b510      	push	{r4, lr}
   d7522:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7526:	f101 0210 	add.w	r2, r1, #16
   d752a:	f851 4b04 	ldr.w	r4, [r1], #4
   d752e:	f843 4b04 	str.w	r4, [r3], #4
   d7532:	4291      	cmp	r1, r2
   d7534:	d1f9      	bne.n	d752a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7536:	780a      	ldrb	r2, [r1, #0]
   d7538:	701a      	strb	r2, [r3, #0]
}
   d753a:	bd10      	pop	{r4, pc}
   d753c:	000db584 	.word	0x000db584

000d7540 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7540:	7d03      	ldrb	r3, [r0, #20]
   d7542:	2b04      	cmp	r3, #4
   d7544:	d104      	bne.n	d7550 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d7546:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7548:	3800      	subs	r0, #0
   d754a:	bf18      	it	ne
   d754c:	2001      	movne	r0, #1
   d754e:	4770      	bx	lr
    } else if (version() == 6) {
   d7550:	2b06      	cmp	r3, #6
   d7552:	d107      	bne.n	d7564 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7554:	6843      	ldr	r3, [r0, #4]
   d7556:	b93b      	cbnz	r3, d7568 <_ZNK9IPAddresscvbEv+0x28>
   d7558:	6883      	ldr	r3, [r0, #8]
   d755a:	b92b      	cbnz	r3, d7568 <_ZNK9IPAddresscvbEv+0x28>
   d755c:	68c3      	ldr	r3, [r0, #12]
   d755e:	b91b      	cbnz	r3, d7568 <_ZNK9IPAddresscvbEv+0x28>
   d7560:	6900      	ldr	r0, [r0, #16]
   d7562:	e7f1      	b.n	d7548 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7564:	2000      	movs	r0, #0
   d7566:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7568:	2001      	movs	r0, #1
}
   d756a:	4770      	bx	lr

000d756c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d756c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d756e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7572:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7576:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d757a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d757e:	2304      	movs	r3, #4
   d7580:	6041      	str	r1, [r0, #4]
   d7582:	7503      	strb	r3, [r0, #20]
}
   d7584:	bd10      	pop	{r4, pc}

000d7586 <_ZN9IPAddressaSEPKh>:
{
   d7586:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7588:	78cb      	ldrb	r3, [r1, #3]
   d758a:	9300      	str	r3, [sp, #0]
   d758c:	788b      	ldrb	r3, [r1, #2]
   d758e:	784a      	ldrb	r2, [r1, #1]
   d7590:	7809      	ldrb	r1, [r1, #0]
   d7592:	f7ff ffeb 	bl	d756c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7596:	b002      	add	sp, #8
   d7598:	bd10      	pop	{r4, pc}

000d759a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d759a:	7441      	strb	r1, [r0, #17]
}
   d759c:	4770      	bx	lr

000d759e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d759e:	4770      	bx	lr

000d75a0 <_ZN9USBSerial4readEv>:
{
   d75a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d75a2:	2100      	movs	r1, #0
   d75a4:	7c00      	ldrb	r0, [r0, #16]
   d75a6:	f7ff f9d3 	bl	d6950 <HAL_USB_USART_Receive_Data>
}
   d75aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d75ae:	bd08      	pop	{r3, pc}

000d75b0 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d75b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d75b2:	2101      	movs	r1, #1
   d75b4:	7c00      	ldrb	r0, [r0, #16]
   d75b6:	f7ff f9cb 	bl	d6950 <HAL_USB_USART_Receive_Data>
}
   d75ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d75be:	bd08      	pop	{r3, pc}

000d75c0 <_ZN9USBSerial17availableForWriteEv>:
{
   d75c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d75c2:	7c00      	ldrb	r0, [r0, #16]
   d75c4:	f7ff f9bc 	bl	d6940 <HAL_USB_USART_Available_Data_For_Write>
}
   d75c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d75cc:	bd08      	pop	{r3, pc}

000d75ce <_ZN9USBSerial9availableEv>:
{
   d75ce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d75d0:	7c00      	ldrb	r0, [r0, #16]
   d75d2:	f7ff f9ad 	bl	d6930 <HAL_USB_USART_Available_Data>
}
   d75d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d75da:	bd08      	pop	{r3, pc}

000d75dc <_ZN9USBSerial5writeEh>:
{
   d75dc:	b513      	push	{r0, r1, r4, lr}
   d75de:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d75e0:	7c00      	ldrb	r0, [r0, #16]
{
   d75e2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d75e4:	f7ff f9ac 	bl	d6940 <HAL_USB_USART_Available_Data_For_Write>
   d75e8:	2800      	cmp	r0, #0
   d75ea:	9901      	ldr	r1, [sp, #4]
   d75ec:	dc01      	bgt.n	d75f2 <_ZN9USBSerial5writeEh+0x16>
   d75ee:	7c60      	ldrb	r0, [r4, #17]
   d75f0:	b120      	cbz	r0, d75fc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d75f2:	7c20      	ldrb	r0, [r4, #16]
   d75f4:	f7ff f9b4 	bl	d6960 <HAL_USB_USART_Send_Data>
   d75f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d75fc:	b002      	add	sp, #8
   d75fe:	bd10      	pop	{r4, pc}

000d7600 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7600:	7c00      	ldrb	r0, [r0, #16]
   d7602:	f7ff b9b5 	b.w	d6970 <HAL_USB_USART_Flush_Data>

000d7606 <_ZN9USBSerialD0Ev>:
   d7606:	b510      	push	{r4, lr}
   d7608:	2114      	movs	r1, #20
   d760a:	4604      	mov	r4, r0
   d760c:	f000 fde9 	bl	d81e2 <_ZdlPvj>
   d7610:	4620      	mov	r0, r4
   d7612:	bd10      	pop	{r4, pc}

000d7614 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7614:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d761a:	4604      	mov	r4, r0
   d761c:	4608      	mov	r0, r1
   d761e:	2100      	movs	r1, #0
   d7620:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7624:	4b04      	ldr	r3, [pc, #16]	; (d7638 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7626:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7628:	2301      	movs	r3, #1
  _serial = serial;
   d762a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d762c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d762e:	4611      	mov	r1, r2
   d7630:	f7ff f96e 	bl	d6910 <HAL_USB_USART_Init>
}
   d7634:	4620      	mov	r0, r4
   d7636:	bd10      	pop	{r4, pc}
   d7638:	000db598 	.word	0x000db598

000d763c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d763c:	7c00      	ldrb	r0, [r0, #16]
   d763e:	2200      	movs	r2, #0
   d7640:	f7ff b96e 	b.w	d6920 <HAL_USB_USART_Begin>

000d7644 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7644:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7646:	2214      	movs	r2, #20
{
   d7648:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d764a:	2100      	movs	r1, #0
   d764c:	f003 f8c6 	bl	da7dc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7650:	4620      	mov	r0, r4
   d7652:	bd10      	pop	{r4, pc}

000d7654 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7654:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7656:	4c10      	ldr	r4, [pc, #64]	; (d7698 <_Z16_fetch_usbserialv+0x44>)
{
   d7658:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d765a:	a803      	add	r0, sp, #12
   d765c:	f7ff fff2 	bl	d7644 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7660:	7821      	ldrb	r1, [r4, #0]
   d7662:	f3bf 8f5b 	dmb	ish
   d7666:	f011 0101 	ands.w	r1, r1, #1
   d766a:	d111      	bne.n	d7690 <_Z16_fetch_usbserialv+0x3c>
   d766c:	4620      	mov	r0, r4
   d766e:	9101      	str	r1, [sp, #4]
   d7670:	f7fc fd22 	bl	d40b8 <__cxa_guard_acquire>
   d7674:	9901      	ldr	r1, [sp, #4]
   d7676:	b158      	cbz	r0, d7690 <_Z16_fetch_usbserialv+0x3c>
   d7678:	aa03      	add	r2, sp, #12
   d767a:	4808      	ldr	r0, [pc, #32]	; (d769c <_Z16_fetch_usbserialv+0x48>)
   d767c:	f7ff ffca 	bl	d7614 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7680:	4620      	mov	r0, r4
   d7682:	f7fc fd1e 	bl	d40c2 <__cxa_guard_release>
   d7686:	4a06      	ldr	r2, [pc, #24]	; (d76a0 <_Z16_fetch_usbserialv+0x4c>)
   d7688:	4906      	ldr	r1, [pc, #24]	; (d76a4 <_Z16_fetch_usbserialv+0x50>)
   d768a:	4804      	ldr	r0, [pc, #16]	; (d769c <_Z16_fetch_usbserialv+0x48>)
   d768c:	f000 fda4 	bl	d81d8 <__aeabi_atexit>
	return _usbserial;
}
   d7690:	4802      	ldr	r0, [pc, #8]	; (d769c <_Z16_fetch_usbserialv+0x48>)
   d7692:	b008      	add	sp, #32
   d7694:	bd10      	pop	{r4, pc}
   d7696:	bf00      	nop
   d7698:	2003e690 	.word	0x2003e690
   d769c:	2003e694 	.word	0x2003e694
   d76a0:	2003e3d8 	.word	0x2003e3d8
   d76a4:	000d759f 	.word	0x000d759f

000d76a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d76a8:	4770      	bx	lr

000d76aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d76aa:	7441      	strb	r1, [r0, #17]
}
   d76ac:	4770      	bx	lr

000d76ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d76ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d76b0:	7c00      	ldrb	r0, [r0, #16]
   d76b2:	f7ff f845 	bl	d6740 <hal_usart_available_data_for_write>
}
   d76b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d76ba:	bd08      	pop	{r3, pc}

000d76bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d76bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d76be:	7c00      	ldrb	r0, [r0, #16]
   d76c0:	f7ff f816 	bl	d66f0 <hal_usart_available>
}
   d76c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d76c8:	bd08      	pop	{r3, pc}

000d76ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d76ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d76cc:	7c00      	ldrb	r0, [r0, #16]
   d76ce:	f7ff f81f 	bl	d6710 <hal_usart_peek>
}
   d76d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d76d6:	bd08      	pop	{r3, pc}

000d76d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d76d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d76da:	7c00      	ldrb	r0, [r0, #16]
   d76dc:	f7ff f810 	bl	d6700 <hal_usart_read>
}
   d76e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d76e4:	bd08      	pop	{r3, pc}

000d76e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d76e6:	7c00      	ldrb	r0, [r0, #16]
   d76e8:	f7ff b81a 	b.w	d6720 <hal_usart_flush>

000d76ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d76ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d76ee:	7c45      	ldrb	r5, [r0, #17]
{
   d76f0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d76f2:	b12d      	cbz	r5, d7700 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d76f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d76f6:	b003      	add	sp, #12
   d76f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d76fc:	f7fe bff0 	b.w	d66e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7700:	7c00      	ldrb	r0, [r0, #16]
   d7702:	9101      	str	r1, [sp, #4]
   d7704:	f7ff f81c 	bl	d6740 <hal_usart_available_data_for_write>
   d7708:	2800      	cmp	r0, #0
   d770a:	9901      	ldr	r1, [sp, #4]
   d770c:	dcf2      	bgt.n	d76f4 <_ZN11USARTSerial5writeEh+0x8>
}
   d770e:	4628      	mov	r0, r5
   d7710:	b003      	add	sp, #12
   d7712:	bd30      	pop	{r4, r5, pc}

000d7714 <_ZN11USARTSerialD0Ev>:
   d7714:	b510      	push	{r4, lr}
   d7716:	2114      	movs	r1, #20
   d7718:	4604      	mov	r4, r0
   d771a:	f000 fd62 	bl	d81e2 <_ZdlPvj>
   d771e:	4620      	mov	r0, r4
   d7720:	bd10      	pop	{r4, pc}
	...

000d7724 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7724:	b510      	push	{r4, lr}
   d7726:	f04f 0c00 	mov.w	ip, #0
   d772a:	4604      	mov	r4, r0
   d772c:	4608      	mov	r0, r1
   d772e:	4611      	mov	r1, r2
   d7730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7734:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7738:	4a04      	ldr	r2, [pc, #16]	; (d774c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d773a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d773c:	2201      	movs	r2, #1
  _serial = serial;
   d773e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7740:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7742:	461a      	mov	r2, r3
   d7744:	f7fe ffc4 	bl	d66d0 <hal_usart_init>
}
   d7748:	4620      	mov	r0, r4
   d774a:	bd10      	pop	{r4, pc}
   d774c:	000db5c8 	.word	0x000db5c8

000d7750 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7750:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7752:	4c0e      	ldr	r4, [pc, #56]	; (d778c <_Z22__fetch_global_Serial1v+0x3c>)
   d7754:	7821      	ldrb	r1, [r4, #0]
   d7756:	f3bf 8f5b 	dmb	ish
   d775a:	f011 0101 	ands.w	r1, r1, #1
   d775e:	d112      	bne.n	d7786 <_Z22__fetch_global_Serial1v+0x36>
   d7760:	4620      	mov	r0, r4
   d7762:	9101      	str	r1, [sp, #4]
   d7764:	f7fc fca8 	bl	d40b8 <__cxa_guard_acquire>
   d7768:	9901      	ldr	r1, [sp, #4]
   d776a:	b160      	cbz	r0, d7786 <_Z22__fetch_global_Serial1v+0x36>
   d776c:	4a08      	ldr	r2, [pc, #32]	; (d7790 <_Z22__fetch_global_Serial1v+0x40>)
   d776e:	4b09      	ldr	r3, [pc, #36]	; (d7794 <_Z22__fetch_global_Serial1v+0x44>)
   d7770:	4809      	ldr	r0, [pc, #36]	; (d7798 <_Z22__fetch_global_Serial1v+0x48>)
   d7772:	f7ff ffd7 	bl	d7724 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7776:	4620      	mov	r0, r4
   d7778:	f7fc fca3 	bl	d40c2 <__cxa_guard_release>
   d777c:	4a07      	ldr	r2, [pc, #28]	; (d779c <_Z22__fetch_global_Serial1v+0x4c>)
   d777e:	4908      	ldr	r1, [pc, #32]	; (d77a0 <_Z22__fetch_global_Serial1v+0x50>)
   d7780:	4805      	ldr	r0, [pc, #20]	; (d7798 <_Z22__fetch_global_Serial1v+0x48>)
   d7782:	f000 fd29 	bl	d81d8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7786:	4804      	ldr	r0, [pc, #16]	; (d7798 <_Z22__fetch_global_Serial1v+0x48>)
   d7788:	b002      	add	sp, #8
   d778a:	bd10      	pop	{r4, pc}
   d778c:	2003e6a8 	.word	0x2003e6a8
   d7790:	2003e6ac 	.word	0x2003e6ac
   d7794:	2003e730 	.word	0x2003e730
   d7798:	2003e7b4 	.word	0x2003e7b4
   d779c:	2003e3d8 	.word	0x2003e3d8
   d77a0:	000d76a9 	.word	0x000d76a9

000d77a4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d77a4:	4770      	bx	lr

000d77a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d77a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77a8:	4606      	mov	r6, r0
   d77aa:	4615      	mov	r5, r2
   d77ac:	460c      	mov	r4, r1
   d77ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d77b0:	42bc      	cmp	r4, r7
   d77b2:	d006      	beq.n	d77c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d77b4:	6833      	ldr	r3, [r6, #0]
   d77b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d77ba:	689b      	ldr	r3, [r3, #8]
   d77bc:	4630      	mov	r0, r6
   d77be:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d77c0:	e7f6      	b.n	d77b0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d77c2:	4628      	mov	r0, r5
   d77c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d77c6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d77c6:	7c00      	ldrb	r0, [r0, #16]
   d77c8:	2200      	movs	r2, #0
   d77ca:	f7fe bfd9 	b.w	d6780 <hal_i2c_write>

000d77ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d77ce:	7c00      	ldrb	r0, [r0, #16]
   d77d0:	2100      	movs	r1, #0
   d77d2:	f7fe bfdd 	b.w	d6790 <hal_i2c_available>

000d77d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d77d6:	7c00      	ldrb	r0, [r0, #16]
   d77d8:	2100      	movs	r1, #0
   d77da:	f7fe bfe1 	b.w	d67a0 <hal_i2c_read>

000d77de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d77de:	7c00      	ldrb	r0, [r0, #16]
   d77e0:	2100      	movs	r1, #0
   d77e2:	f7fe bfe5 	b.w	d67b0 <hal_i2c_peek>

000d77e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d77e6:	7c00      	ldrb	r0, [r0, #16]
   d77e8:	2100      	movs	r1, #0
   d77ea:	f7fe bfe9 	b.w	d67c0 <hal_i2c_flush>

000d77ee <_ZN7TwoWireD0Ev>:
   d77ee:	b510      	push	{r4, lr}
   d77f0:	2114      	movs	r1, #20
   d77f2:	4604      	mov	r4, r0
   d77f4:	f000 fcf5 	bl	d81e2 <_ZdlPvj>
   d77f8:	4620      	mov	r0, r4
   d77fa:	bd10      	pop	{r4, pc}

000d77fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d77fc:	b510      	push	{r4, lr}
   d77fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7802:	4604      	mov	r4, r0
   d7804:	4608      	mov	r0, r1
   d7806:	2100      	movs	r1, #0
   d7808:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d780c:	4b03      	ldr	r3, [pc, #12]	; (d781c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d780e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7810:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7812:	4611      	mov	r1, r2
   d7814:	f7fe ffe4 	bl	d67e0 <hal_i2c_init>
}
   d7818:	4620      	mov	r0, r4
   d781a:	bd10      	pop	{r4, pc}
   d781c:	000db5f8 	.word	0x000db5f8

000d7820 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7820:	2300      	movs	r3, #0
   d7822:	7c00      	ldrb	r0, [r0, #16]
   d7824:	461a      	mov	r2, r3
   d7826:	4619      	mov	r1, r3
   d7828:	f7fe bf92 	b.w	d6750 <hal_i2c_begin>

000d782c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d782c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d782e:	2200      	movs	r2, #0
   d7830:	2314      	movs	r3, #20
   d7832:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7836:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d783a:	780b      	ldrb	r3, [r1, #0]
   d783c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7840:	684b      	ldr	r3, [r1, #4]
   d7842:	9303      	str	r3, [sp, #12]
   d7844:	68cb      	ldr	r3, [r1, #12]
   d7846:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7848:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d784a:	7a0b      	ldrb	r3, [r1, #8]
   d784c:	9305      	str	r3, [sp, #20]
   d784e:	a901      	add	r1, sp, #4
   d7850:	f7fe ffce 	bl	d67f0 <hal_i2c_request_ex>
}
   d7854:	b007      	add	sp, #28
   d7856:	f85d fb04 	ldr.w	pc, [sp], #4

000d785a <_ZN7TwoWire11requestFromEhjh>:
{
   d785a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d785c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d785e:	f88d 1000 	strb.w	r1, [sp]
   d7862:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7866:	9103      	str	r1, [sp, #12]
   d7868:	bf18      	it	ne
   d786a:	2301      	movne	r3, #1
   d786c:	4669      	mov	r1, sp
    size_ = size;
   d786e:	9201      	str	r2, [sp, #4]
   d7870:	f88d 3008 	strb.w	r3, [sp, #8]
   d7874:	f7ff ffda 	bl	d782c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7878:	b005      	add	sp, #20
   d787a:	f85d fb04 	ldr.w	pc, [sp], #4

000d787e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d787e:	2301      	movs	r3, #1
   d7880:	f7ff bfeb 	b.w	d785a <_ZN7TwoWire11requestFromEhjh>

000d7884 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7884:	7c00      	ldrb	r0, [r0, #16]
   d7886:	2200      	movs	r2, #0
   d7888:	f7fe bf6a 	b.w	d6760 <hal_i2c_begin_transmission>

000d788c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d788c:	b2c9      	uxtb	r1, r1
   d788e:	f7ff bff9 	b.w	d7884 <_ZN7TwoWire17beginTransmissionEh>

000d7892 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7892:	7c00      	ldrb	r0, [r0, #16]
   d7894:	2200      	movs	r2, #0
   d7896:	f7fe bf6b 	b.w	d6770 <hal_i2c_end_transmission>

000d789a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d789a:	2101      	movs	r1, #1
   d789c:	f7ff bff9 	b.w	d7892 <_ZN7TwoWire15endTransmissionEh>

000d78a0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d78a0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d78a2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d78a4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d78a8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d78aa:	2201      	movs	r2, #1
   d78ac:	f04f 33ff 	mov.w	r3, #4294967295
   d78b0:	f10d 0107 	add.w	r1, sp, #7
   d78b4:	47a0      	blx	r4
}
   d78b6:	b002      	add	sp, #8
   d78b8:	bd10      	pop	{r4, pc}

000d78ba <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d78ba:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d78bc:	6803      	ldr	r3, [r0, #0]
   d78be:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d78c0:	f04f 33ff 	mov.w	r3, #4294967295
   d78c4:	46a4      	mov	ip, r4
}
   d78c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d78ca:	4760      	bx	ip

000d78cc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d78cc:	b513      	push	{r0, r1, r4, lr}
   d78ce:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d78d0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d78d2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d78d6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d78d8:	f10d 0107 	add.w	r1, sp, #7
   d78dc:	2201      	movs	r2, #1
   d78de:	47a0      	blx	r4
}
   d78e0:	b002      	add	sp, #8
   d78e2:	bd10      	pop	{r4, pc}

000d78e4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d78e4:	4770      	bx	lr

000d78e6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d78e6:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d78e8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d78ea:	681a      	ldr	r2, [r3, #0]
   d78ec:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d78ee:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d78f0:	da10      	bge.n	d7914 <_ZN9TCPClient9connectedEv+0x2e>
   d78f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d78f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d78fa:	429a      	cmp	r2, r3
   d78fc:	d10a      	bne.n	d7914 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d78fe:	6803      	ldr	r3, [r0, #0]
   d7900:	691b      	ldr	r3, [r3, #16]
   d7902:	4798      	blx	r3
        if (!rv) {
   d7904:	4604      	mov	r4, r0
   d7906:	b928      	cbnz	r0, d7914 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7908:	682b      	ldr	r3, [r5, #0]
   d790a:	4628      	mov	r0, r5
   d790c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d790e:	4798      	blx	r3
        rv = available();
   d7910:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d7912:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7914:	2001      	movs	r0, #1
   d7916:	e7fc      	b.n	d7912 <_ZN9TCPClient9connectedEv+0x2c>

000d7918 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7918:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d791a:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d791c:	43c0      	mvns	r0, r0
   d791e:	0fc0      	lsrs	r0, r0, #31
   d7920:	4770      	bx	lr

000d7922 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7922:	4770      	bx	lr

000d7924 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7924:	4b06      	ldr	r3, [pc, #24]	; (d7940 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7926:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7928:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d792a:	f100 040c 	add.w	r4, r0, #12
	    ||
   d792e:	d005      	beq.n	d793c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7930:	4608      	mov	r0, r1
   d7932:	f000 fc5b 	bl	d81ec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7936:	2800      	cmp	r0, #0
	return nullptr;
   d7938:	bf08      	it	eq
   d793a:	2400      	moveq	r4, #0
      }
   d793c:	4620      	mov	r0, r4
   d793e:	bd10      	pop	{r4, pc}
   d7940:	000db548 	.word	0x000db548

000d7944 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7944:	b510      	push	{r4, lr}
   d7946:	21ac      	movs	r1, #172	; 0xac
   d7948:	4604      	mov	r4, r0
   d794a:	f000 fc4a 	bl	d81e2 <_ZdlPvj>
   d794e:	4620      	mov	r0, r4
   d7950:	bd10      	pop	{r4, pc}

000d7952 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d7952:	f7fc bba4 	b.w	d409e <_ZdlPv>

000d7956 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d795a:	f04f 0800 	mov.w	r8, #0
   d795e:	b086      	sub	sp, #24
   d7960:	461d      	mov	r5, r3
   d7962:	f8c0 8004 	str.w	r8, [r0, #4]
   d7966:	4604      	mov	r4, r0
   d7968:	460e      	mov	r6, r1
   d796a:	4617      	mov	r7, r2
    struct timeval tv = {};
   d796c:	4641      	mov	r1, r8
   d796e:	2210      	movs	r2, #16
   d7970:	a802      	add	r0, sp, #8
   d7972:	f002 ff33 	bl	da7dc <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7976:	1c6b      	adds	r3, r5, #1
   d7978:	d009      	beq.n	d798e <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d797a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d797e:	fbb5 f3f0 	udiv	r3, r5, r0
   d7982:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7986:	fb00 5313 	mls	r3, r0, r3, r5
   d798a:	4358      	muls	r0, r3
   d798c:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d798e:	6960      	ldr	r0, [r4, #20]
   d7990:	2310      	movs	r3, #16
   d7992:	9300      	str	r3, [sp, #0]
   d7994:	6800      	ldr	r0, [r0, #0]
   d7996:	ab02      	add	r3, sp, #8
   d7998:	f241 0205 	movw	r2, #4101	; 0x1005
   d799c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d79a0:	f7fe ff2e 	bl	d6800 <sock_setsockopt>
    if (ret < 0) {
   d79a4:	2800      	cmp	r0, #0
   d79a6:	da07      	bge.n	d79b8 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d79a8:	f7ff f8ae 	bl	d6b08 <__errno>
   d79ac:	6803      	ldr	r3, [r0, #0]
   d79ae:	6063      	str	r3, [r4, #4]
        return 0;
   d79b0:	2000      	movs	r0, #0
}
   d79b2:	b006      	add	sp, #24
   d79b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d79b8:	6960      	ldr	r0, [r4, #20]
   d79ba:	2300      	movs	r3, #0
   d79bc:	6800      	ldr	r0, [r0, #0]
   d79be:	463a      	mov	r2, r7
   d79c0:	4631      	mov	r1, r6
   d79c2:	f7fe ff3d 	bl	d6840 <sock_send>
    if (ret < 0) {
   d79c6:	1e03      	subs	r3, r0, #0
   d79c8:	dbee      	blt.n	d79a8 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d79ca:	4618      	mov	r0, r3
   d79cc:	e7f1      	b.n	d79b2 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d79d0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d79d0:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d79d2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d79d4:	4b05      	ldr	r3, [pc, #20]	; (d79ec <_ZN9TCPClient8remoteIPEv+0x1c>)
   d79d6:	4604      	mov	r4, r0
   d79d8:	358c      	adds	r5, #140	; 0x8c
   d79da:	f844 3b04 	str.w	r3, [r4], #4
   d79de:	4606      	mov	r6, r0
   d79e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d79e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d79e4:	682b      	ldr	r3, [r5, #0]
   d79e6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d79e8:	4630      	mov	r0, r6
   d79ea:	bd70      	pop	{r4, r5, r6, pc}
   d79ec:	000db584 	.word	0x000db584

000d79f0 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d79f0:	b510      	push	{r4, lr}
   d79f2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d79f4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d79f8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d79fc:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d79fe:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7a00:	d005      	beq.n	d7a0e <_ZN9TCPClient4peekEv+0x1e>
   d7a02:	6963      	ldr	r3, [r4, #20]
   d7a04:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7a08:	4413      	add	r3, r2
   d7a0a:	7918      	ldrb	r0, [r3, #4]
}
   d7a0c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7a0e:	6803      	ldr	r3, [r0, #0]
   d7a10:	691b      	ldr	r3, [r3, #16]
   d7a12:	4798      	blx	r3
   d7a14:	2800      	cmp	r0, #0
   d7a16:	d1f4      	bne.n	d7a02 <_ZN9TCPClient4peekEv+0x12>
   d7a18:	f04f 30ff 	mov.w	r0, #4294967295
   d7a1c:	e7f6      	b.n	d7a0c <_ZN9TCPClient4peekEv+0x1c>

000d7a1e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7a1e:	b510      	push	{r4, lr}
   d7a20:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7a22:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a2a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7a2c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7a2e:	d008      	beq.n	d7a42 <_ZN9TCPClient4readEv+0x24>
   d7a30:	6963      	ldr	r3, [r4, #20]
   d7a32:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7a36:	1c51      	adds	r1, r2, #1
   d7a38:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7a3c:	4413      	add	r3, r2
   d7a3e:	7918      	ldrb	r0, [r3, #4]
}
   d7a40:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7a42:	6803      	ldr	r3, [r0, #0]
   d7a44:	691b      	ldr	r3, [r3, #16]
   d7a46:	4798      	blx	r3
   d7a48:	2800      	cmp	r0, #0
   d7a4a:	d1f1      	bne.n	d7a30 <_ZN9TCPClient4readEv+0x12>
   d7a4c:	f04f 30ff 	mov.w	r0, #4294967295
   d7a50:	e7f6      	b.n	d7a40 <_ZN9TCPClient4readEv+0x22>

000d7a52 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a54:	6943      	ldr	r3, [r0, #20]
   d7a56:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7a58:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a5c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a60:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7a62:	4605      	mov	r5, r0
   d7a64:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d7a66:	d016      	beq.n	d7a96 <_ZN9TCPClient4readEPhj+0x44>
   d7a68:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d7a6a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7a6e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7a72:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7a74:	42bc      	cmp	r4, r7
   d7a76:	bf28      	it	cs
   d7a78:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7a7a:	3304      	adds	r3, #4
   d7a7c:	4622      	mov	r2, r4
   d7a7e:	4419      	add	r1, r3
   d7a80:	4630      	mov	r0, r6
   d7a82:	f002 fe83 	bl	da78c <memcpy>
   d7a86:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7a88:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7a8c:	4423      	add	r3, r4
   d7a8e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7a92:	4620      	mov	r0, r4
   d7a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d7a96:	6803      	ldr	r3, [r0, #0]
   d7a98:	691b      	ldr	r3, [r3, #16]
   d7a9a:	4798      	blx	r3
   d7a9c:	2800      	cmp	r0, #0
   d7a9e:	d1e3      	bne.n	d7a68 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7aa0:	f04f 34ff 	mov.w	r4, #4294967295
   d7aa4:	e7f5      	b.n	d7a92 <_ZN9TCPClient4readEPhj+0x40>
	...

000d7aa8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7aac:	4698      	mov	r8, r3
    stop();
   d7aae:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7ab0:	b093      	sub	sp, #76	; 0x4c
   d7ab2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d7ab4:	2400      	movs	r4, #0
    stop();
   d7ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7ab8:	4606      	mov	r6, r0
   d7aba:	4617      	mov	r7, r2
    stop();
   d7abc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7abe:	4628      	mov	r0, r5
   d7ac0:	466b      	mov	r3, sp
   d7ac2:	4622      	mov	r2, r4
   d7ac4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d7ac6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7ac8:	f7fe fd7a 	bl	d65c0 <netdb_getaddrinfo>
   d7acc:	4605      	mov	r5, r0
   d7ace:	2800      	cmp	r0, #0
   d7ad0:	d163      	bne.n	d7b9a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d7ad2:	9b00      	ldr	r3, [sp, #0]
   d7ad4:	2b00      	cmp	r3, #0
   d7ad6:	d04b      	beq.n	d7b70 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7ad8:	695b      	ldr	r3, [r3, #20]
   d7ada:	2b00      	cmp	r3, #0
   d7adc:	d048      	beq.n	d7b70 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d7ade:	a806      	add	r0, sp, #24
   d7ae0:	f7ff fd0e 	bl	d7500 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7ae4:	9b00      	ldr	r3, [sp, #0]
   d7ae6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7ae8:	7863      	ldrb	r3, [r4, #1]
   d7aea:	2b02      	cmp	r3, #2
   d7aec:	d104      	bne.n	d7af8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7aee:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7af0:	a806      	add	r0, sp, #24
   d7af2:	f7ff fd48 	bl	d7586 <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   d7af6:	e026      	b.n	d7b46 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d7af8:	2b0a      	cmp	r3, #10
   d7afa:	d124      	bne.n	d7b46 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7afc:	2211      	movs	r2, #17
   d7afe:	4629      	mov	r1, r5
   d7b00:	a801      	add	r0, sp, #4
   d7b02:	f002 fe6b 	bl	da7dc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7b06:	68a3      	ldr	r3, [r4, #8]
   d7b08:	2b00      	cmp	r3, #0
   d7b0a:	d038      	beq.n	d7b7e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7b0c:	f104 0308 	add.w	r3, r4, #8
   d7b10:	f10d 0c04 	add.w	ip, sp, #4
   d7b14:	3418      	adds	r4, #24
   d7b16:	6818      	ldr	r0, [r3, #0]
   d7b18:	6859      	ldr	r1, [r3, #4]
   d7b1a:	4662      	mov	r2, ip
   d7b1c:	c203      	stmia	r2!, {r0, r1}
   d7b1e:	3308      	adds	r3, #8
   d7b20:	42a3      	cmp	r3, r4
   d7b22:	4694      	mov	ip, r2
   d7b24:	d1f7      	bne.n	d7b16 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d7b26:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7b28:	a901      	add	r1, sp, #4
   d7b2a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7b2c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7b30:	f7ff fcf4 	bl	d751c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7b34:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d7b38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7b3c:	ac07      	add	r4, sp, #28
   d7b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b40:	f8dc 3000 	ldr.w	r3, [ip]
   d7b44:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d7b46:	a806      	add	r0, sp, #24
   d7b48:	f7ff fcfa 	bl	d7540 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7b4c:	b180      	cbz	r0, d7b70 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d7b4e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d7b50:	ad07      	add	r5, sp, #28
   d7b52:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7b56:	4b12      	ldr	r3, [pc, #72]	; (d7ba0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d7b58:	930c      	str	r3, [sp, #48]	; 0x30
   d7b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b5c:	ac0d      	add	r4, sp, #52	; 0x34
   d7b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b60:	682b      	ldr	r3, [r5, #0]
   d7b62:	7023      	strb	r3, [r4, #0]
   d7b64:	463a      	mov	r2, r7
   d7b66:	4643      	mov	r3, r8
   d7b68:	a90c      	add	r1, sp, #48	; 0x30
   d7b6a:	4630      	mov	r0, r6
   d7b6c:	47c8      	blx	r9
   d7b6e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7b70:	9800      	ldr	r0, [sp, #0]
   d7b72:	f7fe fd1d 	bl	d65b0 <netdb_freeaddrinfo>
}
   d7b76:	4628      	mov	r0, r5
   d7b78:	b013      	add	sp, #76	; 0x4c
   d7b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7b7e:	68e3      	ldr	r3, [r4, #12]
   d7b80:	2b00      	cmp	r3, #0
   d7b82:	d1c3      	bne.n	d7b0c <_ZN9TCPClient7connectEPKctm+0x64>
   d7b84:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7b88:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7b8c:	f7fe fd90 	bl	d66b0 <inet_htonl>
   d7b90:	4581      	cmp	r9, r0
   d7b92:	d1bb      	bne.n	d7b0c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d7b94:	f104 0114 	add.w	r1, r4, #20
   d7b98:	e7aa      	b.n	d7af0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7b9a:	4625      	mov	r5, r4
   d7b9c:	e7e8      	b.n	d7b70 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7b9e:	bf00      	nop
   d7ba0:	000db584 	.word	0x000db584

000d7ba4 <_ZN9TCPClient12flush_bufferEv>:
   d7ba4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7ba6:	2300      	movs	r3, #0
   d7ba8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7bac:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7bae:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7bb2:	4770      	bx	lr

000d7bb4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7bb8:	461f      	mov	r7, r3
    stop();
   d7bba:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7bbc:	460c      	mov	r4, r1
    stop();
   d7bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7bc0:	b08a      	sub	sp, #40	; 0x28
   d7bc2:	4605      	mov	r5, r0
   d7bc4:	4616      	mov	r6, r2
    stop();
   d7bc6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7bc8:	7d23      	ldrb	r3, [r4, #20]
   d7bca:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7bce:	2b04      	cmp	r3, #4
   d7bd0:	bf0c      	ite	eq
   d7bd2:	2002      	moveq	r0, #2
   d7bd4:	200a      	movne	r0, #10
   d7bd6:	2206      	movs	r2, #6
   d7bd8:	2101      	movs	r1, #1
   d7bda:	f7fe fe39 	bl	d6850 <sock_socket>
   d7bde:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7be2:	696b      	ldr	r3, [r5, #20]
   d7be4:	681b      	ldr	r3, [r3, #0]
   d7be6:	2b00      	cmp	r3, #0
   d7be8:	da08      	bge.n	d7bfc <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d7bea:	682b      	ldr	r3, [r5, #0]
   d7bec:	4628      	mov	r0, r5
   d7bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7bf0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7bf2:	4798      	blx	r3
}
   d7bf4:	4620      	mov	r0, r4
   d7bf6:	b00a      	add	sp, #40	; 0x28
   d7bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7bfc:	4628      	mov	r0, r5
   d7bfe:	f7ff ffd1 	bl	d7ba4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7c02:	b1b7      	cbz	r7, d7c32 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d7c04:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c06:	a903      	add	r1, sp, #12
   d7c08:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d7c0a:	9303      	str	r3, [sp, #12]
   d7c0c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c10:	f7fe fd16 	bl	d6640 <if_index_to_name>
   d7c14:	2800      	cmp	r0, #0
   d7c16:	d1e8      	bne.n	d7bea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7c18:	6968      	ldr	r0, [r5, #20]
   d7c1a:	2306      	movs	r3, #6
   d7c1c:	9300      	str	r3, [sp, #0]
   d7c1e:	6800      	ldr	r0, [r0, #0]
   d7c20:	ab03      	add	r3, sp, #12
   d7c22:	f241 020b 	movw	r2, #4107	; 0x100b
   d7c26:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7c2a:	f7fe fde9 	bl	d6800 <sock_setsockopt>
   d7c2e:	2800      	cmp	r0, #0
   d7c30:	d1db      	bne.n	d7bea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7c32:	221c      	movs	r2, #28
   d7c34:	2100      	movs	r1, #0
   d7c36:	a803      	add	r0, sp, #12
   d7c38:	f002 fdd0 	bl	da7dc <memset>
    if (ip.version() == 4) {
   d7c3c:	7d23      	ldrb	r3, [r4, #20]
   d7c3e:	2b04      	cmp	r3, #4
   d7c40:	d11d      	bne.n	d7c7e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7c42:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d7c46:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d7c48:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7c4c:	f7fe fd38 	bl	d66c0 <inet_htons>
   d7c50:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7c54:	6860      	ldr	r0, [r4, #4]
   d7c56:	f7fe fd2b 	bl	d66b0 <inet_htonl>
   d7c5a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7c5c:	696b      	ldr	r3, [r5, #20]
   d7c5e:	221c      	movs	r2, #28
   d7c60:	6818      	ldr	r0, [r3, #0]
   d7c62:	a903      	add	r1, sp, #12
   d7c64:	f7fe fddc 	bl	d6820 <sock_connect>
   d7c68:	2800      	cmp	r0, #0
   d7c6a:	d1be      	bne.n	d7bea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7c6c:	3404      	adds	r4, #4
   d7c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7c70:	696d      	ldr	r5, [r5, #20]
   d7c72:	358c      	adds	r5, #140	; 0x8c
   d7c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7c76:	6823      	ldr	r3, [r4, #0]
   d7c78:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d7c7a:	2401      	movs	r4, #1
   d7c7c:	e7ba      	b.n	d7bf4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7c7e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d7c82:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d7c84:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d7c88:	f7fe fd1a 	bl	d66c0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7c8c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7c8e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7c92:	1d23      	adds	r3, r4, #4
   d7c94:	f104 0714 	add.w	r7, r4, #20
   d7c98:	6818      	ldr	r0, [r3, #0]
   d7c9a:	6859      	ldr	r1, [r3, #4]
   d7c9c:	4632      	mov	r2, r6
   d7c9e:	c203      	stmia	r2!, {r0, r1}
   d7ca0:	3308      	adds	r3, #8
   d7ca2:	42bb      	cmp	r3, r7
   d7ca4:	4616      	mov	r6, r2
   d7ca6:	d1f7      	bne.n	d7c98 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d7ca8:	e7d8      	b.n	d7c5c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d7cac <_ZN9TCPClient9availableEv>:
{
   d7cac:	b530      	push	{r4, r5, lr}
   d7cae:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7cb0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7cb4:	b08b      	sub	sp, #44	; 0x2c
   d7cb6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d7cb8:	b12b      	cbz	r3, d7cc6 <_ZN9TCPClient9availableEv+0x1a>
   d7cba:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7cbe:	429a      	cmp	r2, r3
   d7cc0:	d101      	bne.n	d7cc6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7cc2:	f7ff ff6f 	bl	d7ba4 <_ZN9TCPClient12flush_bufferEv>
   d7cc6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d7cc8:	6808      	ldr	r0, [r1, #0]
   d7cca:	2800      	cmp	r0, #0
   d7ccc:	db18      	blt.n	d7d00 <_ZN9TCPClient9availableEv+0x54>
   d7cce:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d7cd2:	2d7f      	cmp	r5, #127	; 0x7f
   d7cd4:	d814      	bhi.n	d7d00 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7cd6:	3104      	adds	r1, #4
   d7cd8:	2308      	movs	r3, #8
   d7cda:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7cde:	4429      	add	r1, r5
   d7ce0:	f7fe fda6 	bl	d6830 <sock_recv>
            if (ret > 0) {
   d7ce4:	2800      	cmp	r0, #0
   d7ce6:	dd13      	ble.n	d7d10 <_ZN9TCPClient9availableEv+0x64>
   d7ce8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7cea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7cee:	b90a      	cbnz	r2, d7cf4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7cf0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7cf4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d7cf6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7cfa:	4410      	add	r0, r2
   d7cfc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7d00:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7d02:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d7d06:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d7d0a:	1ac0      	subs	r0, r0, r3
   d7d0c:	b00b      	add	sp, #44	; 0x2c
   d7d0e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7d10:	f7fe fefa 	bl	d6b08 <__errno>
   d7d14:	6803      	ldr	r3, [r0, #0]
   d7d16:	2b0b      	cmp	r3, #11
   d7d18:	d0f2      	beq.n	d7d00 <_ZN9TCPClient9availableEv+0x54>
   d7d1a:	f7fe fef5 	bl	d6b08 <__errno>
   d7d1e:	6803      	ldr	r3, [r0, #0]
   d7d20:	2b0b      	cmp	r3, #11
   d7d22:	d0ed      	beq.n	d7d00 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7d24:	2320      	movs	r3, #32
   d7d26:	2500      	movs	r5, #0
   d7d28:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7d2c:	f7fe feec 	bl	d6b08 <__errno>
   d7d30:	6803      	ldr	r3, [r0, #0]
   d7d32:	9301      	str	r3, [sp, #4]
   d7d34:	4b08      	ldr	r3, [pc, #32]	; (d7d58 <_ZN9TCPClient9availableEv+0xac>)
   d7d36:	4909      	ldr	r1, [pc, #36]	; (d7d5c <_ZN9TCPClient9availableEv+0xb0>)
   d7d38:	9300      	str	r3, [sp, #0]
   d7d3a:	aa02      	add	r2, sp, #8
   d7d3c:	462b      	mov	r3, r5
   d7d3e:	2032      	movs	r0, #50	; 0x32
   d7d40:	f7fe fe26 	bl	d6990 <log_message>
                    sock_close(d_->sock);
   d7d44:	6963      	ldr	r3, [r4, #20]
   d7d46:	6818      	ldr	r0, [r3, #0]
   d7d48:	f7fe fd62 	bl	d6810 <sock_close>
   d7d4c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7d4e:	f04f 32ff 	mov.w	r2, #4294967295
   d7d52:	601a      	str	r2, [r3, #0]
   d7d54:	e7d4      	b.n	d7d00 <_ZN9TCPClient9availableEv+0x54>
   d7d56:	bf00      	nop
   d7d58:	000db61f 	.word	0x000db61f
   d7d5c:	000db618 	.word	0x000db618

000d7d60 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7d60:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7d62:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d7d64:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7d66:	6818      	ldr	r0, [r3, #0]
   d7d68:	2800      	cmp	r0, #0
   d7d6a:	db01      	blt.n	d7d70 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7d6c:	f7fe fd50 	bl	d6810 <sock_close>
   d7d70:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7d72:	f04f 32ff 	mov.w	r2, #4294967295
   d7d76:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d7d78:	6960      	ldr	r0, [r4, #20]
   d7d7a:	2211      	movs	r2, #17
   d7d7c:	2100      	movs	r1, #0
   d7d7e:	308c      	adds	r0, #140	; 0x8c
   d7d80:	f002 fd2c 	bl	da7dc <memset>
    flush_buffer();
   d7d84:	4620      	mov	r0, r4
}
   d7d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d7d8a:	f7ff bf0b 	b.w	d7ba4 <_ZN9TCPClient12flush_bufferEv>

000d7d8e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7d8e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7d90:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d7d92:	4604      	mov	r4, r0
          total(0) {
   d7d94:	6001      	str	r1, [r0, #0]
   d7d96:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d7d9a:	3088      	adds	r0, #136	; 0x88
   d7d9c:	f7ff fbb0 	bl	d7500 <_ZN9IPAddressC1Ev>
}
   d7da0:	4620      	mov	r0, r4
   d7da2:	bd10      	pop	{r4, pc}

000d7da4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d7da4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7da6:	2300      	movs	r3, #0
   d7da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7dac:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7db0:	4a0e      	ldr	r2, [pc, #56]	; (d7dec <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d7db2:	6103      	str	r3, [r0, #16]
   d7db4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7db6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d7db8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7dba:	20ac      	movs	r0, #172	; 0xac
   d7dbc:	9101      	str	r1, [sp, #4]
   d7dbe:	f7fc f96a 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d7dc2:	1e05      	subs	r5, r0, #0
   d7dc4:	f105 060c 	add.w	r6, r5, #12
   d7dc8:	d008      	beq.n	d7ddc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d7dca:	2301      	movs	r3, #1
   d7dcc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7dd0:	4b07      	ldr	r3, [pc, #28]	; (d7df0 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7dd2:	9901      	ldr	r1, [sp, #4]
   d7dd4:	602b      	str	r3, [r5, #0]
   d7dd6:	4630      	mov	r0, r6
   d7dd8:	f7ff ffd9 	bl	d7d8e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7ddc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7dde:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7de2:	f7ff fedf 	bl	d7ba4 <_ZN9TCPClient12flush_bufferEv>
}
   d7de6:	b002      	add	sp, #8
   d7de8:	bd70      	pop	{r4, r5, r6, pc}
   d7dea:	bf00      	nop
   d7dec:	000db654 	.word	0x000db654
   d7df0:	000db638 	.word	0x000db638

000d7df4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7df4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7df6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d7dfa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7dfc:	f7ff ffd2 	bl	d7da4 <_ZN9TCPClientC1Ei>
}
   d7e00:	4620      	mov	r0, r4
   d7e02:	bd10      	pop	{r4, pc}

000d7e04 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7e04:	b510      	push	{r4, lr}
   d7e06:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7e08:	6800      	ldr	r0, [r0, #0]
   d7e0a:	2800      	cmp	r0, #0
   d7e0c:	db01      	blt.n	d7e12 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7e0e:	f7fe fcff 	bl	d6810 <sock_close>
    }
}
   d7e12:	4620      	mov	r0, r4
   d7e14:	bd10      	pop	{r4, pc}

000d7e16 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d7e16:	300c      	adds	r0, #12
   d7e18:	f7ff bff4 	b.w	d7e04 <_ZN9TCPClient4DataD1Ev>

000d7e1c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7e1c:	2200      	movs	r2, #0
   d7e1e:	6840      	ldr	r0, [r0, #4]
   d7e20:	4611      	mov	r1, r2
   d7e22:	f7fe bdf9 	b.w	d6a18 <network_ready>

000d7e26 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7e26:	2200      	movs	r2, #0
   d7e28:	6840      	ldr	r0, [r0, #4]
   d7e2a:	4611      	mov	r1, r2
   d7e2c:	f7fe be14 	b.w	d6a58 <network_listening>

000d7e30 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7e30:	2200      	movs	r2, #0
   d7e32:	6840      	ldr	r0, [r0, #4]
   d7e34:	4611      	mov	r1, r2
   d7e36:	f7fe be1f 	b.w	d6a78 <network_get_listen_timeout>

000d7e3a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7e3a:	6840      	ldr	r0, [r0, #4]
   d7e3c:	2200      	movs	r2, #0
   d7e3e:	f7fe be13 	b.w	d6a68 <network_set_listen_timeout>

000d7e42 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7e42:	6840      	ldr	r0, [r0, #4]
   d7e44:	2200      	movs	r2, #0
   d7e46:	f081 0101 	eor.w	r1, r1, #1
   d7e4a:	f7fe bdfd 	b.w	d6a48 <network_listen>

000d7e4e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7e4e:	2300      	movs	r3, #0
   d7e50:	6840      	ldr	r0, [r0, #4]
   d7e52:	461a      	mov	r2, r3
   d7e54:	4619      	mov	r1, r3
   d7e56:	f7fe bdef 	b.w	d6a38 <network_off>

000d7e5a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7e5a:	2300      	movs	r3, #0
   d7e5c:	6840      	ldr	r0, [r0, #4]
   d7e5e:	461a      	mov	r2, r3
   d7e60:	4619      	mov	r1, r3
   d7e62:	f7fe bde1 	b.w	d6a28 <network_on>

000d7e66 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7e66:	2200      	movs	r2, #0
   d7e68:	6840      	ldr	r0, [r0, #4]
   d7e6a:	4611      	mov	r1, r2
   d7e6c:	f7fe bdc4 	b.w	d69f8 <network_connecting>

000d7e70 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7e70:	6840      	ldr	r0, [r0, #4]
   d7e72:	2200      	movs	r2, #0
   d7e74:	2102      	movs	r1, #2
   d7e76:	f7fe bdc7 	b.w	d6a08 <network_disconnect>

000d7e7a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7e7a:	2300      	movs	r3, #0
   d7e7c:	6840      	ldr	r0, [r0, #4]
   d7e7e:	461a      	mov	r2, r3
   d7e80:	f7fe bdb2 	b.w	d69e8 <network_connect>

000d7e84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7e84:	4b02      	ldr	r3, [pc, #8]	; (d7e90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7e86:	2204      	movs	r2, #4
   d7e88:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7e8a:	4a02      	ldr	r2, [pc, #8]	; (d7e94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7e8c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7e8e:	4770      	bx	lr
   d7e90:	2003e7c8 	.word	0x2003e7c8
   d7e94:	000db6a0 	.word	0x000db6a0

000d7e98 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7e98:	2300      	movs	r3, #0
   d7e9a:	6840      	ldr	r0, [r0, #4]
   d7e9c:	461a      	mov	r2, r3
   d7e9e:	f7fe bda3 	b.w	d69e8 <network_connect>

000d7ea2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7ea2:	6840      	ldr	r0, [r0, #4]
   d7ea4:	2200      	movs	r2, #0
   d7ea6:	2102      	movs	r1, #2
   d7ea8:	f7fe bdae 	b.w	d6a08 <network_disconnect>

000d7eac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7eac:	2200      	movs	r2, #0
   d7eae:	6840      	ldr	r0, [r0, #4]
   d7eb0:	4611      	mov	r1, r2
   d7eb2:	f7fe bda1 	b.w	d69f8 <network_connecting>

000d7eb6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7eb6:	2200      	movs	r2, #0
   d7eb8:	6840      	ldr	r0, [r0, #4]
   d7eba:	4611      	mov	r1, r2
   d7ebc:	f7fe bdac 	b.w	d6a18 <network_ready>

000d7ec0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7ec0:	2300      	movs	r3, #0
   d7ec2:	6840      	ldr	r0, [r0, #4]
   d7ec4:	461a      	mov	r2, r3
   d7ec6:	4619      	mov	r1, r3
   d7ec8:	f7fe bdae 	b.w	d6a28 <network_on>

000d7ecc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7ecc:	2300      	movs	r3, #0
   d7ece:	6840      	ldr	r0, [r0, #4]
   d7ed0:	461a      	mov	r2, r3
   d7ed2:	4619      	mov	r1, r3
   d7ed4:	f7fe bdb0 	b.w	d6a38 <network_off>

000d7ed8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7ed8:	6840      	ldr	r0, [r0, #4]
   d7eda:	2200      	movs	r2, #0
   d7edc:	f081 0101 	eor.w	r1, r1, #1
   d7ee0:	f7fe bdb2 	b.w	d6a48 <network_listen>

000d7ee4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7ee4:	6840      	ldr	r0, [r0, #4]
   d7ee6:	2200      	movs	r2, #0
   d7ee8:	f7fe bdbe 	b.w	d6a68 <network_set_listen_timeout>

000d7eec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7eec:	2200      	movs	r2, #0
   d7eee:	6840      	ldr	r0, [r0, #4]
   d7ef0:	4611      	mov	r1, r2
   d7ef2:	f7fe bdc1 	b.w	d6a78 <network_get_listen_timeout>

000d7ef6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7ef6:	2200      	movs	r2, #0
   d7ef8:	6840      	ldr	r0, [r0, #4]
   d7efa:	4611      	mov	r1, r2
   d7efc:	f7fe bdac 	b.w	d6a58 <network_listening>

000d7f00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f04:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7f06:	b095      	sub	sp, #84	; 0x54
   d7f08:	4616      	mov	r6, r2
   d7f0a:	460d      	mov	r5, r1
   d7f0c:	4607      	mov	r7, r0
    IPAddress addr;
   d7f0e:	f7ff faf7 	bl	d7500 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7f12:	4621      	mov	r1, r4
   d7f14:	2218      	movs	r2, #24
   d7f16:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7f18:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7f1a:	f002 fc5f 	bl	da7dc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7f1e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7f20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7f24:	4621      	mov	r1, r4
   d7f26:	466b      	mov	r3, sp
   d7f28:	aa0c      	add	r2, sp, #48	; 0x30
   d7f2a:	4630      	mov	r0, r6
   d7f2c:	f7fe fb48 	bl	d65c0 <netdb_getaddrinfo>
    if (!r) {
   d7f30:	4604      	mov	r4, r0
   d7f32:	2800      	cmp	r0, #0
   d7f34:	d146      	bne.n	d7fc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f36:	4602      	mov	r2, r0
   d7f38:	2101      	movs	r1, #1
   d7f3a:	6868      	ldr	r0, [r5, #4]
   d7f3c:	f7fe fd6c 	bl	d6a18 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f40:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7f42:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f44:	4622      	mov	r2, r4
   d7f46:	6868      	ldr	r0, [r5, #4]
   d7f48:	f7fe fd66 	bl	d6a18 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f4c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7f4e:	4681      	mov	r9, r0
        bool ok = false;
   d7f50:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f52:	2e00      	cmp	r6, #0
   d7f54:	d036      	beq.n	d7fc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7f56:	2900      	cmp	r1, #0
   d7f58:	d134      	bne.n	d7fc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7f5a:	6873      	ldr	r3, [r6, #4]
   d7f5c:	2b02      	cmp	r3, #2
   d7f5e:	d003      	beq.n	d7f68 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7f60:	2b0a      	cmp	r3, #10
   d7f62:	d00b      	beq.n	d7f7c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f64:	69f6      	ldr	r6, [r6, #28]
   d7f66:	e7f4      	b.n	d7f52 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7f68:	f1b8 0f00 	cmp.w	r8, #0
   d7f6c:	d004      	beq.n	d7f78 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7f6e:	6971      	ldr	r1, [r6, #20]
   d7f70:	4638      	mov	r0, r7
   d7f72:	3104      	adds	r1, #4
   d7f74:	f7ff fb07 	bl	d7586 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7f78:	4641      	mov	r1, r8
   d7f7a:	e7f3      	b.n	d7f64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7f7c:	f1b9 0f00 	cmp.w	r9, #0
   d7f80:	d101      	bne.n	d7f86 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7f82:	4649      	mov	r1, r9
   d7f84:	e7ee      	b.n	d7f64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7f86:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7f88:	2210      	movs	r2, #16
   d7f8a:	a801      	add	r0, sp, #4
   d7f8c:	f002 fc26 	bl	da7dc <memset>
                    a.v = 6;
   d7f90:	2306      	movs	r3, #6
   d7f92:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7f96:	ad01      	add	r5, sp, #4
   d7f98:	f104 0308 	add.w	r3, r4, #8
   d7f9c:	3418      	adds	r4, #24
   d7f9e:	6818      	ldr	r0, [r3, #0]
   d7fa0:	6859      	ldr	r1, [r3, #4]
   d7fa2:	462a      	mov	r2, r5
   d7fa4:	c203      	stmia	r2!, {r0, r1}
   d7fa6:	3308      	adds	r3, #8
   d7fa8:	42a3      	cmp	r3, r4
   d7faa:	4615      	mov	r5, r2
   d7fac:	d1f7      	bne.n	d7f9e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7fae:	a901      	add	r1, sp, #4
   d7fb0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7fb2:	ad07      	add	r5, sp, #28
   d7fb4:	f7ff fab2 	bl	d751c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7fba:	1d3c      	adds	r4, r7, #4
   d7fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7fbe:	682b      	ldr	r3, [r5, #0]
   d7fc0:	7023      	strb	r3, [r4, #0]
   d7fc2:	e7de      	b.n	d7f82 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7fc4:	9800      	ldr	r0, [sp, #0]
   d7fc6:	f7fe faf3 	bl	d65b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7fca:	4638      	mov	r0, r7
   d7fcc:	b015      	add	sp, #84	; 0x54
   d7fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7fd4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7fd4:	4b02      	ldr	r3, [pc, #8]	; (d7fe0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7fd6:	4a03      	ldr	r2, [pc, #12]	; (d7fe4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7fd8:	601a      	str	r2, [r3, #0]
   d7fda:	2200      	movs	r2, #0
   d7fdc:	605a      	str	r2, [r3, #4]

} // spark
   d7fde:	4770      	bx	lr
   d7fe0:	2003e7d0 	.word	0x2003e7d0
   d7fe4:	000db6d4 	.word	0x000db6d4

000d7fe8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7fe8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7fea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7fec:	d902      	bls.n	d7ff4 <pinAvailable+0xc>
    return false;
   d7fee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7ff0:	b002      	add	sp, #8
   d7ff2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7ff4:	f1a0 030b 	sub.w	r3, r0, #11
   d7ff8:	2b02      	cmp	r3, #2
   d7ffa:	d81a      	bhi.n	d8032 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7ffc:	4c17      	ldr	r4, [pc, #92]	; (d805c <pinAvailable+0x74>)
   d7ffe:	7821      	ldrb	r1, [r4, #0]
   d8000:	f3bf 8f5b 	dmb	ish
   d8004:	f011 0101 	ands.w	r1, r1, #1
   d8008:	d10b      	bne.n	d8022 <pinAvailable+0x3a>
   d800a:	4620      	mov	r0, r4
   d800c:	9101      	str	r1, [sp, #4]
   d800e:	f7fc f853 	bl	d40b8 <__cxa_guard_acquire>
   d8012:	9901      	ldr	r1, [sp, #4]
   d8014:	b128      	cbz	r0, d8022 <pinAvailable+0x3a>
   d8016:	4812      	ldr	r0, [pc, #72]	; (d8060 <pinAvailable+0x78>)
   d8018:	f7fe fdca 	bl	d6bb0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d801c:	4620      	mov	r0, r4
   d801e:	f7fc f850 	bl	d40c2 <__cxa_guard_release>
   d8022:	4b0f      	ldr	r3, [pc, #60]	; (d8060 <pinAvailable+0x78>)
   d8024:	7818      	ldrb	r0, [r3, #0]
   d8026:	f7fe fc4b 	bl	d68c0 <hal_spi_is_enabled>
   d802a:	2800      	cmp	r0, #0
   d802c:	d1df      	bne.n	d7fee <pinAvailable+0x6>
  return true; // 'pin' is available
   d802e:	2001      	movs	r0, #1
   d8030:	e7de      	b.n	d7ff0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8032:	2801      	cmp	r0, #1
   d8034:	d809      	bhi.n	d804a <pinAvailable+0x62>
   d8036:	f000 f8a7 	bl	d8188 <_Z19__fetch_global_Wirev>
   d803a:	2100      	movs	r1, #0
   d803c:	7c00      	ldrb	r0, [r0, #16]
   d803e:	f7fe fbc7 	bl	d67d0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8042:	f080 0001 	eor.w	r0, r0, #1
   d8046:	b2c0      	uxtb	r0, r0
   d8048:	e7d2      	b.n	d7ff0 <pinAvailable+0x8>
   d804a:	3809      	subs	r0, #9
   d804c:	2801      	cmp	r0, #1
   d804e:	d8ee      	bhi.n	d802e <pinAvailable+0x46>
   d8050:	f7ff fb7e 	bl	d7750 <_Z22__fetch_global_Serial1v>
   d8054:	7c00      	ldrb	r0, [r0, #16]
   d8056:	f7fe fb6b 	bl	d6730 <hal_usart_is_enabled>
   d805a:	e7f2      	b.n	d8042 <pinAvailable+0x5a>
   d805c:	2003e63c 	.word	0x2003e63c
   d8060:	2003e640 	.word	0x2003e640

000d8064 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8064:	2823      	cmp	r0, #35	; 0x23
{
   d8066:	b538      	push	{r3, r4, r5, lr}
   d8068:	4604      	mov	r4, r0
   d806a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d806c:	d80a      	bhi.n	d8084 <pinMode+0x20>
   d806e:	29ff      	cmp	r1, #255	; 0xff
   d8070:	d008      	beq.n	d8084 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8072:	f7ff ffb9 	bl	d7fe8 <pinAvailable>
   d8076:	b128      	cbz	r0, d8084 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8078:	4629      	mov	r1, r5
   d807a:	4620      	mov	r0, r4
}
   d807c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8080:	f7fe baae 	b.w	d65e0 <HAL_Pin_Mode>
}
   d8084:	bd38      	pop	{r3, r4, r5, pc}

000d8086 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8086:	b538      	push	{r3, r4, r5, lr}
   d8088:	4604      	mov	r4, r0
   d808a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d808c:	f7fe fab0 	bl	d65f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8090:	28ff      	cmp	r0, #255	; 0xff
   d8092:	d010      	beq.n	d80b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8094:	2806      	cmp	r0, #6
   d8096:	d804      	bhi.n	d80a2 <digitalWrite+0x1c>
   d8098:	234d      	movs	r3, #77	; 0x4d
   d809a:	fa23 f000 	lsr.w	r0, r3, r0
   d809e:	07c3      	lsls	r3, r0, #31
   d80a0:	d409      	bmi.n	d80b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d80a2:	4620      	mov	r0, r4
   d80a4:	f7ff ffa0 	bl	d7fe8 <pinAvailable>
   d80a8:	b128      	cbz	r0, d80b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d80aa:	4629      	mov	r1, r5
   d80ac:	4620      	mov	r0, r4
}
   d80ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d80b2:	f7fe baa5 	b.w	d6600 <HAL_GPIO_Write>
}
   d80b6:	bd38      	pop	{r3, r4, r5, pc}

000d80b8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d80b8:	b510      	push	{r4, lr}
   d80ba:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d80bc:	f7fe fa98 	bl	d65f0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d80c0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d80c2:	b2db      	uxtb	r3, r3
   d80c4:	2b01      	cmp	r3, #1
   d80c6:	d908      	bls.n	d80da <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d80c8:	4620      	mov	r0, r4
   d80ca:	f7ff ff8d 	bl	d7fe8 <pinAvailable>
   d80ce:	b120      	cbz	r0, d80da <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d80d0:	4620      	mov	r0, r4
}
   d80d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d80d6:	f7fe ba9b 	b.w	d6610 <HAL_GPIO_Read>
}
   d80da:	2000      	movs	r0, #0
   d80dc:	bd10      	pop	{r4, pc}

000d80de <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d80de:	280d      	cmp	r0, #13
{
   d80e0:	b510      	push	{r4, lr}
   d80e2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d80e4:	bf9c      	itt	ls
   d80e6:	340e      	addls	r4, #14
   d80e8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d80ea:	4620      	mov	r0, r4
   d80ec:	f7ff ff7c 	bl	d7fe8 <pinAvailable>
   d80f0:	b150      	cbz	r0, d8108 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d80f2:	2103      	movs	r1, #3
   d80f4:	4620      	mov	r0, r4
   d80f6:	f7fe fa6b 	bl	d65d0 <HAL_Validate_Pin_Function>
   d80fa:	2803      	cmp	r0, #3
   d80fc:	d104      	bne.n	d8108 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d80fe:	4620      	mov	r0, r4
}
   d8100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8104:	f7fe ba8c 	b.w	d6620 <hal_adc_read>
}
   d8108:	2000      	movs	r0, #0
   d810a:	bd10      	pop	{r4, pc}

000d810c <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d810c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8110:	4690      	mov	r8, r2
   d8112:	461f      	mov	r7, r3
   d8114:	2400      	movs	r4, #0
   d8116:	4606      	mov	r6, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d8118:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   d811a:	f1b8 0f00 	cmp.w	r8, #0
   d811e:	d113      	bne.n	d8148 <shiftOut+0x3c>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d8120:	fa47 f104 	asr.w	r1, r7, r4
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d8124:	f001 0101 	and.w	r1, r1, #1
   d8128:	4630      	mov	r0, r6
   d812a:	f7ff ffac 	bl	d8086 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   d812e:	2101      	movs	r1, #1
   d8130:	4628      	mov	r0, r5
   d8132:	f7ff ffa8 	bl	d8086 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d8136:	3401      	adds	r4, #1
   d8138:	2100      	movs	r1, #0
   d813a:	4628      	mov	r0, r5
   d813c:	f7ff ffa3 	bl	d8086 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   d8140:	2c08      	cmp	r4, #8
   d8142:	d1ea      	bne.n	d811a <shiftOut+0xe>
  }
}
   d8144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d8148:	f1c4 0107 	rsb	r1, r4, #7
   d814c:	fa47 f101 	asr.w	r1, r7, r1
   d8150:	e7e8      	b.n	d8124 <shiftOut+0x18>

000d8152 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d8152:	f7fe ba6d 	b.w	d6630 <HAL_Pulse_In>
	...

000d8158 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8158:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d815a:	2300      	movs	r3, #0
   d815c:	2520      	movs	r5, #32
   d815e:	8043      	strh	r3, [r0, #2]
   d8160:	2314      	movs	r3, #20
{
   d8162:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8164:	8003      	strh	r3, [r0, #0]
   d8166:	6085      	str	r5, [r0, #8]
   d8168:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d816a:	4906      	ldr	r1, [pc, #24]	; (d8184 <_Z17acquireWireBufferv+0x2c>)
   d816c:	4628      	mov	r0, r5
   d816e:	f000 f83a 	bl	d81e6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8172:	4904      	ldr	r1, [pc, #16]	; (d8184 <_Z17acquireWireBufferv+0x2c>)
	};
   d8174:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8176:	4628      	mov	r0, r5
   d8178:	f000 f835 	bl	d81e6 <_ZnajRKSt9nothrow_t>
	};
   d817c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d817e:	4620      	mov	r0, r4
   d8180:	bd38      	pop	{r3, r4, r5, pc}
   d8182:	bf00      	nop
   d8184:	000db700 	.word	0x000db700

000d8188 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8188:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d818a:	4d0f      	ldr	r5, [pc, #60]	; (d81c8 <_Z19__fetch_global_Wirev+0x40>)
   d818c:	7829      	ldrb	r1, [r5, #0]
   d818e:	f3bf 8f5b 	dmb	ish
   d8192:	f011 0401 	ands.w	r4, r1, #1
{
   d8196:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8198:	d113      	bne.n	d81c2 <_Z19__fetch_global_Wirev+0x3a>
   d819a:	4628      	mov	r0, r5
   d819c:	f7fb ff8c 	bl	d40b8 <__cxa_guard_acquire>
   d81a0:	b178      	cbz	r0, d81c2 <_Z19__fetch_global_Wirev+0x3a>
   d81a2:	a801      	add	r0, sp, #4
   d81a4:	f7ff ffd8 	bl	d8158 <_Z17acquireWireBufferv>
   d81a8:	aa01      	add	r2, sp, #4
   d81aa:	4621      	mov	r1, r4
   d81ac:	4807      	ldr	r0, [pc, #28]	; (d81cc <_Z19__fetch_global_Wirev+0x44>)
   d81ae:	f7ff fb25 	bl	d77fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d81b2:	4628      	mov	r0, r5
   d81b4:	f7fb ff85 	bl	d40c2 <__cxa_guard_release>
   d81b8:	4a05      	ldr	r2, [pc, #20]	; (d81d0 <_Z19__fetch_global_Wirev+0x48>)
   d81ba:	4906      	ldr	r1, [pc, #24]	; (d81d4 <_Z19__fetch_global_Wirev+0x4c>)
   d81bc:	4803      	ldr	r0, [pc, #12]	; (d81cc <_Z19__fetch_global_Wirev+0x44>)
   d81be:	f000 f80b 	bl	d81d8 <__aeabi_atexit>
	return wire;
}
   d81c2:	4802      	ldr	r0, [pc, #8]	; (d81cc <_Z19__fetch_global_Wirev+0x44>)
   d81c4:	b007      	add	sp, #28
   d81c6:	bd30      	pop	{r4, r5, pc}
   d81c8:	2003e7dc 	.word	0x2003e7dc
   d81cc:	2003e7e0 	.word	0x2003e7e0
   d81d0:	2003e3d8 	.word	0x2003e3d8
   d81d4:	000d77a5 	.word	0x000d77a5

000d81d8 <__aeabi_atexit>:
   d81d8:	460b      	mov	r3, r1
   d81da:	4601      	mov	r1, r0
   d81dc:	4618      	mov	r0, r3
   d81de:	f002 bab3 	b.w	da748 <__cxa_atexit>

000d81e2 <_ZdlPvj>:
   d81e2:	f7fb bf5c 	b.w	d409e <_ZdlPv>

000d81e6 <_ZnajRKSt9nothrow_t>:
   d81e6:	f7fb bf58 	b.w	d409a <_Znaj>
	...

000d81ec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d81ec:	4901      	ldr	r1, [pc, #4]	; (d81f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d81ee:	f000 b8f9 	b.w	d83e4 <_ZNKSt9type_infoeqERKS_>
   d81f2:	bf00      	nop
   d81f4:	000db71c 	.word	0x000db71c

000d81f8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d81f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d81fa:	2400      	movs	r4, #0
   d81fc:	2310      	movs	r3, #16
   d81fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d8202:	6803      	ldr	r3, [r0, #0]
   d8204:	9400      	str	r4, [sp, #0]
   d8206:	699e      	ldr	r6, [r3, #24]
   d8208:	f88d 4004 	strb.w	r4, [sp, #4]
   d820c:	4615      	mov	r5, r2
   d820e:	466b      	mov	r3, sp
   d8210:	6812      	ldr	r2, [r2, #0]
   d8212:	47b0      	blx	r6
   d8214:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8218:	f003 0306 	and.w	r3, r3, #6
   d821c:	2b06      	cmp	r3, #6
   d821e:	bf03      	ittte	eq
   d8220:	9b00      	ldreq	r3, [sp, #0]
   d8222:	602b      	streq	r3, [r5, #0]
   d8224:	2001      	moveq	r0, #1
   d8226:	4620      	movne	r0, r4
   d8228:	b004      	add	sp, #16
   d822a:	bd70      	pop	{r4, r5, r6, pc}

000d822c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d822c:	9800      	ldr	r0, [sp, #0]
   d822e:	4290      	cmp	r0, r2
   d8230:	bf14      	ite	ne
   d8232:	2001      	movne	r0, #1
   d8234:	2006      	moveq	r0, #6
   d8236:	4770      	bx	lr

000d8238 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8238:	b510      	push	{r4, lr}
   d823a:	4b03      	ldr	r3, [pc, #12]	; (d8248 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d823c:	6003      	str	r3, [r0, #0]
   d823e:	4604      	mov	r4, r0
   d8240:	f000 f8cd 	bl	d83de <_ZNSt9type_infoD1Ev>
   d8244:	4620      	mov	r0, r4
   d8246:	bd10      	pop	{r4, pc}
   d8248:	000db75c 	.word	0x000db75c

000d824c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d824c:	b510      	push	{r4, lr}
   d824e:	4604      	mov	r4, r0
   d8250:	f7ff fff2 	bl	d8238 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8254:	4620      	mov	r0, r4
   d8256:	2108      	movs	r1, #8
   d8258:	f7ff ffc3 	bl	d81e2 <_ZdlPvj>
   d825c:	4620      	mov	r0, r4
   d825e:	bd10      	pop	{r4, pc}

000d8260 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8264:	461f      	mov	r7, r3
   d8266:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d826a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d826e:	4598      	cmp	r8, r3
   d8270:	4606      	mov	r6, r0
   d8272:	4615      	mov	r5, r2
   d8274:	d107      	bne.n	d8286 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8276:	9907      	ldr	r1, [sp, #28]
   d8278:	f000 f8b4 	bl	d83e4 <_ZNKSt9type_infoeqERKS_>
   d827c:	b118      	cbz	r0, d8286 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d827e:	7165      	strb	r5, [r4, #5]
   d8280:	2000      	movs	r0, #0
   d8282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8286:	4639      	mov	r1, r7
   d8288:	4630      	mov	r0, r6
   d828a:	f000 f8ab 	bl	d83e4 <_ZNKSt9type_infoeqERKS_>
   d828e:	2800      	cmp	r0, #0
   d8290:	d0f6      	beq.n	d8280 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d8292:	2301      	movs	r3, #1
   d8294:	f8c4 8000 	str.w	r8, [r4]
   d8298:	7125      	strb	r5, [r4, #4]
   d829a:	71a3      	strb	r3, [r4, #6]
   d829c:	e7f0      	b.n	d8280 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d829e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d829e:	b538      	push	{r3, r4, r5, lr}
   d82a0:	4615      	mov	r5, r2
   d82a2:	461c      	mov	r4, r3
   d82a4:	f000 f89e 	bl	d83e4 <_ZNKSt9type_infoeqERKS_>
   d82a8:	b120      	cbz	r0, d82b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d82aa:	2308      	movs	r3, #8
   d82ac:	60e3      	str	r3, [r4, #12]
   d82ae:	2306      	movs	r3, #6
   d82b0:	6025      	str	r5, [r4, #0]
   d82b2:	7123      	strb	r3, [r4, #4]
   d82b4:	bd38      	pop	{r3, r4, r5, pc}

000d82b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d82b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d82b8:	4605      	mov	r5, r0
   d82ba:	460c      	mov	r4, r1
   d82bc:	9201      	str	r2, [sp, #4]
   d82be:	461e      	mov	r6, r3
   d82c0:	f000 f890 	bl	d83e4 <_ZNKSt9type_infoeqERKS_>
   d82c4:	b950      	cbnz	r0, d82dc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d82c6:	2e03      	cmp	r6, #3
   d82c8:	d808      	bhi.n	d82dc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d82ca:	6823      	ldr	r3, [r4, #0]
   d82cc:	9a01      	ldr	r2, [sp, #4]
   d82ce:	695b      	ldr	r3, [r3, #20]
   d82d0:	4629      	mov	r1, r5
   d82d2:	4620      	mov	r0, r4
   d82d4:	b002      	add	sp, #8
   d82d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d82da:	4718      	bx	r3
   d82dc:	b002      	add	sp, #8
   d82de:	bd70      	pop	{r4, r5, r6, pc}

000d82e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d82e0:	b510      	push	{r4, lr}
   d82e2:	4b03      	ldr	r3, [pc, #12]	; (d82f0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d82e4:	6003      	str	r3, [r0, #0]
   d82e6:	4604      	mov	r4, r0
   d82e8:	f7ff ffa6 	bl	d8238 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d82ec:	4620      	mov	r0, r4
   d82ee:	bd10      	pop	{r4, pc}
   d82f0:	000db7bc 	.word	0x000db7bc

000d82f4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d82f4:	b510      	push	{r4, lr}
   d82f6:	4604      	mov	r4, r0
   d82f8:	f7ff fff2 	bl	d82e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d82fc:	4620      	mov	r0, r4
   d82fe:	210c      	movs	r1, #12
   d8300:	f7ff ff6f 	bl	d81e2 <_ZdlPvj>
   d8304:	4620      	mov	r0, r4
   d8306:	bd10      	pop	{r4, pc}

000d8308 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d8308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d830a:	9f08      	ldr	r7, [sp, #32]
   d830c:	4297      	cmp	r7, r2
   d830e:	4605      	mov	r5, r0
   d8310:	460e      	mov	r6, r1
   d8312:	4614      	mov	r4, r2
   d8314:	d00a      	beq.n	d832c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d8316:	68a8      	ldr	r0, [r5, #8]
   d8318:	6802      	ldr	r2, [r0, #0]
   d831a:	9708      	str	r7, [sp, #32]
   d831c:	6a15      	ldr	r5, [r2, #32]
   d831e:	4631      	mov	r1, r6
   d8320:	4622      	mov	r2, r4
   d8322:	46ac      	mov	ip, r5
   d8324:	b003      	add	sp, #12
   d8326:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d832a:	4760      	bx	ip
   d832c:	4619      	mov	r1, r3
   d832e:	9301      	str	r3, [sp, #4]
   d8330:	f000 f858 	bl	d83e4 <_ZNKSt9type_infoeqERKS_>
   d8334:	9b01      	ldr	r3, [sp, #4]
   d8336:	2800      	cmp	r0, #0
   d8338:	d0ed      	beq.n	d8316 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d833a:	2006      	movs	r0, #6
   d833c:	b003      	add	sp, #12
   d833e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8340 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d8340:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8344:	460d      	mov	r5, r1
   d8346:	4619      	mov	r1, r3
   d8348:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d834c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d8350:	4681      	mov	r9, r0
   d8352:	4617      	mov	r7, r2
   d8354:	4698      	mov	r8, r3
   d8356:	f000 f845 	bl	d83e4 <_ZNKSt9type_infoeqERKS_>
   d835a:	b190      	cbz	r0, d8382 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d835c:	2d00      	cmp	r5, #0
   d835e:	6034      	str	r4, [r6, #0]
   d8360:	7137      	strb	r7, [r6, #4]
   d8362:	db09      	blt.n	d8378 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8364:	1961      	adds	r1, r4, r5
   d8366:	458a      	cmp	sl, r1
   d8368:	bf0c      	ite	eq
   d836a:	2106      	moveq	r1, #6
   d836c:	2101      	movne	r1, #1
   d836e:	71b1      	strb	r1, [r6, #6]
   d8370:	2000      	movs	r0, #0
   d8372:	b001      	add	sp, #4
   d8374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8378:	3502      	adds	r5, #2
   d837a:	d1f9      	bne.n	d8370 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d837c:	2301      	movs	r3, #1
   d837e:	71b3      	strb	r3, [r6, #6]
   d8380:	e7f6      	b.n	d8370 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8382:	4554      	cmp	r4, sl
   d8384:	d106      	bne.n	d8394 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8386:	4659      	mov	r1, fp
   d8388:	4648      	mov	r0, r9
   d838a:	f000 f82b 	bl	d83e4 <_ZNKSt9type_infoeqERKS_>
   d838e:	b108      	cbz	r0, d8394 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8390:	7177      	strb	r7, [r6, #5]
   d8392:	e7ed      	b.n	d8370 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8394:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8398:	6803      	ldr	r3, [r0, #0]
   d839a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d839e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d83a2:	69dc      	ldr	r4, [r3, #28]
   d83a4:	463a      	mov	r2, r7
   d83a6:	4643      	mov	r3, r8
   d83a8:	4629      	mov	r1, r5
   d83aa:	46a4      	mov	ip, r4
   d83ac:	b001      	add	sp, #4
   d83ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d83b2:	4760      	bx	ip

000d83b4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d83b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d83b8:	4607      	mov	r7, r0
   d83ba:	460c      	mov	r4, r1
   d83bc:	4615      	mov	r5, r2
   d83be:	461e      	mov	r6, r3
   d83c0:	f7ff ff6d 	bl	d829e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d83c4:	b948      	cbnz	r0, d83da <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d83c6:	68b8      	ldr	r0, [r7, #8]
   d83c8:	6803      	ldr	r3, [r0, #0]
   d83ca:	699f      	ldr	r7, [r3, #24]
   d83cc:	462a      	mov	r2, r5
   d83ce:	4633      	mov	r3, r6
   d83d0:	4621      	mov	r1, r4
   d83d2:	46bc      	mov	ip, r7
   d83d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d83d8:	4760      	bx	ip
   d83da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d83de <_ZNSt9type_infoD1Ev>:
   d83de:	4770      	bx	lr

000d83e0 <_ZNKSt9type_info14__is_pointer_pEv>:
   d83e0:	2000      	movs	r0, #0
   d83e2:	4770      	bx	lr

000d83e4 <_ZNKSt9type_infoeqERKS_>:
   d83e4:	4281      	cmp	r1, r0
   d83e6:	b508      	push	{r3, lr}
   d83e8:	d00e      	beq.n	d8408 <_ZNKSt9type_infoeqERKS_+0x24>
   d83ea:	6840      	ldr	r0, [r0, #4]
   d83ec:	7803      	ldrb	r3, [r0, #0]
   d83ee:	2b2a      	cmp	r3, #42	; 0x2a
   d83f0:	d00c      	beq.n	d840c <_ZNKSt9type_infoeqERKS_+0x28>
   d83f2:	6849      	ldr	r1, [r1, #4]
   d83f4:	780b      	ldrb	r3, [r1, #0]
   d83f6:	2b2a      	cmp	r3, #42	; 0x2a
   d83f8:	bf08      	it	eq
   d83fa:	3101      	addeq	r1, #1
   d83fc:	f002 fa1a 	bl	da834 <strcmp>
   d8400:	fab0 f080 	clz	r0, r0
   d8404:	0940      	lsrs	r0, r0, #5
   d8406:	bd08      	pop	{r3, pc}
   d8408:	2001      	movs	r0, #1
   d840a:	e7fc      	b.n	d8406 <_ZNKSt9type_infoeqERKS_+0x22>
   d840c:	2000      	movs	r0, #0
   d840e:	e7fa      	b.n	d8406 <_ZNKSt9type_infoeqERKS_+0x22>

000d8410 <pow>:
   d8410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8414:	ed2d 8b02 	vpush	{d8}
   d8418:	b08d      	sub	sp, #52	; 0x34
   d841a:	ec57 6b10 	vmov	r6, r7, d0
   d841e:	ec55 4b11 	vmov	r4, r5, d1
   d8422:	f000 f9ad 	bl	d8780 <__ieee754_pow>
   d8426:	4bae      	ldr	r3, [pc, #696]	; (d86e0 <pow+0x2d0>)
   d8428:	eeb0 8a40 	vmov.f32	s16, s0
   d842c:	eef0 8a60 	vmov.f32	s17, s1
   d8430:	f993 9000 	ldrsb.w	r9, [r3]
   d8434:	f1b9 3fff 	cmp.w	r9, #4294967295
   d8438:	d037      	beq.n	d84aa <pow+0x9a>
   d843a:	4622      	mov	r2, r4
   d843c:	462b      	mov	r3, r5
   d843e:	4620      	mov	r0, r4
   d8440:	4629      	mov	r1, r5
   d8442:	f001 fdd9 	bl	d9ff8 <__aeabi_dcmpun>
   d8446:	4683      	mov	fp, r0
   d8448:	bb78      	cbnz	r0, d84aa <pow+0x9a>
   d844a:	4632      	mov	r2, r6
   d844c:	463b      	mov	r3, r7
   d844e:	4630      	mov	r0, r6
   d8450:	4639      	mov	r1, r7
   d8452:	f001 fdd1 	bl	d9ff8 <__aeabi_dcmpun>
   d8456:	4680      	mov	r8, r0
   d8458:	2800      	cmp	r0, #0
   d845a:	f040 8093 	bne.w	d8584 <pow+0x174>
   d845e:	f04f 0a00 	mov.w	sl, #0
   d8462:	f04f 0b00 	mov.w	fp, #0
   d8466:	4630      	mov	r0, r6
   d8468:	4639      	mov	r1, r7
   d846a:	4652      	mov	r2, sl
   d846c:	465b      	mov	r3, fp
   d846e:	f001 fd91 	bl	d9f94 <__aeabi_dcmpeq>
   d8472:	b318      	cbz	r0, d84bc <pow+0xac>
   d8474:	4652      	mov	r2, sl
   d8476:	465b      	mov	r3, fp
   d8478:	4620      	mov	r0, r4
   d847a:	4629      	mov	r1, r5
   d847c:	f001 fd8a 	bl	d9f94 <__aeabi_dcmpeq>
   d8480:	9000      	str	r0, [sp, #0]
   d8482:	2800      	cmp	r0, #0
   d8484:	d057      	beq.n	d8536 <pow+0x126>
   d8486:	4b97      	ldr	r3, [pc, #604]	; (d86e4 <pow+0x2d4>)
   d8488:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d848c:	2201      	movs	r2, #1
   d848e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8492:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8496:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d849a:	9202      	str	r2, [sp, #8]
   d849c:	9303      	str	r3, [sp, #12]
   d849e:	f1b9 0f00 	cmp.w	r9, #0
   d84a2:	f000 8089 	beq.w	d85b8 <pow+0x1a8>
   d84a6:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d86d0 <pow+0x2c0>
   d84aa:	eeb0 0a48 	vmov.f32	s0, s16
   d84ae:	eef0 0a68 	vmov.f32	s1, s17
   d84b2:	b00d      	add	sp, #52	; 0x34
   d84b4:	ecbd 8b02 	vpop	{d8}
   d84b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d84bc:	eeb0 0a48 	vmov.f32	s0, s16
   d84c0:	eef0 0a68 	vmov.f32	s1, s17
   d84c4:	f001 f804 	bl	d94d0 <finite>
   d84c8:	4680      	mov	r8, r0
   d84ca:	2800      	cmp	r0, #0
   d84cc:	f000 8082 	beq.w	d85d4 <pow+0x1c4>
   d84d0:	f04f 0800 	mov.w	r8, #0
   d84d4:	f04f 0900 	mov.w	r9, #0
   d84d8:	ec51 0b18 	vmov	r0, r1, d8
   d84dc:	4642      	mov	r2, r8
   d84de:	464b      	mov	r3, r9
   d84e0:	f001 fd58 	bl	d9f94 <__aeabi_dcmpeq>
   d84e4:	2800      	cmp	r0, #0
   d84e6:	d0e0      	beq.n	d84aa <pow+0x9a>
   d84e8:	ec47 6b10 	vmov	d0, r6, r7
   d84ec:	f000 fff0 	bl	d94d0 <finite>
   d84f0:	2800      	cmp	r0, #0
   d84f2:	d0da      	beq.n	d84aa <pow+0x9a>
   d84f4:	ec45 4b10 	vmov	d0, r4, r5
   d84f8:	f000 ffea 	bl	d94d0 <finite>
   d84fc:	2800      	cmp	r0, #0
   d84fe:	d0d4      	beq.n	d84aa <pow+0x9a>
   d8500:	4b77      	ldr	r3, [pc, #476]	; (d86e0 <pow+0x2d0>)
   d8502:	4a78      	ldr	r2, [pc, #480]	; (d86e4 <pow+0x2d4>)
   d8504:	f993 3000 	ldrsb.w	r3, [r3]
   d8508:	9203      	str	r2, [sp, #12]
   d850a:	2104      	movs	r1, #4
   d850c:	2200      	movs	r2, #0
   d850e:	2b02      	cmp	r3, #2
   d8510:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8514:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8518:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d851c:	9102      	str	r1, [sp, #8]
   d851e:	920a      	str	r2, [sp, #40]	; 0x28
   d8520:	d004      	beq.n	d852c <pow+0x11c>
   d8522:	a802      	add	r0, sp, #8
   d8524:	f000 ffe0 	bl	d94e8 <matherr>
   d8528:	2800      	cmp	r0, #0
   d852a:	d14a      	bne.n	d85c2 <pow+0x1b2>
   d852c:	f7fe faec 	bl	d6b08 <__errno>
   d8530:	2322      	movs	r3, #34	; 0x22
   d8532:	6003      	str	r3, [r0, #0]
   d8534:	e045      	b.n	d85c2 <pow+0x1b2>
   d8536:	ec45 4b10 	vmov	d0, r4, r5
   d853a:	f000 ffc9 	bl	d94d0 <finite>
   d853e:	2800      	cmp	r0, #0
   d8540:	d0b3      	beq.n	d84aa <pow+0x9a>
   d8542:	4652      	mov	r2, sl
   d8544:	465b      	mov	r3, fp
   d8546:	4620      	mov	r0, r4
   d8548:	4629      	mov	r1, r5
   d854a:	f001 fd2d 	bl	d9fa8 <__aeabi_dcmplt>
   d854e:	2800      	cmp	r0, #0
   d8550:	d0ab      	beq.n	d84aa <pow+0x9a>
   d8552:	4b63      	ldr	r3, [pc, #396]	; (d86e0 <pow+0x2d0>)
   d8554:	9900      	ldr	r1, [sp, #0]
   d8556:	4a63      	ldr	r2, [pc, #396]	; (d86e4 <pow+0x2d4>)
   d8558:	f993 3000 	ldrsb.w	r3, [r3]
   d855c:	910a      	str	r1, [sp, #40]	; 0x28
   d855e:	2101      	movs	r1, #1
   d8560:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8564:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8568:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d856c:	2b00      	cmp	r3, #0
   d856e:	d16f      	bne.n	d8650 <pow+0x240>
   d8570:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d8574:	a802      	add	r0, sp, #8
   d8576:	f000 ffb7 	bl	d94e8 <matherr>
   d857a:	2800      	cmp	r0, #0
   d857c:	d06e      	beq.n	d865c <pow+0x24c>
   d857e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8580:	b32b      	cbz	r3, d85ce <pow+0x1be>
   d8582:	e020      	b.n	d85c6 <pow+0x1b6>
   d8584:	2200      	movs	r2, #0
   d8586:	2300      	movs	r3, #0
   d8588:	4620      	mov	r0, r4
   d858a:	4629      	mov	r1, r5
   d858c:	f001 fd02 	bl	d9f94 <__aeabi_dcmpeq>
   d8590:	2800      	cmp	r0, #0
   d8592:	d08a      	beq.n	d84aa <pow+0x9a>
   d8594:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d86d0 <pow+0x2c0>
   d8598:	4b52      	ldr	r3, [pc, #328]	; (d86e4 <pow+0x2d4>)
   d859a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d859e:	2201      	movs	r2, #1
   d85a0:	f1b9 0f02 	cmp.w	r9, #2
   d85a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d85a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d85ac:	ed8d 8b08 	vstr	d8, [sp, #32]
   d85b0:	9202      	str	r2, [sp, #8]
   d85b2:	9303      	str	r3, [sp, #12]
   d85b4:	f43f af79 	beq.w	d84aa <pow+0x9a>
   d85b8:	a802      	add	r0, sp, #8
   d85ba:	f000 ff95 	bl	d94e8 <matherr>
   d85be:	2800      	cmp	r0, #0
   d85c0:	d051      	beq.n	d8666 <pow+0x256>
   d85c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d85c4:	b11b      	cbz	r3, d85ce <pow+0x1be>
   d85c6:	f7fe fa9f 	bl	d6b08 <__errno>
   d85ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d85cc:	6003      	str	r3, [r0, #0]
   d85ce:	ed9d 8b08 	vldr	d8, [sp, #32]
   d85d2:	e76a      	b.n	d84aa <pow+0x9a>
   d85d4:	ec47 6b10 	vmov	d0, r6, r7
   d85d8:	f000 ff7a 	bl	d94d0 <finite>
   d85dc:	2800      	cmp	r0, #0
   d85de:	f43f af77 	beq.w	d84d0 <pow+0xc0>
   d85e2:	ec45 4b10 	vmov	d0, r4, r5
   d85e6:	f000 ff73 	bl	d94d0 <finite>
   d85ea:	2800      	cmp	r0, #0
   d85ec:	f43f af70 	beq.w	d84d0 <pow+0xc0>
   d85f0:	ec53 2b18 	vmov	r2, r3, d8
   d85f4:	ee18 0a10 	vmov	r0, s16
   d85f8:	4619      	mov	r1, r3
   d85fa:	f001 fcfd 	bl	d9ff8 <__aeabi_dcmpun>
   d85fe:	4b38      	ldr	r3, [pc, #224]	; (d86e0 <pow+0x2d0>)
   d8600:	2800      	cmp	r0, #0
   d8602:	f040 8096 	bne.w	d8732 <pow+0x322>
   d8606:	f993 8000 	ldrsb.w	r8, [r3]
   d860a:	900a      	str	r0, [sp, #40]	; 0x28
   d860c:	2303      	movs	r3, #3
   d860e:	9302      	str	r3, [sp, #8]
   d8610:	4b34      	ldr	r3, [pc, #208]	; (d86e4 <pow+0x2d4>)
   d8612:	9303      	str	r3, [sp, #12]
   d8614:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8618:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d861c:	f1b8 0f00 	cmp.w	r8, #0
   d8620:	d126      	bne.n	d8670 <pow+0x260>
   d8622:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d86f4 <pow+0x2e4>
   d8626:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d862a:	4652      	mov	r2, sl
   d862c:	465b      	mov	r3, fp
   d862e:	4630      	mov	r0, r6
   d8630:	4639      	mov	r1, r7
   d8632:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d8636:	f001 fcb7 	bl	d9fa8 <__aeabi_dcmplt>
   d863a:	bb48      	cbnz	r0, d8690 <pow+0x280>
   d863c:	a802      	add	r0, sp, #8
   d863e:	f000 ff53 	bl	d94e8 <matherr>
   d8642:	2800      	cmp	r0, #0
   d8644:	d19b      	bne.n	d857e <pow+0x16e>
   d8646:	f7fe fa5f 	bl	d6b08 <__errno>
   d864a:	2322      	movs	r3, #34	; 0x22
   d864c:	6003      	str	r3, [r0, #0]
   d864e:	e796      	b.n	d857e <pow+0x16e>
   d8650:	4925      	ldr	r1, [pc, #148]	; (d86e8 <pow+0x2d8>)
   d8652:	2000      	movs	r0, #0
   d8654:	2b02      	cmp	r3, #2
   d8656:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d865a:	d18b      	bne.n	d8574 <pow+0x164>
   d865c:	f7fe fa54 	bl	d6b08 <__errno>
   d8660:	2321      	movs	r3, #33	; 0x21
   d8662:	6003      	str	r3, [r0, #0]
   d8664:	e78b      	b.n	d857e <pow+0x16e>
   d8666:	f7fe fa4f 	bl	d6b08 <__errno>
   d866a:	2321      	movs	r3, #33	; 0x21
   d866c:	6003      	str	r3, [r0, #0]
   d866e:	e7a8      	b.n	d85c2 <pow+0x1b2>
   d8670:	ed9f 7b19 	vldr	d7, [pc, #100]	; d86d8 <pow+0x2c8>
   d8674:	4652      	mov	r2, sl
   d8676:	465b      	mov	r3, fp
   d8678:	4630      	mov	r0, r6
   d867a:	4639      	mov	r1, r7
   d867c:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8680:	f001 fc92 	bl	d9fa8 <__aeabi_dcmplt>
   d8684:	2800      	cmp	r0, #0
   d8686:	d137      	bne.n	d86f8 <pow+0x2e8>
   d8688:	f1b8 0f02 	cmp.w	r8, #2
   d868c:	d0db      	beq.n	d8646 <pow+0x236>
   d868e:	e7d5      	b.n	d863c <pow+0x22c>
   d8690:	4b16      	ldr	r3, [pc, #88]	; (d86ec <pow+0x2dc>)
   d8692:	2200      	movs	r2, #0
   d8694:	4620      	mov	r0, r4
   d8696:	4629      	mov	r1, r5
   d8698:	f001 fa14 	bl	d9ac4 <__aeabi_dmul>
   d869c:	4602      	mov	r2, r0
   d869e:	460b      	mov	r3, r1
   d86a0:	ec43 2b10 	vmov	d0, r2, r3
   d86a4:	e9cd 2300 	strd	r2, r3, [sp]
   d86a8:	f000 ff2a 	bl	d9500 <rint>
   d86ac:	e9dd 2300 	ldrd	r2, r3, [sp]
   d86b0:	ec51 0b10 	vmov	r0, r1, d0
   d86b4:	f001 fc6e 	bl	d9f94 <__aeabi_dcmpeq>
   d86b8:	2800      	cmp	r0, #0
   d86ba:	d136      	bne.n	d872a <pow+0x31a>
   d86bc:	4b0c      	ldr	r3, [pc, #48]	; (d86f0 <pow+0x2e0>)
   d86be:	4908      	ldr	r1, [pc, #32]	; (d86e0 <pow+0x2d0>)
   d86c0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d86c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d86c8:	f991 8000 	ldrsb.w	r8, [r1]
   d86cc:	e7dc      	b.n	d8688 <pow+0x278>
   d86ce:	bf00      	nop
   d86d0:	00000000 	.word	0x00000000
   d86d4:	3ff00000 	.word	0x3ff00000
   d86d8:	00000000 	.word	0x00000000
   d86dc:	7ff00000 	.word	0x7ff00000
   d86e0:	2003e36c 	.word	0x2003e36c
   d86e4:	000db7f8 	.word	0x000db7f8
   d86e8:	fff00000 	.word	0xfff00000
   d86ec:	3fe00000 	.word	0x3fe00000
   d86f0:	c7efffff 	.word	0xc7efffff
   d86f4:	47efffff 	.word	0x47efffff
   d86f8:	4b1c      	ldr	r3, [pc, #112]	; (d876c <pow+0x35c>)
   d86fa:	2200      	movs	r2, #0
   d86fc:	4620      	mov	r0, r4
   d86fe:	4629      	mov	r1, r5
   d8700:	f001 f9e0 	bl	d9ac4 <__aeabi_dmul>
   d8704:	4602      	mov	r2, r0
   d8706:	460b      	mov	r3, r1
   d8708:	ec43 2b10 	vmov	d0, r2, r3
   d870c:	e9cd 2300 	strd	r2, r3, [sp]
   d8710:	f000 fef6 	bl	d9500 <rint>
   d8714:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8718:	ec51 0b10 	vmov	r0, r1, d0
   d871c:	f001 fc3a 	bl	d9f94 <__aeabi_dcmpeq>
   d8720:	b918      	cbnz	r0, d872a <pow+0x31a>
   d8722:	4b13      	ldr	r3, [pc, #76]	; (d8770 <pow+0x360>)
   d8724:	2200      	movs	r2, #0
   d8726:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d872a:	4b12      	ldr	r3, [pc, #72]	; (d8774 <pow+0x364>)
   d872c:	f993 8000 	ldrsb.w	r8, [r3]
   d8730:	e7aa      	b.n	d8688 <pow+0x278>
   d8732:	f993 9000 	ldrsb.w	r9, [r3]
   d8736:	4b10      	ldr	r3, [pc, #64]	; (d8778 <pow+0x368>)
   d8738:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d873c:	2201      	movs	r2, #1
   d873e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d8742:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d8746:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d874a:	f1b9 0f00 	cmp.w	r9, #0
   d874e:	f43f af0f 	beq.w	d8570 <pow+0x160>
   d8752:	4652      	mov	r2, sl
   d8754:	465b      	mov	r3, fp
   d8756:	4650      	mov	r0, sl
   d8758:	4659      	mov	r1, fp
   d875a:	f001 fadd 	bl	d9d18 <__aeabi_ddiv>
   d875e:	f1b9 0f02 	cmp.w	r9, #2
   d8762:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d8766:	f43f af79 	beq.w	d865c <pow+0x24c>
   d876a:	e703      	b.n	d8574 <pow+0x164>
   d876c:	3fe00000 	.word	0x3fe00000
   d8770:	fff00000 	.word	0xfff00000
   d8774:	2003e36c 	.word	0x2003e36c
   d8778:	000db7f8 	.word	0x000db7f8
   d877c:	00000000 	.word	0x00000000

000d8780 <__ieee754_pow>:
   d8780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8784:	ec57 6b11 	vmov	r6, r7, d1
   d8788:	ed2d 8b0a 	vpush	{d8-d12}
   d878c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d8790:	ea5a 0206 	orrs.w	r2, sl, r6
   d8794:	b089      	sub	sp, #36	; 0x24
   d8796:	d03d      	beq.n	d8814 <__ieee754_pow+0x94>
   d8798:	ec55 4b10 	vmov	r4, r5, d0
   d879c:	4976      	ldr	r1, [pc, #472]	; (d8978 <__ieee754_pow+0x1f8>)
   d879e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d87a2:	4588      	cmp	r8, r1
   d87a4:	ee10 2a10 	vmov	r2, s0
   d87a8:	46a9      	mov	r9, r5
   d87aa:	dc2c      	bgt.n	d8806 <__ieee754_pow+0x86>
   d87ac:	ee11 3a10 	vmov	r3, s2
   d87b0:	46bb      	mov	fp, r7
   d87b2:	d03a      	beq.n	d882a <__ieee754_pow+0xaa>
   d87b4:	458a      	cmp	sl, r1
   d87b6:	dc26      	bgt.n	d8806 <__ieee754_pow+0x86>
   d87b8:	496f      	ldr	r1, [pc, #444]	; (d8978 <__ieee754_pow+0x1f8>)
   d87ba:	458a      	cmp	sl, r1
   d87bc:	d021      	beq.n	d8802 <__ieee754_pow+0x82>
   d87be:	f1b9 0f00 	cmp.w	r9, #0
   d87c2:	db3d      	blt.n	d8840 <__ieee754_pow+0xc0>
   d87c4:	2100      	movs	r1, #0
   d87c6:	9103      	str	r1, [sp, #12]
   d87c8:	2b00      	cmp	r3, #0
   d87ca:	d155      	bne.n	d8878 <__ieee754_pow+0xf8>
   d87cc:	4b6a      	ldr	r3, [pc, #424]	; (d8978 <__ieee754_pow+0x1f8>)
   d87ce:	459a      	cmp	sl, r3
   d87d0:	f000 80a8 	beq.w	d8924 <__ieee754_pow+0x1a4>
   d87d4:	4b69      	ldr	r3, [pc, #420]	; (d897c <__ieee754_pow+0x1fc>)
   d87d6:	459a      	cmp	sl, r3
   d87d8:	f000 80b6 	beq.w	d8948 <__ieee754_pow+0x1c8>
   d87dc:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d87e0:	f000 8501 	beq.w	d91e6 <__ieee754_pow+0xa66>
   d87e4:	4b66      	ldr	r3, [pc, #408]	; (d8980 <__ieee754_pow+0x200>)
   d87e6:	459b      	cmp	fp, r3
   d87e8:	d146      	bne.n	d8878 <__ieee754_pow+0xf8>
   d87ea:	f1b9 0f00 	cmp.w	r9, #0
   d87ee:	db43      	blt.n	d8878 <__ieee754_pow+0xf8>
   d87f0:	ec45 4b10 	vmov	d0, r4, r5
   d87f4:	b009      	add	sp, #36	; 0x24
   d87f6:	ecbd 8b0a 	vpop	{d8-d12}
   d87fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d87fe:	f000 bd99 	b.w	d9334 <__ieee754_sqrt>
   d8802:	2b00      	cmp	r3, #0
   d8804:	d0db      	beq.n	d87be <__ieee754_pow+0x3e>
   d8806:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d880a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d880e:	ea58 0302 	orrs.w	r3, r8, r2
   d8812:	d10d      	bne.n	d8830 <__ieee754_pow+0xb0>
   d8814:	ed9f 7b54 	vldr	d7, [pc, #336]	; d8968 <__ieee754_pow+0x1e8>
   d8818:	ed8d 7b00 	vstr	d7, [sp]
   d881c:	ed9d 0b00 	vldr	d0, [sp]
   d8820:	b009      	add	sp, #36	; 0x24
   d8822:	ecbd 8b0a 	vpop	{d8-d12}
   d8826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d882a:	b90c      	cbnz	r4, d8830 <__ieee754_pow+0xb0>
   d882c:	45c2      	cmp	sl, r8
   d882e:	ddc3      	ble.n	d87b8 <__ieee754_pow+0x38>
   d8830:	4854      	ldr	r0, [pc, #336]	; (d8984 <__ieee754_pow+0x204>)
   d8832:	b009      	add	sp, #36	; 0x24
   d8834:	ecbd 8b0a 	vpop	{d8-d12}
   d8838:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d883c:	f000 be58 	b.w	d94f0 <nan>
   d8840:	4951      	ldr	r1, [pc, #324]	; (d8988 <__ieee754_pow+0x208>)
   d8842:	458a      	cmp	sl, r1
   d8844:	f300 8087 	bgt.w	d8956 <__ieee754_pow+0x1d6>
   d8848:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d884c:	458a      	cmp	sl, r1
   d884e:	dd0f      	ble.n	d8870 <__ieee754_pow+0xf0>
   d8850:	ea4f 512a 	mov.w	r1, sl, asr #20
   d8854:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d8858:	2914      	cmp	r1, #20
   d885a:	f340 84ce 	ble.w	d91fa <__ieee754_pow+0xa7a>
   d885e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d8862:	fa23 f001 	lsr.w	r0, r3, r1
   d8866:	fa00 f101 	lsl.w	r1, r0, r1
   d886a:	4299      	cmp	r1, r3
   d886c:	f000 8520 	beq.w	d92b0 <__ieee754_pow+0xb30>
   d8870:	2100      	movs	r1, #0
   d8872:	9103      	str	r1, [sp, #12]
   d8874:	2b00      	cmp	r3, #0
   d8876:	d0ad      	beq.n	d87d4 <__ieee754_pow+0x54>
   d8878:	ec45 4b10 	vmov	d0, r4, r5
   d887c:	9206      	str	r2, [sp, #24]
   d887e:	f000 fe1d 	bl	d94bc <fabs>
   d8882:	9a06      	ldr	r2, [sp, #24]
   d8884:	ed8d 0b00 	vstr	d0, [sp]
   d8888:	bb5a      	cbnz	r2, d88e2 <__ieee754_pow+0x162>
   d888a:	f1b8 0f00 	cmp.w	r8, #0
   d888e:	d004      	beq.n	d889a <__ieee754_pow+0x11a>
   d8890:	4b3a      	ldr	r3, [pc, #232]	; (d897c <__ieee754_pow+0x1fc>)
   d8892:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d8896:	429a      	cmp	r2, r3
   d8898:	d123      	bne.n	d88e2 <__ieee754_pow+0x162>
   d889a:	f1bb 0f00 	cmp.w	fp, #0
   d889e:	da07      	bge.n	d88b0 <__ieee754_pow+0x130>
   d88a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d88a4:	4935      	ldr	r1, [pc, #212]	; (d897c <__ieee754_pow+0x1fc>)
   d88a6:	2000      	movs	r0, #0
   d88a8:	f001 fa36 	bl	d9d18 <__aeabi_ddiv>
   d88ac:	e9cd 0100 	strd	r0, r1, [sp]
   d88b0:	f1b9 0f00 	cmp.w	r9, #0
   d88b4:	dab2      	bge.n	d881c <__ieee754_pow+0x9c>
   d88b6:	9b03      	ldr	r3, [sp, #12]
   d88b8:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d88bc:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d88c0:	ea58 0303 	orrs.w	r3, r8, r3
   d88c4:	f040 84be 	bne.w	d9244 <__ieee754_pow+0xac4>
   d88c8:	e9dd 2300 	ldrd	r2, r3, [sp]
   d88cc:	4610      	mov	r0, r2
   d88ce:	4619      	mov	r1, r3
   d88d0:	f000 ff40 	bl	d9754 <__aeabi_dsub>
   d88d4:	4602      	mov	r2, r0
   d88d6:	460b      	mov	r3, r1
   d88d8:	f001 fa1e 	bl	d9d18 <__aeabi_ddiv>
   d88dc:	e9cd 0100 	strd	r0, r1, [sp]
   d88e0:	e79c      	b.n	d881c <__ieee754_pow+0x9c>
   d88e2:	9a03      	ldr	r2, [sp, #12]
   d88e4:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d88e8:	3b01      	subs	r3, #1
   d88ea:	9306      	str	r3, [sp, #24]
   d88ec:	4313      	orrs	r3, r2
   d88ee:	d035      	beq.n	d895c <__ieee754_pow+0x1dc>
   d88f0:	4b26      	ldr	r3, [pc, #152]	; (d898c <__ieee754_pow+0x20c>)
   d88f2:	459a      	cmp	sl, r3
   d88f4:	dd4e      	ble.n	d8994 <__ieee754_pow+0x214>
   d88f6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d88fa:	459a      	cmp	sl, r3
   d88fc:	4b24      	ldr	r3, [pc, #144]	; (d8990 <__ieee754_pow+0x210>)
   d88fe:	f340 83ed 	ble.w	d90dc <__ieee754_pow+0x95c>
   d8902:	4598      	cmp	r8, r3
   d8904:	f340 836b 	ble.w	d8fde <__ieee754_pow+0x85e>
   d8908:	f1bb 0f00 	cmp.w	fp, #0
   d890c:	f340 836b 	ble.w	d8fe6 <__ieee754_pow+0x866>
   d8910:	a317      	add	r3, pc, #92	; (adr r3, d8970 <__ieee754_pow+0x1f0>)
   d8912:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8916:	4610      	mov	r0, r2
   d8918:	4619      	mov	r1, r3
   d891a:	f001 f8d3 	bl	d9ac4 <__aeabi_dmul>
   d891e:	e9cd 0100 	strd	r0, r1, [sp]
   d8922:	e77b      	b.n	d881c <__ieee754_pow+0x9c>
   d8924:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d8928:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d892c:	4313      	orrs	r3, r2
   d892e:	f43f af71 	beq.w	d8814 <__ieee754_pow+0x94>
   d8932:	4b17      	ldr	r3, [pc, #92]	; (d8990 <__ieee754_pow+0x210>)
   d8934:	4598      	cmp	r8, r3
   d8936:	f340 8388 	ble.w	d904a <__ieee754_pow+0x8ca>
   d893a:	f1bb 0f00 	cmp.w	fp, #0
   d893e:	f2c0 8352 	blt.w	d8fe6 <__ieee754_pow+0x866>
   d8942:	e9cd 6700 	strd	r6, r7, [sp]
   d8946:	e769      	b.n	d881c <__ieee754_pow+0x9c>
   d8948:	f1bb 0f00 	cmp.w	fp, #0
   d894c:	f2c0 8441 	blt.w	d91d2 <__ieee754_pow+0xa52>
   d8950:	e9cd 4500 	strd	r4, r5, [sp]
   d8954:	e762      	b.n	d881c <__ieee754_pow+0x9c>
   d8956:	2102      	movs	r1, #2
   d8958:	9103      	str	r1, [sp, #12]
   d895a:	e735      	b.n	d87c8 <__ieee754_pow+0x48>
   d895c:	4622      	mov	r2, r4
   d895e:	462b      	mov	r3, r5
   d8960:	e7b4      	b.n	d88cc <__ieee754_pow+0x14c>
   d8962:	bf00      	nop
   d8964:	f3af 8000 	nop.w
   d8968:	00000000 	.word	0x00000000
   d896c:	3ff00000 	.word	0x3ff00000
   d8970:	8800759c 	.word	0x8800759c
   d8974:	7e37e43c 	.word	0x7e37e43c
   d8978:	7ff00000 	.word	0x7ff00000
   d897c:	3ff00000 	.word	0x3ff00000
   d8980:	3fe00000 	.word	0x3fe00000
   d8984:	000db7fc 	.word	0x000db7fc
   d8988:	433fffff 	.word	0x433fffff
   d898c:	41e00000 	.word	0x41e00000
   d8990:	3fefffff 	.word	0x3fefffff
   d8994:	4be4      	ldr	r3, [pc, #912]	; (d8d28 <__ieee754_pow+0x5a8>)
   d8996:	ea09 0303 	and.w	r3, r9, r3
   d899a:	2b00      	cmp	r3, #0
   d899c:	f040 8416 	bne.w	d91cc <__ieee754_pow+0xa4c>
   d89a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d89a4:	4be1      	ldr	r3, [pc, #900]	; (d8d2c <__ieee754_pow+0x5ac>)
   d89a6:	2200      	movs	r2, #0
   d89a8:	f001 f88c 	bl	d9ac4 <__aeabi_dmul>
   d89ac:	e9cd 0100 	strd	r0, r1, [sp]
   d89b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d89b4:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d89b8:	ea4f 5328 	mov.w	r3, r8, asr #20
   d89bc:	49dc      	ldr	r1, [pc, #880]	; (d8d30 <__ieee754_pow+0x5b0>)
   d89be:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d89c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d89c6:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d89ca:	1818      	adds	r0, r3, r0
   d89cc:	428a      	cmp	r2, r1
   d89ce:	9007      	str	r0, [sp, #28]
   d89d0:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d89d4:	f340 83e9 	ble.w	d91aa <__ieee754_pow+0xa2a>
   d89d8:	4bd6      	ldr	r3, [pc, #856]	; (d8d34 <__ieee754_pow+0x5b4>)
   d89da:	429a      	cmp	r2, r3
   d89dc:	f340 843e 	ble.w	d925c <__ieee754_pow+0xadc>
   d89e0:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d8cd0 <__ieee754_pow+0x550>
   d89e4:	eeb0 ba47 	vmov.f32	s22, s14
   d89e8:	eef0 ba67 	vmov.f32	s23, s15
   d89ec:	eeb0 ca47 	vmov.f32	s24, s14
   d89f0:	eef0 ca67 	vmov.f32	s25, s15
   d89f4:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d8cd8 <__ieee754_pow+0x558>
   d89f8:	3001      	adds	r0, #1
   d89fa:	ec54 3b17 	vmov	r3, r4, d7
   d89fe:	9007      	str	r0, [sp, #28]
   d8a00:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d8a04:	f04f 0900 	mov.w	r9, #0
   d8a08:	e9dd ab00 	ldrd	sl, fp, [sp]
   d8a0c:	ec44 3b18 	vmov	d8, r3, r4
   d8a10:	461a      	mov	r2, r3
   d8a12:	4650      	mov	r0, sl
   d8a14:	4623      	mov	r3, r4
   d8a16:	4641      	mov	r1, r8
   d8a18:	f000 fe9c 	bl	d9754 <__aeabi_dsub>
   d8a1c:	ec53 2b18 	vmov	r2, r3, d8
   d8a20:	4604      	mov	r4, r0
   d8a22:	460d      	mov	r5, r1
   d8a24:	4650      	mov	r0, sl
   d8a26:	4641      	mov	r1, r8
   d8a28:	f000 fe96 	bl	d9758 <__adddf3>
   d8a2c:	4602      	mov	r2, r0
   d8a2e:	460b      	mov	r3, r1
   d8a30:	2000      	movs	r0, #0
   d8a32:	49c1      	ldr	r1, [pc, #772]	; (d8d38 <__ieee754_pow+0x5b8>)
   d8a34:	f001 f970 	bl	d9d18 <__aeabi_ddiv>
   d8a38:	ec45 4b1a 	vmov	d10, r4, r5
   d8a3c:	ec41 0b19 	vmov	d9, r0, r1
   d8a40:	ec51 0b1a 	vmov	r0, r1, d10
   d8a44:	ec53 2b19 	vmov	r2, r3, d9
   d8a48:	f001 f83c 	bl	d9ac4 <__aeabi_dmul>
   d8a4c:	46c3      	mov	fp, r8
   d8a4e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d8a52:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d8a56:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d8a5a:	eb03 0509 	add.w	r5, r3, r9
   d8a5e:	460a      	mov	r2, r1
   d8a60:	2300      	movs	r3, #0
   d8a62:	4601      	mov	r1, r0
   d8a64:	e9cd 1200 	strd	r1, r2, [sp]
   d8a68:	9300      	str	r3, [sp, #0]
   d8a6a:	e9dd 8900 	ldrd	r8, r9, [sp]
   d8a6e:	2400      	movs	r4, #0
   d8a70:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d8a74:	462b      	mov	r3, r5
   d8a76:	4622      	mov	r2, r4
   d8a78:	4640      	mov	r0, r8
   d8a7a:	4649      	mov	r1, r9
   d8a7c:	f001 f822 	bl	d9ac4 <__aeabi_dmul>
   d8a80:	4602      	mov	r2, r0
   d8a82:	460b      	mov	r3, r1
   d8a84:	ec51 0b1a 	vmov	r0, r1, d10
   d8a88:	f000 fe64 	bl	d9754 <__aeabi_dsub>
   d8a8c:	ec41 0b17 	vmov	d7, r0, r1
   d8a90:	ec53 2b18 	vmov	r2, r3, d8
   d8a94:	4620      	mov	r0, r4
   d8a96:	4629      	mov	r1, r5
   d8a98:	ec55 4b17 	vmov	r4, r5, d7
   d8a9c:	f000 fe5a 	bl	d9754 <__aeabi_dsub>
   d8aa0:	4602      	mov	r2, r0
   d8aa2:	460b      	mov	r3, r1
   d8aa4:	4650      	mov	r0, sl
   d8aa6:	4659      	mov	r1, fp
   d8aa8:	f000 fe54 	bl	d9754 <__aeabi_dsub>
   d8aac:	4642      	mov	r2, r8
   d8aae:	464b      	mov	r3, r9
   d8ab0:	f001 f808 	bl	d9ac4 <__aeabi_dmul>
   d8ab4:	4602      	mov	r2, r0
   d8ab6:	460b      	mov	r3, r1
   d8ab8:	4620      	mov	r0, r4
   d8aba:	4629      	mov	r1, r5
   d8abc:	f000 fe4a 	bl	d9754 <__aeabi_dsub>
   d8ac0:	ec53 2b19 	vmov	r2, r3, d9
   d8ac4:	f000 fffe 	bl	d9ac4 <__aeabi_dmul>
   d8ac8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d8acc:	4604      	mov	r4, r0
   d8ace:	460d      	mov	r5, r1
   d8ad0:	4652      	mov	r2, sl
   d8ad2:	465b      	mov	r3, fp
   d8ad4:	4650      	mov	r0, sl
   d8ad6:	4659      	mov	r1, fp
   d8ad8:	f000 fff4 	bl	d9ac4 <__aeabi_dmul>
   d8adc:	a380      	add	r3, pc, #512	; (adr r3, d8ce0 <__ieee754_pow+0x560>)
   d8ade:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ae2:	ec45 4b1a 	vmov	d10, r4, r5
   d8ae6:	4604      	mov	r4, r0
   d8ae8:	460d      	mov	r5, r1
   d8aea:	f000 ffeb 	bl	d9ac4 <__aeabi_dmul>
   d8aee:	a37e      	add	r3, pc, #504	; (adr r3, d8ce8 <__ieee754_pow+0x568>)
   d8af0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8af4:	f000 fe30 	bl	d9758 <__adddf3>
   d8af8:	4622      	mov	r2, r4
   d8afa:	462b      	mov	r3, r5
   d8afc:	f000 ffe2 	bl	d9ac4 <__aeabi_dmul>
   d8b00:	a37b      	add	r3, pc, #492	; (adr r3, d8cf0 <__ieee754_pow+0x570>)
   d8b02:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b06:	f000 fe27 	bl	d9758 <__adddf3>
   d8b0a:	4622      	mov	r2, r4
   d8b0c:	462b      	mov	r3, r5
   d8b0e:	f000 ffd9 	bl	d9ac4 <__aeabi_dmul>
   d8b12:	a379      	add	r3, pc, #484	; (adr r3, d8cf8 <__ieee754_pow+0x578>)
   d8b14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b18:	f000 fe1e 	bl	d9758 <__adddf3>
   d8b1c:	4622      	mov	r2, r4
   d8b1e:	462b      	mov	r3, r5
   d8b20:	f000 ffd0 	bl	d9ac4 <__aeabi_dmul>
   d8b24:	a376      	add	r3, pc, #472	; (adr r3, d8d00 <__ieee754_pow+0x580>)
   d8b26:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b2a:	f000 fe15 	bl	d9758 <__adddf3>
   d8b2e:	4622      	mov	r2, r4
   d8b30:	462b      	mov	r3, r5
   d8b32:	f000 ffc7 	bl	d9ac4 <__aeabi_dmul>
   d8b36:	a374      	add	r3, pc, #464	; (adr r3, d8d08 <__ieee754_pow+0x588>)
   d8b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b3c:	f000 fe0c 	bl	d9758 <__adddf3>
   d8b40:	4622      	mov	r2, r4
   d8b42:	462b      	mov	r3, r5
   d8b44:	4604      	mov	r4, r0
   d8b46:	460d      	mov	r5, r1
   d8b48:	4610      	mov	r0, r2
   d8b4a:	4619      	mov	r1, r3
   d8b4c:	f000 ffba 	bl	d9ac4 <__aeabi_dmul>
   d8b50:	4602      	mov	r2, r0
   d8b52:	460b      	mov	r3, r1
   d8b54:	4620      	mov	r0, r4
   d8b56:	4629      	mov	r1, r5
   d8b58:	f000 ffb4 	bl	d9ac4 <__aeabi_dmul>
   d8b5c:	4642      	mov	r2, r8
   d8b5e:	4604      	mov	r4, r0
   d8b60:	460d      	mov	r5, r1
   d8b62:	464b      	mov	r3, r9
   d8b64:	4650      	mov	r0, sl
   d8b66:	4659      	mov	r1, fp
   d8b68:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d8b6c:	f000 fdf4 	bl	d9758 <__adddf3>
   d8b70:	ec53 2b1a 	vmov	r2, r3, d10
   d8b74:	f000 ffa6 	bl	d9ac4 <__aeabi_dmul>
   d8b78:	4622      	mov	r2, r4
   d8b7a:	462b      	mov	r3, r5
   d8b7c:	f000 fdec 	bl	d9758 <__adddf3>
   d8b80:	4642      	mov	r2, r8
   d8b82:	4604      	mov	r4, r0
   d8b84:	460d      	mov	r5, r1
   d8b86:	464b      	mov	r3, r9
   d8b88:	4640      	mov	r0, r8
   d8b8a:	4649      	mov	r1, r9
   d8b8c:	f000 ff9a 	bl	d9ac4 <__aeabi_dmul>
   d8b90:	ec45 4b19 	vmov	d9, r4, r5
   d8b94:	4b69      	ldr	r3, [pc, #420]	; (d8d3c <__ieee754_pow+0x5bc>)
   d8b96:	2200      	movs	r2, #0
   d8b98:	4682      	mov	sl, r0
   d8b9a:	468b      	mov	fp, r1
   d8b9c:	f000 fddc 	bl	d9758 <__adddf3>
   d8ba0:	ec53 2b19 	vmov	r2, r3, d9
   d8ba4:	f000 fdd8 	bl	d9758 <__adddf3>
   d8ba8:	9c00      	ldr	r4, [sp, #0]
   d8baa:	460d      	mov	r5, r1
   d8bac:	4622      	mov	r2, r4
   d8bae:	462b      	mov	r3, r5
   d8bb0:	4640      	mov	r0, r8
   d8bb2:	4649      	mov	r1, r9
   d8bb4:	f000 ff86 	bl	d9ac4 <__aeabi_dmul>
   d8bb8:	4b60      	ldr	r3, [pc, #384]	; (d8d3c <__ieee754_pow+0x5bc>)
   d8bba:	4680      	mov	r8, r0
   d8bbc:	4689      	mov	r9, r1
   d8bbe:	2200      	movs	r2, #0
   d8bc0:	4620      	mov	r0, r4
   d8bc2:	4629      	mov	r1, r5
   d8bc4:	f000 fdc6 	bl	d9754 <__aeabi_dsub>
   d8bc8:	4652      	mov	r2, sl
   d8bca:	465b      	mov	r3, fp
   d8bcc:	f000 fdc2 	bl	d9754 <__aeabi_dsub>
   d8bd0:	4602      	mov	r2, r0
   d8bd2:	460b      	mov	r3, r1
   d8bd4:	ec51 0b19 	vmov	r0, r1, d9
   d8bd8:	f000 fdbc 	bl	d9754 <__aeabi_dsub>
   d8bdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8be0:	f000 ff70 	bl	d9ac4 <__aeabi_dmul>
   d8be4:	ec49 8b18 	vmov	d8, r8, r9
   d8be8:	4622      	mov	r2, r4
   d8bea:	4680      	mov	r8, r0
   d8bec:	4689      	mov	r9, r1
   d8bee:	462b      	mov	r3, r5
   d8bf0:	ec51 0b1a 	vmov	r0, r1, d10
   d8bf4:	f000 ff66 	bl	d9ac4 <__aeabi_dmul>
   d8bf8:	4602      	mov	r2, r0
   d8bfa:	460b      	mov	r3, r1
   d8bfc:	4640      	mov	r0, r8
   d8bfe:	4649      	mov	r1, r9
   d8c00:	f000 fdaa 	bl	d9758 <__adddf3>
   d8c04:	4682      	mov	sl, r0
   d8c06:	468b      	mov	fp, r1
   d8c08:	4652      	mov	r2, sl
   d8c0a:	465b      	mov	r3, fp
   d8c0c:	ec51 0b18 	vmov	r0, r1, d8
   d8c10:	f000 fda2 	bl	d9758 <__adddf3>
   d8c14:	9c00      	ldr	r4, [sp, #0]
   d8c16:	a33e      	add	r3, pc, #248	; (adr r3, d8d10 <__ieee754_pow+0x590>)
   d8c18:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c1c:	4620      	mov	r0, r4
   d8c1e:	460d      	mov	r5, r1
   d8c20:	f000 ff50 	bl	d9ac4 <__aeabi_dmul>
   d8c24:	ec53 2b18 	vmov	r2, r3, d8
   d8c28:	4680      	mov	r8, r0
   d8c2a:	4689      	mov	r9, r1
   d8c2c:	4620      	mov	r0, r4
   d8c2e:	4629      	mov	r1, r5
   d8c30:	f000 fd90 	bl	d9754 <__aeabi_dsub>
   d8c34:	4602      	mov	r2, r0
   d8c36:	460b      	mov	r3, r1
   d8c38:	4650      	mov	r0, sl
   d8c3a:	4659      	mov	r1, fp
   d8c3c:	f000 fd8a 	bl	d9754 <__aeabi_dsub>
   d8c40:	a335      	add	r3, pc, #212	; (adr r3, d8d18 <__ieee754_pow+0x598>)
   d8c42:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c46:	f000 ff3d 	bl	d9ac4 <__aeabi_dmul>
   d8c4a:	ec49 8b19 	vmov	d9, r8, r9
   d8c4e:	a334      	add	r3, pc, #208	; (adr r3, d8d20 <__ieee754_pow+0x5a0>)
   d8c50:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c54:	4680      	mov	r8, r0
   d8c56:	4689      	mov	r9, r1
   d8c58:	4620      	mov	r0, r4
   d8c5a:	4629      	mov	r1, r5
   d8c5c:	f000 ff32 	bl	d9ac4 <__aeabi_dmul>
   d8c60:	4602      	mov	r2, r0
   d8c62:	460b      	mov	r3, r1
   d8c64:	4640      	mov	r0, r8
   d8c66:	4649      	mov	r1, r9
   d8c68:	f000 fd76 	bl	d9758 <__adddf3>
   d8c6c:	ec53 2b1c 	vmov	r2, r3, d12
   d8c70:	f000 fd72 	bl	d9758 <__adddf3>
   d8c74:	4682      	mov	sl, r0
   d8c76:	9807      	ldr	r0, [sp, #28]
   d8c78:	468b      	mov	fp, r1
   d8c7a:	f000 feb9 	bl	d99f0 <__aeabi_i2d>
   d8c7e:	4652      	mov	r2, sl
   d8c80:	4680      	mov	r8, r0
   d8c82:	4689      	mov	r9, r1
   d8c84:	465b      	mov	r3, fp
   d8c86:	ec51 0b19 	vmov	r0, r1, d9
   d8c8a:	f000 fd65 	bl	d9758 <__adddf3>
   d8c8e:	ec53 2b1b 	vmov	r2, r3, d11
   d8c92:	f000 fd61 	bl	d9758 <__adddf3>
   d8c96:	4642      	mov	r2, r8
   d8c98:	464b      	mov	r3, r9
   d8c9a:	f000 fd5d 	bl	d9758 <__adddf3>
   d8c9e:	9c00      	ldr	r4, [sp, #0]
   d8ca0:	4642      	mov	r2, r8
   d8ca2:	464b      	mov	r3, r9
   d8ca4:	4620      	mov	r0, r4
   d8ca6:	460d      	mov	r5, r1
   d8ca8:	f000 fd54 	bl	d9754 <__aeabi_dsub>
   d8cac:	ec53 2b1b 	vmov	r2, r3, d11
   d8cb0:	f000 fd50 	bl	d9754 <__aeabi_dsub>
   d8cb4:	ec53 2b19 	vmov	r2, r3, d9
   d8cb8:	f000 fd4c 	bl	d9754 <__aeabi_dsub>
   d8cbc:	4602      	mov	r2, r0
   d8cbe:	460b      	mov	r3, r1
   d8cc0:	4650      	mov	r0, sl
   d8cc2:	4659      	mov	r1, fp
   d8cc4:	f000 fd46 	bl	d9754 <__aeabi_dsub>
   d8cc8:	4682      	mov	sl, r0
   d8cca:	468b      	mov	fp, r1
   d8ccc:	e038      	b.n	d8d40 <__ieee754_pow+0x5c0>
   d8cce:	bf00      	nop
	...
   d8cdc:	3ff00000 	.word	0x3ff00000
   d8ce0:	4a454eef 	.word	0x4a454eef
   d8ce4:	3fca7e28 	.word	0x3fca7e28
   d8ce8:	93c9db65 	.word	0x93c9db65
   d8cec:	3fcd864a 	.word	0x3fcd864a
   d8cf0:	a91d4101 	.word	0xa91d4101
   d8cf4:	3fd17460 	.word	0x3fd17460
   d8cf8:	518f264d 	.word	0x518f264d
   d8cfc:	3fd55555 	.word	0x3fd55555
   d8d00:	db6fabff 	.word	0xdb6fabff
   d8d04:	3fdb6db6 	.word	0x3fdb6db6
   d8d08:	33333303 	.word	0x33333303
   d8d0c:	3fe33333 	.word	0x3fe33333
   d8d10:	e0000000 	.word	0xe0000000
   d8d14:	3feec709 	.word	0x3feec709
   d8d18:	dc3a03fd 	.word	0xdc3a03fd
   d8d1c:	3feec709 	.word	0x3feec709
   d8d20:	145b01f5 	.word	0x145b01f5
   d8d24:	be3e2fe0 	.word	0xbe3e2fe0
   d8d28:	7ff00000 	.word	0x7ff00000
   d8d2c:	43400000 	.word	0x43400000
   d8d30:	0003988e 	.word	0x0003988e
   d8d34:	000bb679 	.word	0x000bb679
   d8d38:	3ff00000 	.word	0x3ff00000
   d8d3c:	40080000 	.word	0x40080000
   d8d40:	9b03      	ldr	r3, [sp, #12]
   d8d42:	9a06      	ldr	r2, [sp, #24]
   d8d44:	3b01      	subs	r3, #1
   d8d46:	4313      	orrs	r3, r2
   d8d48:	f040 8178 	bne.w	d903c <__ieee754_pow+0x8bc>
   d8d4c:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d9060 <__ieee754_pow+0x8e0>
   d8d50:	eeb0 9a47 	vmov.f32	s18, s14
   d8d54:	eef0 9a67 	vmov.f32	s19, s15
   d8d58:	2300      	movs	r3, #0
   d8d5a:	e9cd 6700 	strd	r6, r7, [sp]
   d8d5e:	9300      	str	r3, [sp, #0]
   d8d60:	e9dd 8900 	ldrd	r8, r9, [sp]
   d8d64:	4630      	mov	r0, r6
   d8d66:	4642      	mov	r2, r8
   d8d68:	4639      	mov	r1, r7
   d8d6a:	464b      	mov	r3, r9
   d8d6c:	f000 fcf2 	bl	d9754 <__aeabi_dsub>
   d8d70:	4622      	mov	r2, r4
   d8d72:	462b      	mov	r3, r5
   d8d74:	f000 fea6 	bl	d9ac4 <__aeabi_dmul>
   d8d78:	4632      	mov	r2, r6
   d8d7a:	463b      	mov	r3, r7
   d8d7c:	4606      	mov	r6, r0
   d8d7e:	460f      	mov	r7, r1
   d8d80:	4650      	mov	r0, sl
   d8d82:	4659      	mov	r1, fp
   d8d84:	f000 fe9e 	bl	d9ac4 <__aeabi_dmul>
   d8d88:	4602      	mov	r2, r0
   d8d8a:	460b      	mov	r3, r1
   d8d8c:	4630      	mov	r0, r6
   d8d8e:	4639      	mov	r1, r7
   d8d90:	f000 fce2 	bl	d9758 <__adddf3>
   d8d94:	4642      	mov	r2, r8
   d8d96:	4682      	mov	sl, r0
   d8d98:	468b      	mov	fp, r1
   d8d9a:	464b      	mov	r3, r9
   d8d9c:	4620      	mov	r0, r4
   d8d9e:	4629      	mov	r1, r5
   d8da0:	f000 fe90 	bl	d9ac4 <__aeabi_dmul>
   d8da4:	4606      	mov	r6, r0
   d8da6:	460f      	mov	r7, r1
   d8da8:	463b      	mov	r3, r7
   d8daa:	4650      	mov	r0, sl
   d8dac:	4659      	mov	r1, fp
   d8dae:	4632      	mov	r2, r6
   d8db0:	f000 fcd2 	bl	d9758 <__adddf3>
   d8db4:	4bc4      	ldr	r3, [pc, #784]	; (d90c8 <__ieee754_pow+0x948>)
   d8db6:	4299      	cmp	r1, r3
   d8db8:	4604      	mov	r4, r0
   d8dba:	460d      	mov	r5, r1
   d8dbc:	4688      	mov	r8, r1
   d8dbe:	f340 8117 	ble.w	d8ff0 <__ieee754_pow+0x870>
   d8dc2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d8dc6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d8dca:	4303      	orrs	r3, r0
   d8dcc:	f040 822a 	bne.w	d9224 <__ieee754_pow+0xaa4>
   d8dd0:	a3a5      	add	r3, pc, #660	; (adr r3, d9068 <__ieee754_pow+0x8e8>)
   d8dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dd6:	4650      	mov	r0, sl
   d8dd8:	4659      	mov	r1, fp
   d8dda:	f000 fcbd 	bl	d9758 <__adddf3>
   d8dde:	4632      	mov	r2, r6
   d8de0:	ec41 0b18 	vmov	d8, r0, r1
   d8de4:	463b      	mov	r3, r7
   d8de6:	4620      	mov	r0, r4
   d8de8:	4629      	mov	r1, r5
   d8dea:	f000 fcb3 	bl	d9754 <__aeabi_dsub>
   d8dee:	4602      	mov	r2, r0
   d8df0:	460b      	mov	r3, r1
   d8df2:	ec51 0b18 	vmov	r0, r1, d8
   d8df6:	f001 f8f5 	bl	d9fe4 <__aeabi_dcmpgt>
   d8dfa:	2800      	cmp	r0, #0
   d8dfc:	f040 8212 	bne.w	d9224 <__ieee754_pow+0xaa4>
   d8e00:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d8e04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d8e08:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d8e0c:	fa42 f303 	asr.w	r3, r2, r3
   d8e10:	4443      	add	r3, r8
   d8e12:	49ae      	ldr	r1, [pc, #696]	; (d90cc <__ieee754_pow+0x94c>)
   d8e14:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d8e18:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d8e1c:	fa41 fc02 	asr.w	ip, r1, r2
   d8e20:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d8e24:	ea23 010c 	bic.w	r1, r3, ip
   d8e28:	f1c2 0414 	rsb	r4, r2, #20
   d8e2c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d8e30:	f1b8 0f00 	cmp.w	r8, #0
   d8e34:	460b      	mov	r3, r1
   d8e36:	fa45 f104 	asr.w	r1, r5, r4
   d8e3a:	9103      	str	r1, [sp, #12]
   d8e3c:	f04f 0000 	mov.w	r0, #0
   d8e40:	bfb8      	it	lt
   d8e42:	4249      	neglt	r1, r1
   d8e44:	4602      	mov	r2, r0
   d8e46:	bfb8      	it	lt
   d8e48:	9103      	strlt	r1, [sp, #12]
   d8e4a:	4630      	mov	r0, r6
   d8e4c:	4639      	mov	r1, r7
   d8e4e:	f000 fc81 	bl	d9754 <__aeabi_dsub>
   d8e52:	4606      	mov	r6, r0
   d8e54:	460f      	mov	r7, r1
   d8e56:	463b      	mov	r3, r7
   d8e58:	4650      	mov	r0, sl
   d8e5a:	4659      	mov	r1, fp
   d8e5c:	4632      	mov	r2, r6
   d8e5e:	f000 fc7b 	bl	d9758 <__adddf3>
   d8e62:	9b03      	ldr	r3, [sp, #12]
   d8e64:	051b      	lsls	r3, r3, #20
   d8e66:	9300      	str	r3, [sp, #0]
   d8e68:	460d      	mov	r5, r1
   d8e6a:	2400      	movs	r4, #0
   d8e6c:	a380      	add	r3, pc, #512	; (adr r3, d9070 <__ieee754_pow+0x8f0>)
   d8e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e72:	4620      	mov	r0, r4
   d8e74:	4629      	mov	r1, r5
   d8e76:	f000 fe25 	bl	d9ac4 <__aeabi_dmul>
   d8e7a:	4632      	mov	r2, r6
   d8e7c:	4680      	mov	r8, r0
   d8e7e:	4689      	mov	r9, r1
   d8e80:	463b      	mov	r3, r7
   d8e82:	4620      	mov	r0, r4
   d8e84:	4629      	mov	r1, r5
   d8e86:	f000 fc65 	bl	d9754 <__aeabi_dsub>
   d8e8a:	4602      	mov	r2, r0
   d8e8c:	460b      	mov	r3, r1
   d8e8e:	4650      	mov	r0, sl
   d8e90:	4659      	mov	r1, fp
   d8e92:	f000 fc5f 	bl	d9754 <__aeabi_dsub>
   d8e96:	a378      	add	r3, pc, #480	; (adr r3, d9078 <__ieee754_pow+0x8f8>)
   d8e98:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8e9c:	f000 fe12 	bl	d9ac4 <__aeabi_dmul>
   d8ea0:	a377      	add	r3, pc, #476	; (adr r3, d9080 <__ieee754_pow+0x900>)
   d8ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ea6:	4606      	mov	r6, r0
   d8ea8:	460f      	mov	r7, r1
   d8eaa:	4620      	mov	r0, r4
   d8eac:	4629      	mov	r1, r5
   d8eae:	f000 fe09 	bl	d9ac4 <__aeabi_dmul>
   d8eb2:	4602      	mov	r2, r0
   d8eb4:	460b      	mov	r3, r1
   d8eb6:	4630      	mov	r0, r6
   d8eb8:	4639      	mov	r1, r7
   d8eba:	f000 fc4d 	bl	d9758 <__adddf3>
   d8ebe:	4606      	mov	r6, r0
   d8ec0:	460f      	mov	r7, r1
   d8ec2:	4632      	mov	r2, r6
   d8ec4:	463b      	mov	r3, r7
   d8ec6:	4640      	mov	r0, r8
   d8ec8:	4649      	mov	r1, r9
   d8eca:	f000 fc45 	bl	d9758 <__adddf3>
   d8ece:	4642      	mov	r2, r8
   d8ed0:	464b      	mov	r3, r9
   d8ed2:	4604      	mov	r4, r0
   d8ed4:	460d      	mov	r5, r1
   d8ed6:	f000 fc3d 	bl	d9754 <__aeabi_dsub>
   d8eda:	4602      	mov	r2, r0
   d8edc:	460b      	mov	r3, r1
   d8ede:	4630      	mov	r0, r6
   d8ee0:	4639      	mov	r1, r7
   d8ee2:	f000 fc37 	bl	d9754 <__aeabi_dsub>
   d8ee6:	4622      	mov	r2, r4
   d8ee8:	4682      	mov	sl, r0
   d8eea:	468b      	mov	fp, r1
   d8eec:	462b      	mov	r3, r5
   d8eee:	4620      	mov	r0, r4
   d8ef0:	4629      	mov	r1, r5
   d8ef2:	f000 fde7 	bl	d9ac4 <__aeabi_dmul>
   d8ef6:	a364      	add	r3, pc, #400	; (adr r3, d9088 <__ieee754_pow+0x908>)
   d8ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8efc:	4606      	mov	r6, r0
   d8efe:	460f      	mov	r7, r1
   d8f00:	f000 fde0 	bl	d9ac4 <__aeabi_dmul>
   d8f04:	a362      	add	r3, pc, #392	; (adr r3, d9090 <__ieee754_pow+0x910>)
   d8f06:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f0a:	f000 fc23 	bl	d9754 <__aeabi_dsub>
   d8f0e:	4632      	mov	r2, r6
   d8f10:	463b      	mov	r3, r7
   d8f12:	f000 fdd7 	bl	d9ac4 <__aeabi_dmul>
   d8f16:	a360      	add	r3, pc, #384	; (adr r3, d9098 <__ieee754_pow+0x918>)
   d8f18:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f1c:	f000 fc1c 	bl	d9758 <__adddf3>
   d8f20:	4632      	mov	r2, r6
   d8f22:	463b      	mov	r3, r7
   d8f24:	f000 fdce 	bl	d9ac4 <__aeabi_dmul>
   d8f28:	a35d      	add	r3, pc, #372	; (adr r3, d90a0 <__ieee754_pow+0x920>)
   d8f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f2e:	f000 fc11 	bl	d9754 <__aeabi_dsub>
   d8f32:	4632      	mov	r2, r6
   d8f34:	463b      	mov	r3, r7
   d8f36:	f000 fdc5 	bl	d9ac4 <__aeabi_dmul>
   d8f3a:	a35b      	add	r3, pc, #364	; (adr r3, d90a8 <__ieee754_pow+0x928>)
   d8f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f40:	f000 fc0a 	bl	d9758 <__adddf3>
   d8f44:	4632      	mov	r2, r6
   d8f46:	463b      	mov	r3, r7
   d8f48:	f000 fdbc 	bl	d9ac4 <__aeabi_dmul>
   d8f4c:	4602      	mov	r2, r0
   d8f4e:	460b      	mov	r3, r1
   d8f50:	4620      	mov	r0, r4
   d8f52:	4629      	mov	r1, r5
   d8f54:	f000 fbfe 	bl	d9754 <__aeabi_dsub>
   d8f58:	4606      	mov	r6, r0
   d8f5a:	460f      	mov	r7, r1
   d8f5c:	4632      	mov	r2, r6
   d8f5e:	463b      	mov	r3, r7
   d8f60:	4620      	mov	r0, r4
   d8f62:	4629      	mov	r1, r5
   d8f64:	f000 fdae 	bl	d9ac4 <__aeabi_dmul>
   d8f68:	2200      	movs	r2, #0
   d8f6a:	4680      	mov	r8, r0
   d8f6c:	4689      	mov	r9, r1
   d8f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8f72:	4630      	mov	r0, r6
   d8f74:	4639      	mov	r1, r7
   d8f76:	f000 fbed 	bl	d9754 <__aeabi_dsub>
   d8f7a:	4602      	mov	r2, r0
   d8f7c:	460b      	mov	r3, r1
   d8f7e:	4640      	mov	r0, r8
   d8f80:	4649      	mov	r1, r9
   d8f82:	f000 fec9 	bl	d9d18 <__aeabi_ddiv>
   d8f86:	4652      	mov	r2, sl
   d8f88:	4606      	mov	r6, r0
   d8f8a:	460f      	mov	r7, r1
   d8f8c:	465b      	mov	r3, fp
   d8f8e:	4620      	mov	r0, r4
   d8f90:	4629      	mov	r1, r5
   d8f92:	f000 fd97 	bl	d9ac4 <__aeabi_dmul>
   d8f96:	4652      	mov	r2, sl
   d8f98:	465b      	mov	r3, fp
   d8f9a:	f000 fbdd 	bl	d9758 <__adddf3>
   d8f9e:	4602      	mov	r2, r0
   d8fa0:	460b      	mov	r3, r1
   d8fa2:	4630      	mov	r0, r6
   d8fa4:	4639      	mov	r1, r7
   d8fa6:	f000 fbd5 	bl	d9754 <__aeabi_dsub>
   d8faa:	4622      	mov	r2, r4
   d8fac:	462b      	mov	r3, r5
   d8fae:	f000 fbd1 	bl	d9754 <__aeabi_dsub>
   d8fb2:	4602      	mov	r2, r0
   d8fb4:	460b      	mov	r3, r1
   d8fb6:	2000      	movs	r0, #0
   d8fb8:	4945      	ldr	r1, [pc, #276]	; (d90d0 <__ieee754_pow+0x950>)
   d8fba:	f000 fbcb 	bl	d9754 <__aeabi_dsub>
   d8fbe:	460b      	mov	r3, r1
   d8fc0:	9900      	ldr	r1, [sp, #0]
   d8fc2:	4419      	add	r1, r3
   d8fc4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8fc8:	4602      	mov	r2, r0
   d8fca:	f2c0 8169 	blt.w	d92a0 <__ieee754_pow+0xb20>
   d8fce:	4610      	mov	r0, r2
   d8fd0:	ec53 2b19 	vmov	r2, r3, d9
   d8fd4:	f000 fd76 	bl	d9ac4 <__aeabi_dmul>
   d8fd8:	e9cd 0100 	strd	r0, r1, [sp]
   d8fdc:	e41e      	b.n	d881c <__ieee754_pow+0x9c>
   d8fde:	f1bb 0f00 	cmp.w	fp, #0
   d8fe2:	f6ff ac95 	blt.w	d8910 <__ieee754_pow+0x190>
   d8fe6:	ed9f 7b32 	vldr	d7, [pc, #200]	; d90b0 <__ieee754_pow+0x930>
   d8fea:	ed8d 7b00 	vstr	d7, [sp]
   d8fee:	e415      	b.n	d881c <__ieee754_pow+0x9c>
   d8ff0:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d90d8 <__ieee754_pow+0x958>
   d8ff4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8ff8:	4563      	cmp	r3, ip
   d8ffa:	f340 810b 	ble.w	d9214 <__ieee754_pow+0xa94>
   d8ffe:	4b35      	ldr	r3, [pc, #212]	; (d90d4 <__ieee754_pow+0x954>)
   d9000:	440b      	add	r3, r1
   d9002:	4303      	orrs	r3, r0
   d9004:	d10a      	bne.n	d901c <__ieee754_pow+0x89c>
   d9006:	4632      	mov	r2, r6
   d9008:	463b      	mov	r3, r7
   d900a:	f000 fba3 	bl	d9754 <__aeabi_dsub>
   d900e:	4652      	mov	r2, sl
   d9010:	465b      	mov	r3, fp
   d9012:	f000 ffdd 	bl	d9fd0 <__aeabi_dcmpge>
   d9016:	2800      	cmp	r0, #0
   d9018:	f43f aef2 	beq.w	d8e00 <__ieee754_pow+0x680>
   d901c:	a326      	add	r3, pc, #152	; (adr r3, d90b8 <__ieee754_pow+0x938>)
   d901e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9022:	ec51 0b19 	vmov	r0, r1, d9
   d9026:	f000 fd4d 	bl	d9ac4 <__aeabi_dmul>
   d902a:	a323      	add	r3, pc, #140	; (adr r3, d90b8 <__ieee754_pow+0x938>)
   d902c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9030:	f000 fd48 	bl	d9ac4 <__aeabi_dmul>
   d9034:	e9cd 0100 	strd	r0, r1, [sp]
   d9038:	f7ff bbf0 	b.w	d881c <__ieee754_pow+0x9c>
   d903c:	ed9f 7b20 	vldr	d7, [pc, #128]	; d90c0 <__ieee754_pow+0x940>
   d9040:	eeb0 9a47 	vmov.f32	s18, s14
   d9044:	eef0 9a67 	vmov.f32	s19, s15
   d9048:	e686      	b.n	d8d58 <__ieee754_pow+0x5d8>
   d904a:	f1bb 0f00 	cmp.w	fp, #0
   d904e:	daca      	bge.n	d8fe6 <__ieee754_pow+0x866>
   d9050:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9054:	9600      	str	r6, [sp, #0]
   d9056:	9301      	str	r3, [sp, #4]
   d9058:	f7ff bbe0 	b.w	d881c <__ieee754_pow+0x9c>
   d905c:	f3af 8000 	nop.w
   d9060:	00000000 	.word	0x00000000
   d9064:	bff00000 	.word	0xbff00000
   d9068:	652b82fe 	.word	0x652b82fe
   d906c:	3c971547 	.word	0x3c971547
   d9070:	00000000 	.word	0x00000000
   d9074:	3fe62e43 	.word	0x3fe62e43
   d9078:	fefa39ef 	.word	0xfefa39ef
   d907c:	3fe62e42 	.word	0x3fe62e42
   d9080:	0ca86c39 	.word	0x0ca86c39
   d9084:	be205c61 	.word	0xbe205c61
   d9088:	72bea4d0 	.word	0x72bea4d0
   d908c:	3e663769 	.word	0x3e663769
   d9090:	c5d26bf1 	.word	0xc5d26bf1
   d9094:	3ebbbd41 	.word	0x3ebbbd41
   d9098:	af25de2c 	.word	0xaf25de2c
   d909c:	3f11566a 	.word	0x3f11566a
   d90a0:	16bebd93 	.word	0x16bebd93
   d90a4:	3f66c16c 	.word	0x3f66c16c
   d90a8:	5555553e 	.word	0x5555553e
   d90ac:	3fc55555 	.word	0x3fc55555
	...
   d90b8:	c2f8f359 	.word	0xc2f8f359
   d90bc:	01a56e1f 	.word	0x01a56e1f
   d90c0:	00000000 	.word	0x00000000
   d90c4:	3ff00000 	.word	0x3ff00000
   d90c8:	408fffff 	.word	0x408fffff
   d90cc:	000fffff 	.word	0x000fffff
   d90d0:	3ff00000 	.word	0x3ff00000
   d90d4:	3f6f3400 	.word	0x3f6f3400
   d90d8:	4090cbff 	.word	0x4090cbff
   d90dc:	4598      	cmp	r8, r3
   d90de:	f6ff af7e 	blt.w	d8fde <__ieee754_pow+0x85e>
   d90e2:	4b91      	ldr	r3, [pc, #580]	; (d9328 <__ieee754_pow+0xba8>)
   d90e4:	4598      	cmp	r8, r3
   d90e6:	f73f ac0f 	bgt.w	d8908 <__ieee754_pow+0x188>
   d90ea:	4b8f      	ldr	r3, [pc, #572]	; (d9328 <__ieee754_pow+0xba8>)
   d90ec:	2200      	movs	r2, #0
   d90ee:	e9dd 0100 	ldrd	r0, r1, [sp]
   d90f2:	f000 fb2f 	bl	d9754 <__aeabi_dsub>
   d90f6:	a378      	add	r3, pc, #480	; (adr r3, d92d8 <__ieee754_pow+0xb58>)
   d90f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90fc:	4604      	mov	r4, r0
   d90fe:	460d      	mov	r5, r1
   d9100:	f000 fce0 	bl	d9ac4 <__aeabi_dmul>
   d9104:	a376      	add	r3, pc, #472	; (adr r3, d92e0 <__ieee754_pow+0xb60>)
   d9106:	e9d3 2300 	ldrd	r2, r3, [r3]
   d910a:	4682      	mov	sl, r0
   d910c:	468b      	mov	fp, r1
   d910e:	4620      	mov	r0, r4
   d9110:	4629      	mov	r1, r5
   d9112:	f000 fcd7 	bl	d9ac4 <__aeabi_dmul>
   d9116:	4b85      	ldr	r3, [pc, #532]	; (d932c <__ieee754_pow+0xbac>)
   d9118:	4680      	mov	r8, r0
   d911a:	4689      	mov	r9, r1
   d911c:	2200      	movs	r2, #0
   d911e:	4620      	mov	r0, r4
   d9120:	4629      	mov	r1, r5
   d9122:	f000 fccf 	bl	d9ac4 <__aeabi_dmul>
   d9126:	4602      	mov	r2, r0
   d9128:	460b      	mov	r3, r1
   d912a:	a16f      	add	r1, pc, #444	; (adr r1, d92e8 <__ieee754_pow+0xb68>)
   d912c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9130:	f000 fb10 	bl	d9754 <__aeabi_dsub>
   d9134:	4622      	mov	r2, r4
   d9136:	462b      	mov	r3, r5
   d9138:	f000 fcc4 	bl	d9ac4 <__aeabi_dmul>
   d913c:	4602      	mov	r2, r0
   d913e:	460b      	mov	r3, r1
   d9140:	2000      	movs	r0, #0
   d9142:	497b      	ldr	r1, [pc, #492]	; (d9330 <__ieee754_pow+0xbb0>)
   d9144:	f000 fb06 	bl	d9754 <__aeabi_dsub>
   d9148:	4622      	mov	r2, r4
   d914a:	462b      	mov	r3, r5
   d914c:	4604      	mov	r4, r0
   d914e:	460d      	mov	r5, r1
   d9150:	4610      	mov	r0, r2
   d9152:	4619      	mov	r1, r3
   d9154:	f000 fcb6 	bl	d9ac4 <__aeabi_dmul>
   d9158:	4602      	mov	r2, r0
   d915a:	460b      	mov	r3, r1
   d915c:	4620      	mov	r0, r4
   d915e:	4629      	mov	r1, r5
   d9160:	f000 fcb0 	bl	d9ac4 <__aeabi_dmul>
   d9164:	a362      	add	r3, pc, #392	; (adr r3, d92f0 <__ieee754_pow+0xb70>)
   d9166:	e9d3 2300 	ldrd	r2, r3, [r3]
   d916a:	f000 fcab 	bl	d9ac4 <__aeabi_dmul>
   d916e:	4602      	mov	r2, r0
   d9170:	460b      	mov	r3, r1
   d9172:	4640      	mov	r0, r8
   d9174:	4649      	mov	r1, r9
   d9176:	f000 faed 	bl	d9754 <__aeabi_dsub>
   d917a:	4680      	mov	r8, r0
   d917c:	4689      	mov	r9, r1
   d917e:	4650      	mov	r0, sl
   d9180:	4659      	mov	r1, fp
   d9182:	4642      	mov	r2, r8
   d9184:	464b      	mov	r3, r9
   d9186:	f000 fae7 	bl	d9758 <__adddf3>
   d918a:	2400      	movs	r4, #0
   d918c:	4652      	mov	r2, sl
   d918e:	465b      	mov	r3, fp
   d9190:	4620      	mov	r0, r4
   d9192:	460d      	mov	r5, r1
   d9194:	f000 fade 	bl	d9754 <__aeabi_dsub>
   d9198:	4602      	mov	r2, r0
   d919a:	460b      	mov	r3, r1
   d919c:	4640      	mov	r0, r8
   d919e:	4649      	mov	r1, r9
   d91a0:	f000 fad8 	bl	d9754 <__aeabi_dsub>
   d91a4:	4682      	mov	sl, r0
   d91a6:	468b      	mov	fp, r1
   d91a8:	e5ca      	b.n	d8d40 <__ieee754_pow+0x5c0>
   d91aa:	ed9f 7b53 	vldr	d7, [pc, #332]	; d92f8 <__ieee754_pow+0xb78>
   d91ae:	eeb0 ba47 	vmov.f32	s22, s14
   d91b2:	eef0 ba67 	vmov.f32	s23, s15
   d91b6:	eeb0 ca47 	vmov.f32	s24, s14
   d91ba:	eef0 ca67 	vmov.f32	s25, s15
   d91be:	ed9f 7b50 	vldr	d7, [pc, #320]	; d9300 <__ieee754_pow+0xb80>
   d91c2:	f04f 0900 	mov.w	r9, #0
   d91c6:	ec54 3b17 	vmov	r3, r4, d7
   d91ca:	e41d      	b.n	d8a08 <__ieee754_pow+0x288>
   d91cc:	2000      	movs	r0, #0
   d91ce:	f7ff bbf3 	b.w	d89b8 <__ieee754_pow+0x238>
   d91d2:	4955      	ldr	r1, [pc, #340]	; (d9328 <__ieee754_pow+0xba8>)
   d91d4:	4622      	mov	r2, r4
   d91d6:	462b      	mov	r3, r5
   d91d8:	2000      	movs	r0, #0
   d91da:	f000 fd9d 	bl	d9d18 <__aeabi_ddiv>
   d91de:	e9cd 0100 	strd	r0, r1, [sp]
   d91e2:	f7ff bb1b 	b.w	d881c <__ieee754_pow+0x9c>
   d91e6:	4622      	mov	r2, r4
   d91e8:	462b      	mov	r3, r5
   d91ea:	4620      	mov	r0, r4
   d91ec:	4629      	mov	r1, r5
   d91ee:	f000 fc69 	bl	d9ac4 <__aeabi_dmul>
   d91f2:	e9cd 0100 	strd	r0, r1, [sp]
   d91f6:	f7ff bb11 	b.w	d881c <__ieee754_pow+0x9c>
   d91fa:	2b00      	cmp	r3, #0
   d91fc:	d142      	bne.n	d9284 <__ieee754_pow+0xb04>
   d91fe:	f1c1 0114 	rsb	r1, r1, #20
   d9202:	fa4a f001 	asr.w	r0, sl, r1
   d9206:	fa00 f101 	lsl.w	r1, r0, r1
   d920a:	4551      	cmp	r1, sl
   d920c:	d05a      	beq.n	d92c4 <__ieee754_pow+0xb44>
   d920e:	9303      	str	r3, [sp, #12]
   d9210:	f7ff bae0 	b.w	d87d4 <__ieee754_pow+0x54>
   d9214:	4a46      	ldr	r2, [pc, #280]	; (d9330 <__ieee754_pow+0xbb0>)
   d9216:	4293      	cmp	r3, r2
   d9218:	dc5b      	bgt.n	d92d2 <__ieee754_pow+0xb52>
   d921a:	e9dd 1200 	ldrd	r1, r2, [sp]
   d921e:	9100      	str	r1, [sp, #0]
   d9220:	9103      	str	r1, [sp, #12]
   d9222:	e622      	b.n	d8e6a <__ieee754_pow+0x6ea>
   d9224:	a338      	add	r3, pc, #224	; (adr r3, d9308 <__ieee754_pow+0xb88>)
   d9226:	e9d3 2300 	ldrd	r2, r3, [r3]
   d922a:	ec51 0b19 	vmov	r0, r1, d9
   d922e:	f000 fc49 	bl	d9ac4 <__aeabi_dmul>
   d9232:	a335      	add	r3, pc, #212	; (adr r3, d9308 <__ieee754_pow+0xb88>)
   d9234:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9238:	f000 fc44 	bl	d9ac4 <__aeabi_dmul>
   d923c:	e9cd 0100 	strd	r0, r1, [sp]
   d9240:	f7ff baec 	b.w	d881c <__ieee754_pow+0x9c>
   d9244:	9b03      	ldr	r3, [sp, #12]
   d9246:	2b01      	cmp	r3, #1
   d9248:	f47f aae8 	bne.w	d881c <__ieee754_pow+0x9c>
   d924c:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9250:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9254:	e9cd 2300 	strd	r2, r3, [sp]
   d9258:	f7ff bae0 	b.w	d881c <__ieee754_pow+0x9c>
   d925c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d9310 <__ieee754_pow+0xb90>
   d9260:	eeb0 ba47 	vmov.f32	s22, s14
   d9264:	eef0 ba67 	vmov.f32	s23, s15
   d9268:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d9318 <__ieee754_pow+0xb98>
   d926c:	eeb0 ca47 	vmov.f32	s24, s14
   d9270:	eef0 ca67 	vmov.f32	s25, s15
   d9274:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d9320 <__ieee754_pow+0xba0>
   d9278:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d927c:	ec54 3b17 	vmov	r3, r4, d7
   d9280:	f7ff bbc2 	b.w	d8a08 <__ieee754_pow+0x288>
   d9284:	ec45 4b10 	vmov	d0, r4, r5
   d9288:	9203      	str	r2, [sp, #12]
   d928a:	f000 f917 	bl	d94bc <fabs>
   d928e:	9a03      	ldr	r2, [sp, #12]
   d9290:	ed8d 0b00 	vstr	d0, [sp]
   d9294:	2a00      	cmp	r2, #0
   d9296:	f47f ab61 	bne.w	d895c <__ieee754_pow+0x1dc>
   d929a:	9203      	str	r2, [sp, #12]
   d929c:	f7ff baf5 	b.w	d888a <__ieee754_pow+0x10a>
   d92a0:	9803      	ldr	r0, [sp, #12]
   d92a2:	ec43 2b10 	vmov	d0, r2, r3
   d92a6:	f000 f9bf 	bl	d9628 <scalbn>
   d92aa:	ec51 0b10 	vmov	r0, r1, d0
   d92ae:	e68f      	b.n	d8fd0 <__ieee754_pow+0x850>
   d92b0:	f000 0001 	and.w	r0, r0, #1
   d92b4:	f1c0 0102 	rsb	r1, r0, #2
   d92b8:	9103      	str	r1, [sp, #12]
   d92ba:	2b00      	cmp	r3, #0
   d92bc:	f43f aa8a 	beq.w	d87d4 <__ieee754_pow+0x54>
   d92c0:	f7ff bada 	b.w	d8878 <__ieee754_pow+0xf8>
   d92c4:	f000 0001 	and.w	r0, r0, #1
   d92c8:	f1c0 0302 	rsb	r3, r0, #2
   d92cc:	9303      	str	r3, [sp, #12]
   d92ce:	f7ff ba81 	b.w	d87d4 <__ieee754_pow+0x54>
   d92d2:	151b      	asrs	r3, r3, #20
   d92d4:	e596      	b.n	d8e04 <__ieee754_pow+0x684>
   d92d6:	bf00      	nop
   d92d8:	60000000 	.word	0x60000000
   d92dc:	3ff71547 	.word	0x3ff71547
   d92e0:	f85ddf44 	.word	0xf85ddf44
   d92e4:	3e54ae0b 	.word	0x3e54ae0b
   d92e8:	55555555 	.word	0x55555555
   d92ec:	3fd55555 	.word	0x3fd55555
   d92f0:	652b82fe 	.word	0x652b82fe
   d92f4:	3ff71547 	.word	0x3ff71547
	...
   d9304:	3ff00000 	.word	0x3ff00000
   d9308:	8800759c 	.word	0x8800759c
   d930c:	7e37e43c 	.word	0x7e37e43c
   d9310:	40000000 	.word	0x40000000
   d9314:	3fe2b803 	.word	0x3fe2b803
   d9318:	43cfd006 	.word	0x43cfd006
   d931c:	3e4cfdeb 	.word	0x3e4cfdeb
   d9320:	00000000 	.word	0x00000000
   d9324:	3ff80000 	.word	0x3ff80000
   d9328:	3ff00000 	.word	0x3ff00000
   d932c:	3fd00000 	.word	0x3fd00000
   d9330:	3fe00000 	.word	0x3fe00000

000d9334 <__ieee754_sqrt>:
   d9334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9338:	4a5f      	ldr	r2, [pc, #380]	; (d94b8 <__ieee754_sqrt+0x184>)
   d933a:	ec57 6b10 	vmov	r6, r7, d0
   d933e:	43ba      	bics	r2, r7
   d9340:	f000 8098 	beq.w	d9474 <__ieee754_sqrt+0x140>
   d9344:	2f00      	cmp	r7, #0
   d9346:	ee10 4a10 	vmov	r4, s0
   d934a:	463b      	mov	r3, r7
   d934c:	dd4e      	ble.n	d93ec <__ieee754_sqrt+0xb8>
   d934e:	1539      	asrs	r1, r7, #20
   d9350:	d05b      	beq.n	d940a <__ieee754_sqrt+0xd6>
   d9352:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d9356:	07ca      	lsls	r2, r1, #31
   d9358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d935c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d9360:	d403      	bmi.n	d936a <__ieee754_sqrt+0x36>
   d9362:	005b      	lsls	r3, r3, #1
   d9364:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d9368:	0064      	lsls	r4, r4, #1
   d936a:	0fe2      	lsrs	r2, r4, #31
   d936c:	f04f 0c00 	mov.w	ip, #0
   d9370:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d9374:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d9378:	0064      	lsls	r4, r4, #1
   d937a:	4666      	mov	r6, ip
   d937c:	2516      	movs	r5, #22
   d937e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d9382:	18b1      	adds	r1, r6, r2
   d9384:	4299      	cmp	r1, r3
   d9386:	dc02      	bgt.n	d938e <__ieee754_sqrt+0x5a>
   d9388:	1a5b      	subs	r3, r3, r1
   d938a:	188e      	adds	r6, r1, r2
   d938c:	4494      	add	ip, r2
   d938e:	005b      	lsls	r3, r3, #1
   d9390:	3d01      	subs	r5, #1
   d9392:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d9396:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d939a:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d939e:	d1f0      	bne.n	d9382 <__ieee754_sqrt+0x4e>
   d93a0:	462f      	mov	r7, r5
   d93a2:	2020      	movs	r0, #32
   d93a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d93a8:	e009      	b.n	d93be <__ieee754_sqrt+0x8a>
   d93aa:	d03e      	beq.n	d942a <__ieee754_sqrt+0xf6>
   d93ac:	0fe1      	lsrs	r1, r4, #31
   d93ae:	3801      	subs	r0, #1
   d93b0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d93b4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d93b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d93bc:	d03e      	beq.n	d943c <__ieee754_sqrt+0x108>
   d93be:	42b3      	cmp	r3, r6
   d93c0:	eb02 0105 	add.w	r1, r2, r5
   d93c4:	ddf1      	ble.n	d93aa <__ieee754_sqrt+0x76>
   d93c6:	2900      	cmp	r1, #0
   d93c8:	eb01 0502 	add.w	r5, r1, r2
   d93cc:	db09      	blt.n	d93e2 <__ieee754_sqrt+0xae>
   d93ce:	46b0      	mov	r8, r6
   d93d0:	1b9b      	subs	r3, r3, r6
   d93d2:	42a1      	cmp	r1, r4
   d93d4:	bf88      	it	hi
   d93d6:	f103 33ff 	addhi.w	r3, r3, #4294967295
   d93da:	1a64      	subs	r4, r4, r1
   d93dc:	4417      	add	r7, r2
   d93de:	4646      	mov	r6, r8
   d93e0:	e7e4      	b.n	d93ac <__ieee754_sqrt+0x78>
   d93e2:	2d00      	cmp	r5, #0
   d93e4:	dbf3      	blt.n	d93ce <__ieee754_sqrt+0x9a>
   d93e6:	f106 0801 	add.w	r8, r6, #1
   d93ea:	e7f1      	b.n	d93d0 <__ieee754_sqrt+0x9c>
   d93ec:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d93f0:	4332      	orrs	r2, r6
   d93f2:	d036      	beq.n	d9462 <__ieee754_sqrt+0x12e>
   d93f4:	2f00      	cmp	r7, #0
   d93f6:	d14d      	bne.n	d9494 <__ieee754_sqrt+0x160>
   d93f8:	4639      	mov	r1, r7
   d93fa:	0ae2      	lsrs	r2, r4, #11
   d93fc:	3915      	subs	r1, #21
   d93fe:	0564      	lsls	r4, r4, #21
   d9400:	4613      	mov	r3, r2
   d9402:	2a00      	cmp	r2, #0
   d9404:	d0f9      	beq.n	d93fa <__ieee754_sqrt+0xc6>
   d9406:	02d7      	lsls	r7, r2, #11
   d9408:	d451      	bmi.n	d94ae <__ieee754_sqrt+0x17a>
   d940a:	2000      	movs	r0, #0
   d940c:	005b      	lsls	r3, r3, #1
   d940e:	02de      	lsls	r6, r3, #11
   d9410:	4605      	mov	r5, r0
   d9412:	f100 0001 	add.w	r0, r0, #1
   d9416:	d5f9      	bpl.n	d940c <__ieee754_sqrt+0xd8>
   d9418:	461a      	mov	r2, r3
   d941a:	4623      	mov	r3, r4
   d941c:	4084      	lsls	r4, r0
   d941e:	f1c0 0020 	rsb	r0, r0, #32
   d9422:	40c3      	lsrs	r3, r0
   d9424:	4313      	orrs	r3, r2
   d9426:	1b49      	subs	r1, r1, r5
   d9428:	e793      	b.n	d9352 <__ieee754_sqrt+0x1e>
   d942a:	42a1      	cmp	r1, r4
   d942c:	d8be      	bhi.n	d93ac <__ieee754_sqrt+0x78>
   d942e:	2900      	cmp	r1, #0
   d9430:	eb01 0502 	add.w	r5, r1, r2
   d9434:	dbd5      	blt.n	d93e2 <__ieee754_sqrt+0xae>
   d9436:	4698      	mov	r8, r3
   d9438:	2300      	movs	r3, #0
   d943a:	e7ce      	b.n	d93da <__ieee754_sqrt+0xa6>
   d943c:	4323      	orrs	r3, r4
   d943e:	d112      	bne.n	d9466 <__ieee754_sqrt+0x132>
   d9440:	0878      	lsrs	r0, r7, #1
   d9442:	ea4f 016c 	mov.w	r1, ip, asr #1
   d9446:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d944a:	f01c 0f01 	tst.w	ip, #1
   d944e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d9452:	bf18      	it	ne
   d9454:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d9458:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d945c:	4602      	mov	r2, r0
   d945e:	ec43 2b10 	vmov	d0, r2, r3
   d9462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9466:	1c7b      	adds	r3, r7, #1
   d9468:	bf16      	itet	ne
   d946a:	1c78      	addne	r0, r7, #1
   d946c:	f10c 0c01 	addeq.w	ip, ip, #1
   d9470:	0840      	lsrne	r0, r0, #1
   d9472:	e7e6      	b.n	d9442 <__ieee754_sqrt+0x10e>
   d9474:	ee10 2a10 	vmov	r2, s0
   d9478:	ee10 0a10 	vmov	r0, s0
   d947c:	463b      	mov	r3, r7
   d947e:	4639      	mov	r1, r7
   d9480:	f000 fb20 	bl	d9ac4 <__aeabi_dmul>
   d9484:	4632      	mov	r2, r6
   d9486:	463b      	mov	r3, r7
   d9488:	f000 f966 	bl	d9758 <__adddf3>
   d948c:	ec41 0b10 	vmov	d0, r0, r1
   d9490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9494:	ee10 2a10 	vmov	r2, s0
   d9498:	4630      	mov	r0, r6
   d949a:	4639      	mov	r1, r7
   d949c:	f000 f95a 	bl	d9754 <__aeabi_dsub>
   d94a0:	4602      	mov	r2, r0
   d94a2:	460b      	mov	r3, r1
   d94a4:	f000 fc38 	bl	d9d18 <__aeabi_ddiv>
   d94a8:	ec41 0b10 	vmov	d0, r0, r1
   d94ac:	e7d9      	b.n	d9462 <__ieee754_sqrt+0x12e>
   d94ae:	4623      	mov	r3, r4
   d94b0:	2020      	movs	r0, #32
   d94b2:	f04f 35ff 	mov.w	r5, #4294967295
   d94b6:	e7b4      	b.n	d9422 <__ieee754_sqrt+0xee>
   d94b8:	7ff00000 	.word	0x7ff00000

000d94bc <fabs>:
   d94bc:	ec51 0b10 	vmov	r0, r1, d0
   d94c0:	ee10 2a10 	vmov	r2, s0
   d94c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d94c8:	ec43 2b10 	vmov	d0, r2, r3
   d94cc:	4770      	bx	lr
   d94ce:	bf00      	nop

000d94d0 <finite>:
   d94d0:	b082      	sub	sp, #8
   d94d2:	ed8d 0b00 	vstr	d0, [sp]
   d94d6:	9801      	ldr	r0, [sp, #4]
   d94d8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d94dc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d94e0:	0fc0      	lsrs	r0, r0, #31
   d94e2:	b002      	add	sp, #8
   d94e4:	4770      	bx	lr
   d94e6:	bf00      	nop

000d94e8 <matherr>:
   d94e8:	2000      	movs	r0, #0
   d94ea:	4770      	bx	lr
   d94ec:	0000      	movs	r0, r0
	...

000d94f0 <nan>:
   d94f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d94f8 <nan+0x8>
   d94f4:	4770      	bx	lr
   d94f6:	bf00      	nop
   d94f8:	00000000 	.word	0x00000000
   d94fc:	7ff80000 	.word	0x7ff80000

000d9500 <rint>:
   d9500:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9502:	ec53 2b10 	vmov	r2, r3, d0
   d9506:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d950a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d950e:	2813      	cmp	r0, #19
   d9510:	ee10 5a10 	vmov	r5, s0
   d9514:	b083      	sub	sp, #12
   d9516:	4619      	mov	r1, r3
   d9518:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d951c:	dc31      	bgt.n	d9582 <rint+0x82>
   d951e:	2800      	cmp	r0, #0
   d9520:	db4c      	blt.n	d95bc <rint+0xbc>
   d9522:	4e3e      	ldr	r6, [pc, #248]	; (d961c <rint+0x11c>)
   d9524:	4106      	asrs	r6, r0
   d9526:	ea03 0706 	and.w	r7, r3, r6
   d952a:	4317      	orrs	r7, r2
   d952c:	d02e      	beq.n	d958c <rint+0x8c>
   d952e:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d9532:	431d      	orrs	r5, r3
   d9534:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d9538:	d00c      	beq.n	d9554 <rint+0x54>
   d953a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d953e:	2813      	cmp	r0, #19
   d9540:	ea21 0606 	bic.w	r6, r1, r6
   d9544:	fa43 f100 	asr.w	r1, r3, r0
   d9548:	ea41 0106 	orr.w	r1, r1, r6
   d954c:	bf0c      	ite	eq
   d954e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d9552:	2500      	movne	r5, #0
   d9554:	4832      	ldr	r0, [pc, #200]	; (d9620 <rint+0x120>)
   d9556:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d955a:	462a      	mov	r2, r5
   d955c:	e9d4 4500 	ldrd	r4, r5, [r4]
   d9560:	460b      	mov	r3, r1
   d9562:	4620      	mov	r0, r4
   d9564:	4629      	mov	r1, r5
   d9566:	f000 f8f7 	bl	d9758 <__adddf3>
   d956a:	e9cd 0100 	strd	r0, r1, [sp]
   d956e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9572:	4622      	mov	r2, r4
   d9574:	462b      	mov	r3, r5
   d9576:	f000 f8ed 	bl	d9754 <__aeabi_dsub>
   d957a:	ec41 0b10 	vmov	d0, r0, r1
   d957e:	b003      	add	sp, #12
   d9580:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9582:	2833      	cmp	r0, #51	; 0x33
   d9584:	dd06      	ble.n	d9594 <rint+0x94>
   d9586:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d958a:	d040      	beq.n	d960e <rint+0x10e>
   d958c:	ec43 2b10 	vmov	d0, r2, r3
   d9590:	b003      	add	sp, #12
   d9592:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9594:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d9598:	f04f 30ff 	mov.w	r0, #4294967295
   d959c:	40f0      	lsrs	r0, r6
   d959e:	4202      	tst	r2, r0
   d95a0:	d0f4      	beq.n	d958c <rint+0x8c>
   d95a2:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d95a6:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d95aa:	d0d3      	beq.n	d9554 <rint+0x54>
   d95ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d95b0:	ea25 0503 	bic.w	r5, r5, r3
   d95b4:	fa42 f606 	asr.w	r6, r2, r6
   d95b8:	4335      	orrs	r5, r6
   d95ba:	e7cb      	b.n	d9554 <rint+0x54>
   d95bc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d95c0:	4310      	orrs	r0, r2
   d95c2:	d0e3      	beq.n	d958c <rint+0x8c>
   d95c4:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d95c8:	4310      	orrs	r0, r2
   d95ca:	4245      	negs	r5, r0
   d95cc:	4305      	orrs	r5, r0
   d95ce:	4814      	ldr	r0, [pc, #80]	; (d9620 <rint+0x120>)
   d95d0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d95d4:	e9d0 6700 	ldrd	r6, r7, [r0]
   d95d8:	0c59      	lsrs	r1, r3, #17
   d95da:	0b2d      	lsrs	r5, r5, #12
   d95dc:	0449      	lsls	r1, r1, #17
   d95de:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d95e2:	ea45 0301 	orr.w	r3, r5, r1
   d95e6:	4630      	mov	r0, r6
   d95e8:	4639      	mov	r1, r7
   d95ea:	f000 f8b5 	bl	d9758 <__adddf3>
   d95ee:	e9cd 0100 	strd	r0, r1, [sp]
   d95f2:	463b      	mov	r3, r7
   d95f4:	e9dd 0100 	ldrd	r0, r1, [sp]
   d95f8:	4632      	mov	r2, r6
   d95fa:	f000 f8ab 	bl	d9754 <__aeabi_dsub>
   d95fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9602:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d9606:	ec41 0b10 	vmov	d0, r0, r1
   d960a:	b003      	add	sp, #12
   d960c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d960e:	ee10 0a10 	vmov	r0, s0
   d9612:	f000 f8a1 	bl	d9758 <__adddf3>
   d9616:	ec41 0b10 	vmov	d0, r0, r1
   d961a:	e7b9      	b.n	d9590 <rint+0x90>
   d961c:	000fffff 	.word	0x000fffff
   d9620:	000db800 	.word	0x000db800
   d9624:	00000000 	.word	0x00000000

000d9628 <scalbn>:
   d9628:	b538      	push	{r3, r4, r5, lr}
   d962a:	ec53 2b10 	vmov	r2, r3, d0
   d962e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d9632:	461c      	mov	r4, r3
   d9634:	4605      	mov	r5, r0
   d9636:	bb81      	cbnz	r1, d969a <scalbn+0x72>
   d9638:	ee10 1a10 	vmov	r1, s0
   d963c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d9640:	4321      	orrs	r1, r4
   d9642:	d029      	beq.n	d9698 <scalbn+0x70>
   d9644:	4619      	mov	r1, r3
   d9646:	2200      	movs	r2, #0
   d9648:	4b3d      	ldr	r3, [pc, #244]	; (d9740 <scalbn+0x118>)
   d964a:	4c3e      	ldr	r4, [pc, #248]	; (d9744 <scalbn+0x11c>)
   d964c:	ee10 0a10 	vmov	r0, s0
   d9650:	f000 fa38 	bl	d9ac4 <__aeabi_dmul>
   d9654:	42a5      	cmp	r5, r4
   d9656:	4602      	mov	r2, r0
   d9658:	460b      	mov	r3, r1
   d965a:	db16      	blt.n	d968a <scalbn+0x62>
   d965c:	460c      	mov	r4, r1
   d965e:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d9662:	3936      	subs	r1, #54	; 0x36
   d9664:	4429      	add	r1, r5
   d9666:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d966a:	4281      	cmp	r1, r0
   d966c:	dc21      	bgt.n	d96b2 <scalbn+0x8a>
   d966e:	2900      	cmp	r1, #0
   d9670:	dc47      	bgt.n	d9702 <scalbn+0xda>
   d9672:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d9676:	da34      	bge.n	d96e2 <scalbn+0xba>
   d9678:	f24c 3150 	movw	r1, #50000	; 0xc350
   d967c:	428d      	cmp	r5, r1
   d967e:	dc18      	bgt.n	d96b2 <scalbn+0x8a>
   d9680:	2b00      	cmp	r3, #0
   d9682:	a127      	add	r1, pc, #156	; (adr r1, d9720 <scalbn+0xf8>)
   d9684:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9688:	db44      	blt.n	d9714 <scalbn+0xec>
   d968a:	a325      	add	r3, pc, #148	; (adr r3, d9720 <scalbn+0xf8>)
   d968c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9690:	f000 fa18 	bl	d9ac4 <__aeabi_dmul>
   d9694:	ec41 0b10 	vmov	d0, r0, r1
   d9698:	bd38      	pop	{r3, r4, r5, pc}
   d969a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d969e:	4281      	cmp	r1, r0
   d96a0:	d1e0      	bne.n	d9664 <scalbn+0x3c>
   d96a2:	ee10 0a10 	vmov	r0, s0
   d96a6:	4619      	mov	r1, r3
   d96a8:	f000 f856 	bl	d9758 <__adddf3>
   d96ac:	ec41 0b10 	vmov	d0, r0, r1
   d96b0:	bd38      	pop	{r3, r4, r5, pc}
   d96b2:	2b00      	cmp	r3, #0
   d96b4:	a11c      	add	r1, pc, #112	; (adr r1, d9728 <scalbn+0x100>)
   d96b6:	e9d1 0100 	ldrd	r0, r1, [r1]
   d96ba:	db07      	blt.n	d96cc <scalbn+0xa4>
   d96bc:	a31a      	add	r3, pc, #104	; (adr r3, d9728 <scalbn+0x100>)
   d96be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d96c2:	f000 f9ff 	bl	d9ac4 <__aeabi_dmul>
   d96c6:	ec41 0b10 	vmov	d0, r0, r1
   d96ca:	bd38      	pop	{r3, r4, r5, pc}
   d96cc:	a118      	add	r1, pc, #96	; (adr r1, d9730 <scalbn+0x108>)
   d96ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   d96d2:	a315      	add	r3, pc, #84	; (adr r3, d9728 <scalbn+0x100>)
   d96d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d96d8:	f000 f9f4 	bl	d9ac4 <__aeabi_dmul>
   d96dc:	ec41 0b10 	vmov	d0, r0, r1
   d96e0:	e7f3      	b.n	d96ca <scalbn+0xa2>
   d96e2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d96e6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d96ea:	3136      	adds	r1, #54	; 0x36
   d96ec:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d96f0:	4610      	mov	r0, r2
   d96f2:	4619      	mov	r1, r3
   d96f4:	2200      	movs	r2, #0
   d96f6:	4b14      	ldr	r3, [pc, #80]	; (d9748 <scalbn+0x120>)
   d96f8:	f000 f9e4 	bl	d9ac4 <__aeabi_dmul>
   d96fc:	ec41 0b10 	vmov	d0, r0, r1
   d9700:	bd38      	pop	{r3, r4, r5, pc}
   d9702:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d9706:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d970a:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d970e:	ec43 2b10 	vmov	d0, r2, r3
   d9712:	bd38      	pop	{r3, r4, r5, pc}
   d9714:	a108      	add	r1, pc, #32	; (adr r1, d9738 <scalbn+0x110>)
   d9716:	e9d1 0100 	ldrd	r0, r1, [r1]
   d971a:	e7b6      	b.n	d968a <scalbn+0x62>
   d971c:	f3af 8000 	nop.w
   d9720:	c2f8f359 	.word	0xc2f8f359
   d9724:	01a56e1f 	.word	0x01a56e1f
   d9728:	8800759c 	.word	0x8800759c
   d972c:	7e37e43c 	.word	0x7e37e43c
   d9730:	8800759c 	.word	0x8800759c
   d9734:	fe37e43c 	.word	0xfe37e43c
   d9738:	c2f8f359 	.word	0xc2f8f359
   d973c:	81a56e1f 	.word	0x81a56e1f
   d9740:	43500000 	.word	0x43500000
   d9744:	ffff3cb0 	.word	0xffff3cb0
   d9748:	3c900000 	.word	0x3c900000

000d974c <__aeabi_drsub>:
   d974c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9750:	e002      	b.n	d9758 <__adddf3>
   d9752:	bf00      	nop

000d9754 <__aeabi_dsub>:
   d9754:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9758 <__adddf3>:
   d9758:	b530      	push	{r4, r5, lr}
   d975a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d975e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9762:	ea94 0f05 	teq	r4, r5
   d9766:	bf08      	it	eq
   d9768:	ea90 0f02 	teqeq	r0, r2
   d976c:	bf1f      	itttt	ne
   d976e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9772:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9776:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d977a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d977e:	f000 80e2 	beq.w	d9946 <__adddf3+0x1ee>
   d9782:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9786:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d978a:	bfb8      	it	lt
   d978c:	426d      	neglt	r5, r5
   d978e:	dd0c      	ble.n	d97aa <__adddf3+0x52>
   d9790:	442c      	add	r4, r5
   d9792:	ea80 0202 	eor.w	r2, r0, r2
   d9796:	ea81 0303 	eor.w	r3, r1, r3
   d979a:	ea82 0000 	eor.w	r0, r2, r0
   d979e:	ea83 0101 	eor.w	r1, r3, r1
   d97a2:	ea80 0202 	eor.w	r2, r0, r2
   d97a6:	ea81 0303 	eor.w	r3, r1, r3
   d97aa:	2d36      	cmp	r5, #54	; 0x36
   d97ac:	bf88      	it	hi
   d97ae:	bd30      	pophi	{r4, r5, pc}
   d97b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d97b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d97b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d97bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d97c0:	d002      	beq.n	d97c8 <__adddf3+0x70>
   d97c2:	4240      	negs	r0, r0
   d97c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d97c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d97cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d97d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d97d4:	d002      	beq.n	d97dc <__adddf3+0x84>
   d97d6:	4252      	negs	r2, r2
   d97d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d97dc:	ea94 0f05 	teq	r4, r5
   d97e0:	f000 80a7 	beq.w	d9932 <__adddf3+0x1da>
   d97e4:	f1a4 0401 	sub.w	r4, r4, #1
   d97e8:	f1d5 0e20 	rsbs	lr, r5, #32
   d97ec:	db0d      	blt.n	d980a <__adddf3+0xb2>
   d97ee:	fa02 fc0e 	lsl.w	ip, r2, lr
   d97f2:	fa22 f205 	lsr.w	r2, r2, r5
   d97f6:	1880      	adds	r0, r0, r2
   d97f8:	f141 0100 	adc.w	r1, r1, #0
   d97fc:	fa03 f20e 	lsl.w	r2, r3, lr
   d9800:	1880      	adds	r0, r0, r2
   d9802:	fa43 f305 	asr.w	r3, r3, r5
   d9806:	4159      	adcs	r1, r3
   d9808:	e00e      	b.n	d9828 <__adddf3+0xd0>
   d980a:	f1a5 0520 	sub.w	r5, r5, #32
   d980e:	f10e 0e20 	add.w	lr, lr, #32
   d9812:	2a01      	cmp	r2, #1
   d9814:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9818:	bf28      	it	cs
   d981a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d981e:	fa43 f305 	asr.w	r3, r3, r5
   d9822:	18c0      	adds	r0, r0, r3
   d9824:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9828:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d982c:	d507      	bpl.n	d983e <__adddf3+0xe6>
   d982e:	f04f 0e00 	mov.w	lr, #0
   d9832:	f1dc 0c00 	rsbs	ip, ip, #0
   d9836:	eb7e 0000 	sbcs.w	r0, lr, r0
   d983a:	eb6e 0101 	sbc.w	r1, lr, r1
   d983e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9842:	d31b      	bcc.n	d987c <__adddf3+0x124>
   d9844:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9848:	d30c      	bcc.n	d9864 <__adddf3+0x10c>
   d984a:	0849      	lsrs	r1, r1, #1
   d984c:	ea5f 0030 	movs.w	r0, r0, rrx
   d9850:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9854:	f104 0401 	add.w	r4, r4, #1
   d9858:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d985c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9860:	f080 809a 	bcs.w	d9998 <__adddf3+0x240>
   d9864:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9868:	bf08      	it	eq
   d986a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d986e:	f150 0000 	adcs.w	r0, r0, #0
   d9872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9876:	ea41 0105 	orr.w	r1, r1, r5
   d987a:	bd30      	pop	{r4, r5, pc}
   d987c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9880:	4140      	adcs	r0, r0
   d9882:	eb41 0101 	adc.w	r1, r1, r1
   d9886:	3c01      	subs	r4, #1
   d9888:	bf28      	it	cs
   d988a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d988e:	d2e9      	bcs.n	d9864 <__adddf3+0x10c>
   d9890:	f091 0f00 	teq	r1, #0
   d9894:	bf04      	itt	eq
   d9896:	4601      	moveq	r1, r0
   d9898:	2000      	moveq	r0, #0
   d989a:	fab1 f381 	clz	r3, r1
   d989e:	bf08      	it	eq
   d98a0:	3320      	addeq	r3, #32
   d98a2:	f1a3 030b 	sub.w	r3, r3, #11
   d98a6:	f1b3 0220 	subs.w	r2, r3, #32
   d98aa:	da0c      	bge.n	d98c6 <__adddf3+0x16e>
   d98ac:	320c      	adds	r2, #12
   d98ae:	dd08      	ble.n	d98c2 <__adddf3+0x16a>
   d98b0:	f102 0c14 	add.w	ip, r2, #20
   d98b4:	f1c2 020c 	rsb	r2, r2, #12
   d98b8:	fa01 f00c 	lsl.w	r0, r1, ip
   d98bc:	fa21 f102 	lsr.w	r1, r1, r2
   d98c0:	e00c      	b.n	d98dc <__adddf3+0x184>
   d98c2:	f102 0214 	add.w	r2, r2, #20
   d98c6:	bfd8      	it	le
   d98c8:	f1c2 0c20 	rsble	ip, r2, #32
   d98cc:	fa01 f102 	lsl.w	r1, r1, r2
   d98d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d98d4:	bfdc      	itt	le
   d98d6:	ea41 010c 	orrle.w	r1, r1, ip
   d98da:	4090      	lslle	r0, r2
   d98dc:	1ae4      	subs	r4, r4, r3
   d98de:	bfa2      	ittt	ge
   d98e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d98e4:	4329      	orrge	r1, r5
   d98e6:	bd30      	popge	{r4, r5, pc}
   d98e8:	ea6f 0404 	mvn.w	r4, r4
   d98ec:	3c1f      	subs	r4, #31
   d98ee:	da1c      	bge.n	d992a <__adddf3+0x1d2>
   d98f0:	340c      	adds	r4, #12
   d98f2:	dc0e      	bgt.n	d9912 <__adddf3+0x1ba>
   d98f4:	f104 0414 	add.w	r4, r4, #20
   d98f8:	f1c4 0220 	rsb	r2, r4, #32
   d98fc:	fa20 f004 	lsr.w	r0, r0, r4
   d9900:	fa01 f302 	lsl.w	r3, r1, r2
   d9904:	ea40 0003 	orr.w	r0, r0, r3
   d9908:	fa21 f304 	lsr.w	r3, r1, r4
   d990c:	ea45 0103 	orr.w	r1, r5, r3
   d9910:	bd30      	pop	{r4, r5, pc}
   d9912:	f1c4 040c 	rsb	r4, r4, #12
   d9916:	f1c4 0220 	rsb	r2, r4, #32
   d991a:	fa20 f002 	lsr.w	r0, r0, r2
   d991e:	fa01 f304 	lsl.w	r3, r1, r4
   d9922:	ea40 0003 	orr.w	r0, r0, r3
   d9926:	4629      	mov	r1, r5
   d9928:	bd30      	pop	{r4, r5, pc}
   d992a:	fa21 f004 	lsr.w	r0, r1, r4
   d992e:	4629      	mov	r1, r5
   d9930:	bd30      	pop	{r4, r5, pc}
   d9932:	f094 0f00 	teq	r4, #0
   d9936:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d993a:	bf06      	itte	eq
   d993c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9940:	3401      	addeq	r4, #1
   d9942:	3d01      	subne	r5, #1
   d9944:	e74e      	b.n	d97e4 <__adddf3+0x8c>
   d9946:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d994a:	bf18      	it	ne
   d994c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9950:	d029      	beq.n	d99a6 <__adddf3+0x24e>
   d9952:	ea94 0f05 	teq	r4, r5
   d9956:	bf08      	it	eq
   d9958:	ea90 0f02 	teqeq	r0, r2
   d995c:	d005      	beq.n	d996a <__adddf3+0x212>
   d995e:	ea54 0c00 	orrs.w	ip, r4, r0
   d9962:	bf04      	itt	eq
   d9964:	4619      	moveq	r1, r3
   d9966:	4610      	moveq	r0, r2
   d9968:	bd30      	pop	{r4, r5, pc}
   d996a:	ea91 0f03 	teq	r1, r3
   d996e:	bf1e      	ittt	ne
   d9970:	2100      	movne	r1, #0
   d9972:	2000      	movne	r0, #0
   d9974:	bd30      	popne	{r4, r5, pc}
   d9976:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d997a:	d105      	bne.n	d9988 <__adddf3+0x230>
   d997c:	0040      	lsls	r0, r0, #1
   d997e:	4149      	adcs	r1, r1
   d9980:	bf28      	it	cs
   d9982:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9986:	bd30      	pop	{r4, r5, pc}
   d9988:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d998c:	bf3c      	itt	cc
   d998e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9992:	bd30      	popcc	{r4, r5, pc}
   d9994:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9998:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d999c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d99a0:	f04f 0000 	mov.w	r0, #0
   d99a4:	bd30      	pop	{r4, r5, pc}
   d99a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d99aa:	bf1a      	itte	ne
   d99ac:	4619      	movne	r1, r3
   d99ae:	4610      	movne	r0, r2
   d99b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d99b4:	bf1c      	itt	ne
   d99b6:	460b      	movne	r3, r1
   d99b8:	4602      	movne	r2, r0
   d99ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d99be:	bf06      	itte	eq
   d99c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d99c4:	ea91 0f03 	teqeq	r1, r3
   d99c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d99cc:	bd30      	pop	{r4, r5, pc}
   d99ce:	bf00      	nop

000d99d0 <__aeabi_ui2d>:
   d99d0:	f090 0f00 	teq	r0, #0
   d99d4:	bf04      	itt	eq
   d99d6:	2100      	moveq	r1, #0
   d99d8:	4770      	bxeq	lr
   d99da:	b530      	push	{r4, r5, lr}
   d99dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d99e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d99e4:	f04f 0500 	mov.w	r5, #0
   d99e8:	f04f 0100 	mov.w	r1, #0
   d99ec:	e750      	b.n	d9890 <__adddf3+0x138>
   d99ee:	bf00      	nop

000d99f0 <__aeabi_i2d>:
   d99f0:	f090 0f00 	teq	r0, #0
   d99f4:	bf04      	itt	eq
   d99f6:	2100      	moveq	r1, #0
   d99f8:	4770      	bxeq	lr
   d99fa:	b530      	push	{r4, r5, lr}
   d99fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9a00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9a04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9a08:	bf48      	it	mi
   d9a0a:	4240      	negmi	r0, r0
   d9a0c:	f04f 0100 	mov.w	r1, #0
   d9a10:	e73e      	b.n	d9890 <__adddf3+0x138>
   d9a12:	bf00      	nop

000d9a14 <__aeabi_f2d>:
   d9a14:	0042      	lsls	r2, r0, #1
   d9a16:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9a1a:	ea4f 0131 	mov.w	r1, r1, rrx
   d9a1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9a22:	bf1f      	itttt	ne
   d9a24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9a28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9a2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9a30:	4770      	bxne	lr
   d9a32:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9a36:	bf08      	it	eq
   d9a38:	4770      	bxeq	lr
   d9a3a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9a3e:	bf04      	itt	eq
   d9a40:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9a44:	4770      	bxeq	lr
   d9a46:	b530      	push	{r4, r5, lr}
   d9a48:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9a4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9a50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9a54:	e71c      	b.n	d9890 <__adddf3+0x138>
   d9a56:	bf00      	nop

000d9a58 <__aeabi_ul2d>:
   d9a58:	ea50 0201 	orrs.w	r2, r0, r1
   d9a5c:	bf08      	it	eq
   d9a5e:	4770      	bxeq	lr
   d9a60:	b530      	push	{r4, r5, lr}
   d9a62:	f04f 0500 	mov.w	r5, #0
   d9a66:	e00a      	b.n	d9a7e <__aeabi_l2d+0x16>

000d9a68 <__aeabi_l2d>:
   d9a68:	ea50 0201 	orrs.w	r2, r0, r1
   d9a6c:	bf08      	it	eq
   d9a6e:	4770      	bxeq	lr
   d9a70:	b530      	push	{r4, r5, lr}
   d9a72:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9a76:	d502      	bpl.n	d9a7e <__aeabi_l2d+0x16>
   d9a78:	4240      	negs	r0, r0
   d9a7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9a7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9a82:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9a86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9a8a:	f43f aed8 	beq.w	d983e <__adddf3+0xe6>
   d9a8e:	f04f 0203 	mov.w	r2, #3
   d9a92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9a96:	bf18      	it	ne
   d9a98:	3203      	addne	r2, #3
   d9a9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9a9e:	bf18      	it	ne
   d9aa0:	3203      	addne	r2, #3
   d9aa2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9aa6:	f1c2 0320 	rsb	r3, r2, #32
   d9aaa:	fa00 fc03 	lsl.w	ip, r0, r3
   d9aae:	fa20 f002 	lsr.w	r0, r0, r2
   d9ab2:	fa01 fe03 	lsl.w	lr, r1, r3
   d9ab6:	ea40 000e 	orr.w	r0, r0, lr
   d9aba:	fa21 f102 	lsr.w	r1, r1, r2
   d9abe:	4414      	add	r4, r2
   d9ac0:	e6bd      	b.n	d983e <__adddf3+0xe6>
   d9ac2:	bf00      	nop

000d9ac4 <__aeabi_dmul>:
   d9ac4:	b570      	push	{r4, r5, r6, lr}
   d9ac6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9aca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9ace:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9ad2:	bf1d      	ittte	ne
   d9ad4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9ad8:	ea94 0f0c 	teqne	r4, ip
   d9adc:	ea95 0f0c 	teqne	r5, ip
   d9ae0:	f000 f8de 	bleq	d9ca0 <__aeabi_dmul+0x1dc>
   d9ae4:	442c      	add	r4, r5
   d9ae6:	ea81 0603 	eor.w	r6, r1, r3
   d9aea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9aee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9af2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9af6:	bf18      	it	ne
   d9af8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9afc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9b04:	d038      	beq.n	d9b78 <__aeabi_dmul+0xb4>
   d9b06:	fba0 ce02 	umull	ip, lr, r0, r2
   d9b0a:	f04f 0500 	mov.w	r5, #0
   d9b0e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9b12:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9b16:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9b1a:	f04f 0600 	mov.w	r6, #0
   d9b1e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9b22:	f09c 0f00 	teq	ip, #0
   d9b26:	bf18      	it	ne
   d9b28:	f04e 0e01 	orrne.w	lr, lr, #1
   d9b2c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9b30:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9b34:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9b38:	d204      	bcs.n	d9b44 <__aeabi_dmul+0x80>
   d9b3a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9b3e:	416d      	adcs	r5, r5
   d9b40:	eb46 0606 	adc.w	r6, r6, r6
   d9b44:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9b48:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9b4c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9b50:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9b54:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9b58:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9b5c:	bf88      	it	hi
   d9b5e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9b62:	d81e      	bhi.n	d9ba2 <__aeabi_dmul+0xde>
   d9b64:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9b68:	bf08      	it	eq
   d9b6a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9b6e:	f150 0000 	adcs.w	r0, r0, #0
   d9b72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9b76:	bd70      	pop	{r4, r5, r6, pc}
   d9b78:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9b7c:	ea46 0101 	orr.w	r1, r6, r1
   d9b80:	ea40 0002 	orr.w	r0, r0, r2
   d9b84:	ea81 0103 	eor.w	r1, r1, r3
   d9b88:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9b8c:	bfc2      	ittt	gt
   d9b8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9b92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9b96:	bd70      	popgt	{r4, r5, r6, pc}
   d9b98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9b9c:	f04f 0e00 	mov.w	lr, #0
   d9ba0:	3c01      	subs	r4, #1
   d9ba2:	f300 80ab 	bgt.w	d9cfc <__aeabi_dmul+0x238>
   d9ba6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9baa:	bfde      	ittt	le
   d9bac:	2000      	movle	r0, #0
   d9bae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9bb2:	bd70      	pople	{r4, r5, r6, pc}
   d9bb4:	f1c4 0400 	rsb	r4, r4, #0
   d9bb8:	3c20      	subs	r4, #32
   d9bba:	da35      	bge.n	d9c28 <__aeabi_dmul+0x164>
   d9bbc:	340c      	adds	r4, #12
   d9bbe:	dc1b      	bgt.n	d9bf8 <__aeabi_dmul+0x134>
   d9bc0:	f104 0414 	add.w	r4, r4, #20
   d9bc4:	f1c4 0520 	rsb	r5, r4, #32
   d9bc8:	fa00 f305 	lsl.w	r3, r0, r5
   d9bcc:	fa20 f004 	lsr.w	r0, r0, r4
   d9bd0:	fa01 f205 	lsl.w	r2, r1, r5
   d9bd4:	ea40 0002 	orr.w	r0, r0, r2
   d9bd8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9bdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9be0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9be4:	fa21 f604 	lsr.w	r6, r1, r4
   d9be8:	eb42 0106 	adc.w	r1, r2, r6
   d9bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9bf0:	bf08      	it	eq
   d9bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9bf6:	bd70      	pop	{r4, r5, r6, pc}
   d9bf8:	f1c4 040c 	rsb	r4, r4, #12
   d9bfc:	f1c4 0520 	rsb	r5, r4, #32
   d9c00:	fa00 f304 	lsl.w	r3, r0, r4
   d9c04:	fa20 f005 	lsr.w	r0, r0, r5
   d9c08:	fa01 f204 	lsl.w	r2, r1, r4
   d9c0c:	ea40 0002 	orr.w	r0, r0, r2
   d9c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9c14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9c18:	f141 0100 	adc.w	r1, r1, #0
   d9c1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9c20:	bf08      	it	eq
   d9c22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9c26:	bd70      	pop	{r4, r5, r6, pc}
   d9c28:	f1c4 0520 	rsb	r5, r4, #32
   d9c2c:	fa00 f205 	lsl.w	r2, r0, r5
   d9c30:	ea4e 0e02 	orr.w	lr, lr, r2
   d9c34:	fa20 f304 	lsr.w	r3, r0, r4
   d9c38:	fa01 f205 	lsl.w	r2, r1, r5
   d9c3c:	ea43 0302 	orr.w	r3, r3, r2
   d9c40:	fa21 f004 	lsr.w	r0, r1, r4
   d9c44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9c48:	fa21 f204 	lsr.w	r2, r1, r4
   d9c4c:	ea20 0002 	bic.w	r0, r0, r2
   d9c50:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9c54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9c58:	bf08      	it	eq
   d9c5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9c5e:	bd70      	pop	{r4, r5, r6, pc}
   d9c60:	f094 0f00 	teq	r4, #0
   d9c64:	d10f      	bne.n	d9c86 <__aeabi_dmul+0x1c2>
   d9c66:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9c6a:	0040      	lsls	r0, r0, #1
   d9c6c:	eb41 0101 	adc.w	r1, r1, r1
   d9c70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9c74:	bf08      	it	eq
   d9c76:	3c01      	subeq	r4, #1
   d9c78:	d0f7      	beq.n	d9c6a <__aeabi_dmul+0x1a6>
   d9c7a:	ea41 0106 	orr.w	r1, r1, r6
   d9c7e:	f095 0f00 	teq	r5, #0
   d9c82:	bf18      	it	ne
   d9c84:	4770      	bxne	lr
   d9c86:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9c8a:	0052      	lsls	r2, r2, #1
   d9c8c:	eb43 0303 	adc.w	r3, r3, r3
   d9c90:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9c94:	bf08      	it	eq
   d9c96:	3d01      	subeq	r5, #1
   d9c98:	d0f7      	beq.n	d9c8a <__aeabi_dmul+0x1c6>
   d9c9a:	ea43 0306 	orr.w	r3, r3, r6
   d9c9e:	4770      	bx	lr
   d9ca0:	ea94 0f0c 	teq	r4, ip
   d9ca4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9ca8:	bf18      	it	ne
   d9caa:	ea95 0f0c 	teqne	r5, ip
   d9cae:	d00c      	beq.n	d9cca <__aeabi_dmul+0x206>
   d9cb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9cb4:	bf18      	it	ne
   d9cb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9cba:	d1d1      	bne.n	d9c60 <__aeabi_dmul+0x19c>
   d9cbc:	ea81 0103 	eor.w	r1, r1, r3
   d9cc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9cc4:	f04f 0000 	mov.w	r0, #0
   d9cc8:	bd70      	pop	{r4, r5, r6, pc}
   d9cca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9cce:	bf06      	itte	eq
   d9cd0:	4610      	moveq	r0, r2
   d9cd2:	4619      	moveq	r1, r3
   d9cd4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9cd8:	d019      	beq.n	d9d0e <__aeabi_dmul+0x24a>
   d9cda:	ea94 0f0c 	teq	r4, ip
   d9cde:	d102      	bne.n	d9ce6 <__aeabi_dmul+0x222>
   d9ce0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9ce4:	d113      	bne.n	d9d0e <__aeabi_dmul+0x24a>
   d9ce6:	ea95 0f0c 	teq	r5, ip
   d9cea:	d105      	bne.n	d9cf8 <__aeabi_dmul+0x234>
   d9cec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9cf0:	bf1c      	itt	ne
   d9cf2:	4610      	movne	r0, r2
   d9cf4:	4619      	movne	r1, r3
   d9cf6:	d10a      	bne.n	d9d0e <__aeabi_dmul+0x24a>
   d9cf8:	ea81 0103 	eor.w	r1, r1, r3
   d9cfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9d00:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9d04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9d08:	f04f 0000 	mov.w	r0, #0
   d9d0c:	bd70      	pop	{r4, r5, r6, pc}
   d9d0e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9d12:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9d16:	bd70      	pop	{r4, r5, r6, pc}

000d9d18 <__aeabi_ddiv>:
   d9d18:	b570      	push	{r4, r5, r6, lr}
   d9d1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9d1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9d22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9d26:	bf1d      	ittte	ne
   d9d28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9d2c:	ea94 0f0c 	teqne	r4, ip
   d9d30:	ea95 0f0c 	teqne	r5, ip
   d9d34:	f000 f8a7 	bleq	d9e86 <__aeabi_ddiv+0x16e>
   d9d38:	eba4 0405 	sub.w	r4, r4, r5
   d9d3c:	ea81 0e03 	eor.w	lr, r1, r3
   d9d40:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9d44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9d48:	f000 8088 	beq.w	d9e5c <__aeabi_ddiv+0x144>
   d9d4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9d50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9d54:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9d58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9d5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9d60:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9d64:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9d68:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9d6c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9d70:	429d      	cmp	r5, r3
   d9d72:	bf08      	it	eq
   d9d74:	4296      	cmpeq	r6, r2
   d9d76:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9d7a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9d7e:	d202      	bcs.n	d9d86 <__aeabi_ddiv+0x6e>
   d9d80:	085b      	lsrs	r3, r3, #1
   d9d82:	ea4f 0232 	mov.w	r2, r2, rrx
   d9d86:	1ab6      	subs	r6, r6, r2
   d9d88:	eb65 0503 	sbc.w	r5, r5, r3
   d9d8c:	085b      	lsrs	r3, r3, #1
   d9d8e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9d92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9d96:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9d9a:	ebb6 0e02 	subs.w	lr, r6, r2
   d9d9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9da2:	bf22      	ittt	cs
   d9da4:	1ab6      	subcs	r6, r6, r2
   d9da6:	4675      	movcs	r5, lr
   d9da8:	ea40 000c 	orrcs.w	r0, r0, ip
   d9dac:	085b      	lsrs	r3, r3, #1
   d9dae:	ea4f 0232 	mov.w	r2, r2, rrx
   d9db2:	ebb6 0e02 	subs.w	lr, r6, r2
   d9db6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9dba:	bf22      	ittt	cs
   d9dbc:	1ab6      	subcs	r6, r6, r2
   d9dbe:	4675      	movcs	r5, lr
   d9dc0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9dc4:	085b      	lsrs	r3, r3, #1
   d9dc6:	ea4f 0232 	mov.w	r2, r2, rrx
   d9dca:	ebb6 0e02 	subs.w	lr, r6, r2
   d9dce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9dd2:	bf22      	ittt	cs
   d9dd4:	1ab6      	subcs	r6, r6, r2
   d9dd6:	4675      	movcs	r5, lr
   d9dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9ddc:	085b      	lsrs	r3, r3, #1
   d9dde:	ea4f 0232 	mov.w	r2, r2, rrx
   d9de2:	ebb6 0e02 	subs.w	lr, r6, r2
   d9de6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9dea:	bf22      	ittt	cs
   d9dec:	1ab6      	subcs	r6, r6, r2
   d9dee:	4675      	movcs	r5, lr
   d9df0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9df4:	ea55 0e06 	orrs.w	lr, r5, r6
   d9df8:	d018      	beq.n	d9e2c <__aeabi_ddiv+0x114>
   d9dfa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9dfe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9e02:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9e06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9e0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9e0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9e12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9e16:	d1c0      	bne.n	d9d9a <__aeabi_ddiv+0x82>
   d9e18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9e1c:	d10b      	bne.n	d9e36 <__aeabi_ddiv+0x11e>
   d9e1e:	ea41 0100 	orr.w	r1, r1, r0
   d9e22:	f04f 0000 	mov.w	r0, #0
   d9e26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9e2a:	e7b6      	b.n	d9d9a <__aeabi_ddiv+0x82>
   d9e2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9e30:	bf04      	itt	eq
   d9e32:	4301      	orreq	r1, r0
   d9e34:	2000      	moveq	r0, #0
   d9e36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9e3a:	bf88      	it	hi
   d9e3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9e40:	f63f aeaf 	bhi.w	d9ba2 <__aeabi_dmul+0xde>
   d9e44:	ebb5 0c03 	subs.w	ip, r5, r3
   d9e48:	bf04      	itt	eq
   d9e4a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9e4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9e52:	f150 0000 	adcs.w	r0, r0, #0
   d9e56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9e5a:	bd70      	pop	{r4, r5, r6, pc}
   d9e5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9e60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9e64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9e68:	bfc2      	ittt	gt
   d9e6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9e6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9e72:	bd70      	popgt	{r4, r5, r6, pc}
   d9e74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9e78:	f04f 0e00 	mov.w	lr, #0
   d9e7c:	3c01      	subs	r4, #1
   d9e7e:	e690      	b.n	d9ba2 <__aeabi_dmul+0xde>
   d9e80:	ea45 0e06 	orr.w	lr, r5, r6
   d9e84:	e68d      	b.n	d9ba2 <__aeabi_dmul+0xde>
   d9e86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9e8a:	ea94 0f0c 	teq	r4, ip
   d9e8e:	bf08      	it	eq
   d9e90:	ea95 0f0c 	teqeq	r5, ip
   d9e94:	f43f af3b 	beq.w	d9d0e <__aeabi_dmul+0x24a>
   d9e98:	ea94 0f0c 	teq	r4, ip
   d9e9c:	d10a      	bne.n	d9eb4 <__aeabi_ddiv+0x19c>
   d9e9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9ea2:	f47f af34 	bne.w	d9d0e <__aeabi_dmul+0x24a>
   d9ea6:	ea95 0f0c 	teq	r5, ip
   d9eaa:	f47f af25 	bne.w	d9cf8 <__aeabi_dmul+0x234>
   d9eae:	4610      	mov	r0, r2
   d9eb0:	4619      	mov	r1, r3
   d9eb2:	e72c      	b.n	d9d0e <__aeabi_dmul+0x24a>
   d9eb4:	ea95 0f0c 	teq	r5, ip
   d9eb8:	d106      	bne.n	d9ec8 <__aeabi_ddiv+0x1b0>
   d9eba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9ebe:	f43f aefd 	beq.w	d9cbc <__aeabi_dmul+0x1f8>
   d9ec2:	4610      	mov	r0, r2
   d9ec4:	4619      	mov	r1, r3
   d9ec6:	e722      	b.n	d9d0e <__aeabi_dmul+0x24a>
   d9ec8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9ecc:	bf18      	it	ne
   d9ece:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9ed2:	f47f aec5 	bne.w	d9c60 <__aeabi_dmul+0x19c>
   d9ed6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9eda:	f47f af0d 	bne.w	d9cf8 <__aeabi_dmul+0x234>
   d9ede:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9ee2:	f47f aeeb 	bne.w	d9cbc <__aeabi_dmul+0x1f8>
   d9ee6:	e712      	b.n	d9d0e <__aeabi_dmul+0x24a>

000d9ee8 <__gedf2>:
   d9ee8:	f04f 3cff 	mov.w	ip, #4294967295
   d9eec:	e006      	b.n	d9efc <__cmpdf2+0x4>
   d9eee:	bf00      	nop

000d9ef0 <__ledf2>:
   d9ef0:	f04f 0c01 	mov.w	ip, #1
   d9ef4:	e002      	b.n	d9efc <__cmpdf2+0x4>
   d9ef6:	bf00      	nop

000d9ef8 <__cmpdf2>:
   d9ef8:	f04f 0c01 	mov.w	ip, #1
   d9efc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9f00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9f04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9f08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9f0c:	bf18      	it	ne
   d9f0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9f12:	d01b      	beq.n	d9f4c <__cmpdf2+0x54>
   d9f14:	b001      	add	sp, #4
   d9f16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9f1a:	bf0c      	ite	eq
   d9f1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9f20:	ea91 0f03 	teqne	r1, r3
   d9f24:	bf02      	ittt	eq
   d9f26:	ea90 0f02 	teqeq	r0, r2
   d9f2a:	2000      	moveq	r0, #0
   d9f2c:	4770      	bxeq	lr
   d9f2e:	f110 0f00 	cmn.w	r0, #0
   d9f32:	ea91 0f03 	teq	r1, r3
   d9f36:	bf58      	it	pl
   d9f38:	4299      	cmppl	r1, r3
   d9f3a:	bf08      	it	eq
   d9f3c:	4290      	cmpeq	r0, r2
   d9f3e:	bf2c      	ite	cs
   d9f40:	17d8      	asrcs	r0, r3, #31
   d9f42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9f46:	f040 0001 	orr.w	r0, r0, #1
   d9f4a:	4770      	bx	lr
   d9f4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9f54:	d102      	bne.n	d9f5c <__cmpdf2+0x64>
   d9f56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9f5a:	d107      	bne.n	d9f6c <__cmpdf2+0x74>
   d9f5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9f60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9f64:	d1d6      	bne.n	d9f14 <__cmpdf2+0x1c>
   d9f66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9f6a:	d0d3      	beq.n	d9f14 <__cmpdf2+0x1c>
   d9f6c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9f70:	4770      	bx	lr
   d9f72:	bf00      	nop

000d9f74 <__aeabi_cdrcmple>:
   d9f74:	4684      	mov	ip, r0
   d9f76:	4610      	mov	r0, r2
   d9f78:	4662      	mov	r2, ip
   d9f7a:	468c      	mov	ip, r1
   d9f7c:	4619      	mov	r1, r3
   d9f7e:	4663      	mov	r3, ip
   d9f80:	e000      	b.n	d9f84 <__aeabi_cdcmpeq>
   d9f82:	bf00      	nop

000d9f84 <__aeabi_cdcmpeq>:
   d9f84:	b501      	push	{r0, lr}
   d9f86:	f7ff ffb7 	bl	d9ef8 <__cmpdf2>
   d9f8a:	2800      	cmp	r0, #0
   d9f8c:	bf48      	it	mi
   d9f8e:	f110 0f00 	cmnmi.w	r0, #0
   d9f92:	bd01      	pop	{r0, pc}

000d9f94 <__aeabi_dcmpeq>:
   d9f94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9f98:	f7ff fff4 	bl	d9f84 <__aeabi_cdcmpeq>
   d9f9c:	bf0c      	ite	eq
   d9f9e:	2001      	moveq	r0, #1
   d9fa0:	2000      	movne	r0, #0
   d9fa2:	f85d fb08 	ldr.w	pc, [sp], #8
   d9fa6:	bf00      	nop

000d9fa8 <__aeabi_dcmplt>:
   d9fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9fac:	f7ff ffea 	bl	d9f84 <__aeabi_cdcmpeq>
   d9fb0:	bf34      	ite	cc
   d9fb2:	2001      	movcc	r0, #1
   d9fb4:	2000      	movcs	r0, #0
   d9fb6:	f85d fb08 	ldr.w	pc, [sp], #8
   d9fba:	bf00      	nop

000d9fbc <__aeabi_dcmple>:
   d9fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9fc0:	f7ff ffe0 	bl	d9f84 <__aeabi_cdcmpeq>
   d9fc4:	bf94      	ite	ls
   d9fc6:	2001      	movls	r0, #1
   d9fc8:	2000      	movhi	r0, #0
   d9fca:	f85d fb08 	ldr.w	pc, [sp], #8
   d9fce:	bf00      	nop

000d9fd0 <__aeabi_dcmpge>:
   d9fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9fd4:	f7ff ffce 	bl	d9f74 <__aeabi_cdrcmple>
   d9fd8:	bf94      	ite	ls
   d9fda:	2001      	movls	r0, #1
   d9fdc:	2000      	movhi	r0, #0
   d9fde:	f85d fb08 	ldr.w	pc, [sp], #8
   d9fe2:	bf00      	nop

000d9fe4 <__aeabi_dcmpgt>:
   d9fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9fe8:	f7ff ffc4 	bl	d9f74 <__aeabi_cdrcmple>
   d9fec:	bf34      	ite	cc
   d9fee:	2001      	movcc	r0, #1
   d9ff0:	2000      	movcs	r0, #0
   d9ff2:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ff6:	bf00      	nop

000d9ff8 <__aeabi_dcmpun>:
   d9ff8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da000:	d102      	bne.n	da008 <__aeabi_dcmpun+0x10>
   da002:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da006:	d10a      	bne.n	da01e <__aeabi_dcmpun+0x26>
   da008:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da00c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da010:	d102      	bne.n	da018 <__aeabi_dcmpun+0x20>
   da012:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da016:	d102      	bne.n	da01e <__aeabi_dcmpun+0x26>
   da018:	f04f 0000 	mov.w	r0, #0
   da01c:	4770      	bx	lr
   da01e:	f04f 0001 	mov.w	r0, #1
   da022:	4770      	bx	lr

000da024 <__aeabi_d2iz>:
   da024:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da028:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da02c:	d215      	bcs.n	da05a <__aeabi_d2iz+0x36>
   da02e:	d511      	bpl.n	da054 <__aeabi_d2iz+0x30>
   da030:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da034:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da038:	d912      	bls.n	da060 <__aeabi_d2iz+0x3c>
   da03a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da03e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da042:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da046:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da04a:	fa23 f002 	lsr.w	r0, r3, r2
   da04e:	bf18      	it	ne
   da050:	4240      	negne	r0, r0
   da052:	4770      	bx	lr
   da054:	f04f 0000 	mov.w	r0, #0
   da058:	4770      	bx	lr
   da05a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da05e:	d105      	bne.n	da06c <__aeabi_d2iz+0x48>
   da060:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da064:	bf08      	it	eq
   da066:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da06a:	4770      	bx	lr
   da06c:	f04f 0000 	mov.w	r0, #0
   da070:	4770      	bx	lr
   da072:	bf00      	nop

000da074 <__aeabi_d2uiz>:
   da074:	004a      	lsls	r2, r1, #1
   da076:	d211      	bcs.n	da09c <__aeabi_d2uiz+0x28>
   da078:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da07c:	d211      	bcs.n	da0a2 <__aeabi_d2uiz+0x2e>
   da07e:	d50d      	bpl.n	da09c <__aeabi_d2uiz+0x28>
   da080:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da084:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da088:	d40e      	bmi.n	da0a8 <__aeabi_d2uiz+0x34>
   da08a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da08e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da092:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da096:	fa23 f002 	lsr.w	r0, r3, r2
   da09a:	4770      	bx	lr
   da09c:	f04f 0000 	mov.w	r0, #0
   da0a0:	4770      	bx	lr
   da0a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da0a6:	d102      	bne.n	da0ae <__aeabi_d2uiz+0x3a>
   da0a8:	f04f 30ff 	mov.w	r0, #4294967295
   da0ac:	4770      	bx	lr
   da0ae:	f04f 0000 	mov.w	r0, #0
   da0b2:	4770      	bx	lr

000da0b4 <__aeabi_d2f>:
   da0b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da0b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da0bc:	bf24      	itt	cs
   da0be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da0c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da0c6:	d90d      	bls.n	da0e4 <__aeabi_d2f+0x30>
   da0c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da0cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da0d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da0d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da0d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da0dc:	bf08      	it	eq
   da0de:	f020 0001 	biceq.w	r0, r0, #1
   da0e2:	4770      	bx	lr
   da0e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da0e8:	d121      	bne.n	da12e <__aeabi_d2f+0x7a>
   da0ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da0ee:	bfbc      	itt	lt
   da0f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da0f4:	4770      	bxlt	lr
   da0f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da0fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da0fe:	f1c2 0218 	rsb	r2, r2, #24
   da102:	f1c2 0c20 	rsb	ip, r2, #32
   da106:	fa10 f30c 	lsls.w	r3, r0, ip
   da10a:	fa20 f002 	lsr.w	r0, r0, r2
   da10e:	bf18      	it	ne
   da110:	f040 0001 	orrne.w	r0, r0, #1
   da114:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da118:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da11c:	fa03 fc0c 	lsl.w	ip, r3, ip
   da120:	ea40 000c 	orr.w	r0, r0, ip
   da124:	fa23 f302 	lsr.w	r3, r3, r2
   da128:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da12c:	e7cc      	b.n	da0c8 <__aeabi_d2f+0x14>
   da12e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da132:	d107      	bne.n	da144 <__aeabi_d2f+0x90>
   da134:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da138:	bf1e      	ittt	ne
   da13a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da13e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da142:	4770      	bxne	lr
   da144:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da148:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da14c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da150:	4770      	bx	lr
   da152:	bf00      	nop

000da154 <__aeabi_frsub>:
   da154:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   da158:	e002      	b.n	da160 <__addsf3>
   da15a:	bf00      	nop

000da15c <__aeabi_fsub>:
   da15c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000da160 <__addsf3>:
   da160:	0042      	lsls	r2, r0, #1
   da162:	bf1f      	itttt	ne
   da164:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   da168:	ea92 0f03 	teqne	r2, r3
   da16c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   da170:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da174:	d06a      	beq.n	da24c <__addsf3+0xec>
   da176:	ea4f 6212 	mov.w	r2, r2, lsr #24
   da17a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   da17e:	bfc1      	itttt	gt
   da180:	18d2      	addgt	r2, r2, r3
   da182:	4041      	eorgt	r1, r0
   da184:	4048      	eorgt	r0, r1
   da186:	4041      	eorgt	r1, r0
   da188:	bfb8      	it	lt
   da18a:	425b      	neglt	r3, r3
   da18c:	2b19      	cmp	r3, #25
   da18e:	bf88      	it	hi
   da190:	4770      	bxhi	lr
   da192:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   da196:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da19a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   da19e:	bf18      	it	ne
   da1a0:	4240      	negne	r0, r0
   da1a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da1a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   da1aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   da1ae:	bf18      	it	ne
   da1b0:	4249      	negne	r1, r1
   da1b2:	ea92 0f03 	teq	r2, r3
   da1b6:	d03f      	beq.n	da238 <__addsf3+0xd8>
   da1b8:	f1a2 0201 	sub.w	r2, r2, #1
   da1bc:	fa41 fc03 	asr.w	ip, r1, r3
   da1c0:	eb10 000c 	adds.w	r0, r0, ip
   da1c4:	f1c3 0320 	rsb	r3, r3, #32
   da1c8:	fa01 f103 	lsl.w	r1, r1, r3
   da1cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da1d0:	d502      	bpl.n	da1d8 <__addsf3+0x78>
   da1d2:	4249      	negs	r1, r1
   da1d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   da1d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   da1dc:	d313      	bcc.n	da206 <__addsf3+0xa6>
   da1de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   da1e2:	d306      	bcc.n	da1f2 <__addsf3+0x92>
   da1e4:	0840      	lsrs	r0, r0, #1
   da1e6:	ea4f 0131 	mov.w	r1, r1, rrx
   da1ea:	f102 0201 	add.w	r2, r2, #1
   da1ee:	2afe      	cmp	r2, #254	; 0xfe
   da1f0:	d251      	bcs.n	da296 <__addsf3+0x136>
   da1f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   da1f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   da1fa:	bf08      	it	eq
   da1fc:	f020 0001 	biceq.w	r0, r0, #1
   da200:	ea40 0003 	orr.w	r0, r0, r3
   da204:	4770      	bx	lr
   da206:	0049      	lsls	r1, r1, #1
   da208:	eb40 0000 	adc.w	r0, r0, r0
   da20c:	3a01      	subs	r2, #1
   da20e:	bf28      	it	cs
   da210:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   da214:	d2ed      	bcs.n	da1f2 <__addsf3+0x92>
   da216:	fab0 fc80 	clz	ip, r0
   da21a:	f1ac 0c08 	sub.w	ip, ip, #8
   da21e:	ebb2 020c 	subs.w	r2, r2, ip
   da222:	fa00 f00c 	lsl.w	r0, r0, ip
   da226:	bfaa      	itet	ge
   da228:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   da22c:	4252      	neglt	r2, r2
   da22e:	4318      	orrge	r0, r3
   da230:	bfbc      	itt	lt
   da232:	40d0      	lsrlt	r0, r2
   da234:	4318      	orrlt	r0, r3
   da236:	4770      	bx	lr
   da238:	f092 0f00 	teq	r2, #0
   da23c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   da240:	bf06      	itte	eq
   da242:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   da246:	3201      	addeq	r2, #1
   da248:	3b01      	subne	r3, #1
   da24a:	e7b5      	b.n	da1b8 <__addsf3+0x58>
   da24c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   da250:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   da254:	bf18      	it	ne
   da256:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   da25a:	d021      	beq.n	da2a0 <__addsf3+0x140>
   da25c:	ea92 0f03 	teq	r2, r3
   da260:	d004      	beq.n	da26c <__addsf3+0x10c>
   da262:	f092 0f00 	teq	r2, #0
   da266:	bf08      	it	eq
   da268:	4608      	moveq	r0, r1
   da26a:	4770      	bx	lr
   da26c:	ea90 0f01 	teq	r0, r1
   da270:	bf1c      	itt	ne
   da272:	2000      	movne	r0, #0
   da274:	4770      	bxne	lr
   da276:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   da27a:	d104      	bne.n	da286 <__addsf3+0x126>
   da27c:	0040      	lsls	r0, r0, #1
   da27e:	bf28      	it	cs
   da280:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   da284:	4770      	bx	lr
   da286:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   da28a:	bf3c      	itt	cc
   da28c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   da290:	4770      	bxcc	lr
   da292:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   da296:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   da29a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da29e:	4770      	bx	lr
   da2a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   da2a4:	bf16      	itet	ne
   da2a6:	4608      	movne	r0, r1
   da2a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   da2ac:	4601      	movne	r1, r0
   da2ae:	0242      	lsls	r2, r0, #9
   da2b0:	bf06      	itte	eq
   da2b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   da2b6:	ea90 0f01 	teqeq	r0, r1
   da2ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   da2be:	4770      	bx	lr

000da2c0 <__aeabi_ui2f>:
   da2c0:	f04f 0300 	mov.w	r3, #0
   da2c4:	e004      	b.n	da2d0 <__aeabi_i2f+0x8>
   da2c6:	bf00      	nop

000da2c8 <__aeabi_i2f>:
   da2c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   da2cc:	bf48      	it	mi
   da2ce:	4240      	negmi	r0, r0
   da2d0:	ea5f 0c00 	movs.w	ip, r0
   da2d4:	bf08      	it	eq
   da2d6:	4770      	bxeq	lr
   da2d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   da2dc:	4601      	mov	r1, r0
   da2de:	f04f 0000 	mov.w	r0, #0
   da2e2:	e01c      	b.n	da31e <__aeabi_l2f+0x2a>

000da2e4 <__aeabi_ul2f>:
   da2e4:	ea50 0201 	orrs.w	r2, r0, r1
   da2e8:	bf08      	it	eq
   da2ea:	4770      	bxeq	lr
   da2ec:	f04f 0300 	mov.w	r3, #0
   da2f0:	e00a      	b.n	da308 <__aeabi_l2f+0x14>
   da2f2:	bf00      	nop

000da2f4 <__aeabi_l2f>:
   da2f4:	ea50 0201 	orrs.w	r2, r0, r1
   da2f8:	bf08      	it	eq
   da2fa:	4770      	bxeq	lr
   da2fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   da300:	d502      	bpl.n	da308 <__aeabi_l2f+0x14>
   da302:	4240      	negs	r0, r0
   da304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da308:	ea5f 0c01 	movs.w	ip, r1
   da30c:	bf02      	ittt	eq
   da30e:	4684      	moveq	ip, r0
   da310:	4601      	moveq	r1, r0
   da312:	2000      	moveq	r0, #0
   da314:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   da318:	bf08      	it	eq
   da31a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   da31e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   da322:	fabc f28c 	clz	r2, ip
   da326:	3a08      	subs	r2, #8
   da328:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   da32c:	db10      	blt.n	da350 <__aeabi_l2f+0x5c>
   da32e:	fa01 fc02 	lsl.w	ip, r1, r2
   da332:	4463      	add	r3, ip
   da334:	fa00 fc02 	lsl.w	ip, r0, r2
   da338:	f1c2 0220 	rsb	r2, r2, #32
   da33c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da340:	fa20 f202 	lsr.w	r2, r0, r2
   da344:	eb43 0002 	adc.w	r0, r3, r2
   da348:	bf08      	it	eq
   da34a:	f020 0001 	biceq.w	r0, r0, #1
   da34e:	4770      	bx	lr
   da350:	f102 0220 	add.w	r2, r2, #32
   da354:	fa01 fc02 	lsl.w	ip, r1, r2
   da358:	f1c2 0220 	rsb	r2, r2, #32
   da35c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   da360:	fa21 f202 	lsr.w	r2, r1, r2
   da364:	eb43 0002 	adc.w	r0, r3, r2
   da368:	bf08      	it	eq
   da36a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   da36e:	4770      	bx	lr

000da370 <__aeabi_ldivmod>:
   da370:	b97b      	cbnz	r3, da392 <__aeabi_ldivmod+0x22>
   da372:	b972      	cbnz	r2, da392 <__aeabi_ldivmod+0x22>
   da374:	2900      	cmp	r1, #0
   da376:	bfbe      	ittt	lt
   da378:	2000      	movlt	r0, #0
   da37a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   da37e:	e006      	blt.n	da38e <__aeabi_ldivmod+0x1e>
   da380:	bf08      	it	eq
   da382:	2800      	cmpeq	r0, #0
   da384:	bf1c      	itt	ne
   da386:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   da38a:	f04f 30ff 	movne.w	r0, #4294967295
   da38e:	f000 b9d5 	b.w	da73c <__aeabi_idiv0>
   da392:	f1ad 0c08 	sub.w	ip, sp, #8
   da396:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da39a:	2900      	cmp	r1, #0
   da39c:	db09      	blt.n	da3b2 <__aeabi_ldivmod+0x42>
   da39e:	2b00      	cmp	r3, #0
   da3a0:	db1a      	blt.n	da3d8 <__aeabi_ldivmod+0x68>
   da3a2:	f000 f869 	bl	da478 <__udivmoddi4>
   da3a6:	f8dd e004 	ldr.w	lr, [sp, #4]
   da3aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da3ae:	b004      	add	sp, #16
   da3b0:	4770      	bx	lr
   da3b2:	4240      	negs	r0, r0
   da3b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da3b8:	2b00      	cmp	r3, #0
   da3ba:	db1b      	blt.n	da3f4 <__aeabi_ldivmod+0x84>
   da3bc:	f000 f85c 	bl	da478 <__udivmoddi4>
   da3c0:	f8dd e004 	ldr.w	lr, [sp, #4]
   da3c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da3c8:	b004      	add	sp, #16
   da3ca:	4240      	negs	r0, r0
   da3cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da3d0:	4252      	negs	r2, r2
   da3d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da3d6:	4770      	bx	lr
   da3d8:	4252      	negs	r2, r2
   da3da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da3de:	f000 f84b 	bl	da478 <__udivmoddi4>
   da3e2:	f8dd e004 	ldr.w	lr, [sp, #4]
   da3e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da3ea:	b004      	add	sp, #16
   da3ec:	4240      	negs	r0, r0
   da3ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da3f2:	4770      	bx	lr
   da3f4:	4252      	negs	r2, r2
   da3f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da3fa:	f000 f83d 	bl	da478 <__udivmoddi4>
   da3fe:	f8dd e004 	ldr.w	lr, [sp, #4]
   da402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da406:	b004      	add	sp, #16
   da408:	4252      	negs	r2, r2
   da40a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da40e:	4770      	bx	lr

000da410 <__aeabi_f2lz>:
   da410:	ee07 0a90 	vmov	s15, r0
   da414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   da418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da41c:	d401      	bmi.n	da422 <__aeabi_f2lz+0x12>
   da41e:	f000 b80b 	b.w	da438 <__aeabi_f2ulz>
   da422:	eef1 7a67 	vneg.f32	s15, s15
   da426:	b508      	push	{r3, lr}
   da428:	ee17 0a90 	vmov	r0, s15
   da42c:	f000 f804 	bl	da438 <__aeabi_f2ulz>
   da430:	4240      	negs	r0, r0
   da432:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da436:	bd08      	pop	{r3, pc}

000da438 <__aeabi_f2ulz>:
   da438:	b5d0      	push	{r4, r6, r7, lr}
   da43a:	f7ff faeb 	bl	d9a14 <__aeabi_f2d>
   da43e:	4b0c      	ldr	r3, [pc, #48]	; (da470 <__aeabi_f2ulz+0x38>)
   da440:	2200      	movs	r2, #0
   da442:	4606      	mov	r6, r0
   da444:	460f      	mov	r7, r1
   da446:	f7ff fb3d 	bl	d9ac4 <__aeabi_dmul>
   da44a:	f7ff fe13 	bl	da074 <__aeabi_d2uiz>
   da44e:	4604      	mov	r4, r0
   da450:	f7ff fabe 	bl	d99d0 <__aeabi_ui2d>
   da454:	4b07      	ldr	r3, [pc, #28]	; (da474 <__aeabi_f2ulz+0x3c>)
   da456:	2200      	movs	r2, #0
   da458:	f7ff fb34 	bl	d9ac4 <__aeabi_dmul>
   da45c:	4602      	mov	r2, r0
   da45e:	460b      	mov	r3, r1
   da460:	4630      	mov	r0, r6
   da462:	4639      	mov	r1, r7
   da464:	f7ff f976 	bl	d9754 <__aeabi_dsub>
   da468:	f7ff fe04 	bl	da074 <__aeabi_d2uiz>
   da46c:	4621      	mov	r1, r4
   da46e:	bdd0      	pop	{r4, r6, r7, pc}
   da470:	3df00000 	.word	0x3df00000
   da474:	41f00000 	.word	0x41f00000

000da478 <__udivmoddi4>:
   da478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da47c:	9d08      	ldr	r5, [sp, #32]
   da47e:	4604      	mov	r4, r0
   da480:	468c      	mov	ip, r1
   da482:	2b00      	cmp	r3, #0
   da484:	f040 8083 	bne.w	da58e <__udivmoddi4+0x116>
   da488:	428a      	cmp	r2, r1
   da48a:	4617      	mov	r7, r2
   da48c:	d947      	bls.n	da51e <__udivmoddi4+0xa6>
   da48e:	fab2 f282 	clz	r2, r2
   da492:	b142      	cbz	r2, da4a6 <__udivmoddi4+0x2e>
   da494:	f1c2 0020 	rsb	r0, r2, #32
   da498:	fa24 f000 	lsr.w	r0, r4, r0
   da49c:	4091      	lsls	r1, r2
   da49e:	4097      	lsls	r7, r2
   da4a0:	ea40 0c01 	orr.w	ip, r0, r1
   da4a4:	4094      	lsls	r4, r2
   da4a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da4aa:	0c23      	lsrs	r3, r4, #16
   da4ac:	fbbc f6f8 	udiv	r6, ip, r8
   da4b0:	fa1f fe87 	uxth.w	lr, r7
   da4b4:	fb08 c116 	mls	r1, r8, r6, ip
   da4b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da4bc:	fb06 f10e 	mul.w	r1, r6, lr
   da4c0:	4299      	cmp	r1, r3
   da4c2:	d909      	bls.n	da4d8 <__udivmoddi4+0x60>
   da4c4:	18fb      	adds	r3, r7, r3
   da4c6:	f106 30ff 	add.w	r0, r6, #4294967295
   da4ca:	f080 8119 	bcs.w	da700 <__udivmoddi4+0x288>
   da4ce:	4299      	cmp	r1, r3
   da4d0:	f240 8116 	bls.w	da700 <__udivmoddi4+0x288>
   da4d4:	3e02      	subs	r6, #2
   da4d6:	443b      	add	r3, r7
   da4d8:	1a5b      	subs	r3, r3, r1
   da4da:	b2a4      	uxth	r4, r4
   da4dc:	fbb3 f0f8 	udiv	r0, r3, r8
   da4e0:	fb08 3310 	mls	r3, r8, r0, r3
   da4e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   da4e8:	fb00 fe0e 	mul.w	lr, r0, lr
   da4ec:	45a6      	cmp	lr, r4
   da4ee:	d909      	bls.n	da504 <__udivmoddi4+0x8c>
   da4f0:	193c      	adds	r4, r7, r4
   da4f2:	f100 33ff 	add.w	r3, r0, #4294967295
   da4f6:	f080 8105 	bcs.w	da704 <__udivmoddi4+0x28c>
   da4fa:	45a6      	cmp	lr, r4
   da4fc:	f240 8102 	bls.w	da704 <__udivmoddi4+0x28c>
   da500:	3802      	subs	r0, #2
   da502:	443c      	add	r4, r7
   da504:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   da508:	eba4 040e 	sub.w	r4, r4, lr
   da50c:	2600      	movs	r6, #0
   da50e:	b11d      	cbz	r5, da518 <__udivmoddi4+0xa0>
   da510:	40d4      	lsrs	r4, r2
   da512:	2300      	movs	r3, #0
   da514:	e9c5 4300 	strd	r4, r3, [r5]
   da518:	4631      	mov	r1, r6
   da51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da51e:	b902      	cbnz	r2, da522 <__udivmoddi4+0xaa>
   da520:	deff      	udf	#255	; 0xff
   da522:	fab2 f282 	clz	r2, r2
   da526:	2a00      	cmp	r2, #0
   da528:	d150      	bne.n	da5cc <__udivmoddi4+0x154>
   da52a:	1bcb      	subs	r3, r1, r7
   da52c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da530:	fa1f f887 	uxth.w	r8, r7
   da534:	2601      	movs	r6, #1
   da536:	fbb3 fcfe 	udiv	ip, r3, lr
   da53a:	0c21      	lsrs	r1, r4, #16
   da53c:	fb0e 331c 	mls	r3, lr, ip, r3
   da540:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da544:	fb08 f30c 	mul.w	r3, r8, ip
   da548:	428b      	cmp	r3, r1
   da54a:	d907      	bls.n	da55c <__udivmoddi4+0xe4>
   da54c:	1879      	adds	r1, r7, r1
   da54e:	f10c 30ff 	add.w	r0, ip, #4294967295
   da552:	d202      	bcs.n	da55a <__udivmoddi4+0xe2>
   da554:	428b      	cmp	r3, r1
   da556:	f200 80e9 	bhi.w	da72c <__udivmoddi4+0x2b4>
   da55a:	4684      	mov	ip, r0
   da55c:	1ac9      	subs	r1, r1, r3
   da55e:	b2a3      	uxth	r3, r4
   da560:	fbb1 f0fe 	udiv	r0, r1, lr
   da564:	fb0e 1110 	mls	r1, lr, r0, r1
   da568:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   da56c:	fb08 f800 	mul.w	r8, r8, r0
   da570:	45a0      	cmp	r8, r4
   da572:	d907      	bls.n	da584 <__udivmoddi4+0x10c>
   da574:	193c      	adds	r4, r7, r4
   da576:	f100 33ff 	add.w	r3, r0, #4294967295
   da57a:	d202      	bcs.n	da582 <__udivmoddi4+0x10a>
   da57c:	45a0      	cmp	r8, r4
   da57e:	f200 80d9 	bhi.w	da734 <__udivmoddi4+0x2bc>
   da582:	4618      	mov	r0, r3
   da584:	eba4 0408 	sub.w	r4, r4, r8
   da588:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   da58c:	e7bf      	b.n	da50e <__udivmoddi4+0x96>
   da58e:	428b      	cmp	r3, r1
   da590:	d909      	bls.n	da5a6 <__udivmoddi4+0x12e>
   da592:	2d00      	cmp	r5, #0
   da594:	f000 80b1 	beq.w	da6fa <__udivmoddi4+0x282>
   da598:	2600      	movs	r6, #0
   da59a:	e9c5 0100 	strd	r0, r1, [r5]
   da59e:	4630      	mov	r0, r6
   da5a0:	4631      	mov	r1, r6
   da5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da5a6:	fab3 f683 	clz	r6, r3
   da5aa:	2e00      	cmp	r6, #0
   da5ac:	d14a      	bne.n	da644 <__udivmoddi4+0x1cc>
   da5ae:	428b      	cmp	r3, r1
   da5b0:	d302      	bcc.n	da5b8 <__udivmoddi4+0x140>
   da5b2:	4282      	cmp	r2, r0
   da5b4:	f200 80b8 	bhi.w	da728 <__udivmoddi4+0x2b0>
   da5b8:	1a84      	subs	r4, r0, r2
   da5ba:	eb61 0103 	sbc.w	r1, r1, r3
   da5be:	2001      	movs	r0, #1
   da5c0:	468c      	mov	ip, r1
   da5c2:	2d00      	cmp	r5, #0
   da5c4:	d0a8      	beq.n	da518 <__udivmoddi4+0xa0>
   da5c6:	e9c5 4c00 	strd	r4, ip, [r5]
   da5ca:	e7a5      	b.n	da518 <__udivmoddi4+0xa0>
   da5cc:	f1c2 0320 	rsb	r3, r2, #32
   da5d0:	fa20 f603 	lsr.w	r6, r0, r3
   da5d4:	4097      	lsls	r7, r2
   da5d6:	fa01 f002 	lsl.w	r0, r1, r2
   da5da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da5de:	40d9      	lsrs	r1, r3
   da5e0:	4330      	orrs	r0, r6
   da5e2:	0c03      	lsrs	r3, r0, #16
   da5e4:	fbb1 f6fe 	udiv	r6, r1, lr
   da5e8:	fa1f f887 	uxth.w	r8, r7
   da5ec:	fb0e 1116 	mls	r1, lr, r6, r1
   da5f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da5f4:	fb06 f108 	mul.w	r1, r6, r8
   da5f8:	4299      	cmp	r1, r3
   da5fa:	fa04 f402 	lsl.w	r4, r4, r2
   da5fe:	d909      	bls.n	da614 <__udivmoddi4+0x19c>
   da600:	18fb      	adds	r3, r7, r3
   da602:	f106 3cff 	add.w	ip, r6, #4294967295
   da606:	f080 808d 	bcs.w	da724 <__udivmoddi4+0x2ac>
   da60a:	4299      	cmp	r1, r3
   da60c:	f240 808a 	bls.w	da724 <__udivmoddi4+0x2ac>
   da610:	3e02      	subs	r6, #2
   da612:	443b      	add	r3, r7
   da614:	1a5b      	subs	r3, r3, r1
   da616:	b281      	uxth	r1, r0
   da618:	fbb3 f0fe 	udiv	r0, r3, lr
   da61c:	fb0e 3310 	mls	r3, lr, r0, r3
   da620:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da624:	fb00 f308 	mul.w	r3, r0, r8
   da628:	428b      	cmp	r3, r1
   da62a:	d907      	bls.n	da63c <__udivmoddi4+0x1c4>
   da62c:	1879      	adds	r1, r7, r1
   da62e:	f100 3cff 	add.w	ip, r0, #4294967295
   da632:	d273      	bcs.n	da71c <__udivmoddi4+0x2a4>
   da634:	428b      	cmp	r3, r1
   da636:	d971      	bls.n	da71c <__udivmoddi4+0x2a4>
   da638:	3802      	subs	r0, #2
   da63a:	4439      	add	r1, r7
   da63c:	1acb      	subs	r3, r1, r3
   da63e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   da642:	e778      	b.n	da536 <__udivmoddi4+0xbe>
   da644:	f1c6 0c20 	rsb	ip, r6, #32
   da648:	fa03 f406 	lsl.w	r4, r3, r6
   da64c:	fa22 f30c 	lsr.w	r3, r2, ip
   da650:	431c      	orrs	r4, r3
   da652:	fa20 f70c 	lsr.w	r7, r0, ip
   da656:	fa01 f306 	lsl.w	r3, r1, r6
   da65a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   da65e:	fa21 f10c 	lsr.w	r1, r1, ip
   da662:	431f      	orrs	r7, r3
   da664:	0c3b      	lsrs	r3, r7, #16
   da666:	fbb1 f9fe 	udiv	r9, r1, lr
   da66a:	fa1f f884 	uxth.w	r8, r4
   da66e:	fb0e 1119 	mls	r1, lr, r9, r1
   da672:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   da676:	fb09 fa08 	mul.w	sl, r9, r8
   da67a:	458a      	cmp	sl, r1
   da67c:	fa02 f206 	lsl.w	r2, r2, r6
   da680:	fa00 f306 	lsl.w	r3, r0, r6
   da684:	d908      	bls.n	da698 <__udivmoddi4+0x220>
   da686:	1861      	adds	r1, r4, r1
   da688:	f109 30ff 	add.w	r0, r9, #4294967295
   da68c:	d248      	bcs.n	da720 <__udivmoddi4+0x2a8>
   da68e:	458a      	cmp	sl, r1
   da690:	d946      	bls.n	da720 <__udivmoddi4+0x2a8>
   da692:	f1a9 0902 	sub.w	r9, r9, #2
   da696:	4421      	add	r1, r4
   da698:	eba1 010a 	sub.w	r1, r1, sl
   da69c:	b2bf      	uxth	r7, r7
   da69e:	fbb1 f0fe 	udiv	r0, r1, lr
   da6a2:	fb0e 1110 	mls	r1, lr, r0, r1
   da6a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   da6aa:	fb00 f808 	mul.w	r8, r0, r8
   da6ae:	45b8      	cmp	r8, r7
   da6b0:	d907      	bls.n	da6c2 <__udivmoddi4+0x24a>
   da6b2:	19e7      	adds	r7, r4, r7
   da6b4:	f100 31ff 	add.w	r1, r0, #4294967295
   da6b8:	d22e      	bcs.n	da718 <__udivmoddi4+0x2a0>
   da6ba:	45b8      	cmp	r8, r7
   da6bc:	d92c      	bls.n	da718 <__udivmoddi4+0x2a0>
   da6be:	3802      	subs	r0, #2
   da6c0:	4427      	add	r7, r4
   da6c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   da6c6:	eba7 0708 	sub.w	r7, r7, r8
   da6ca:	fba0 8902 	umull	r8, r9, r0, r2
   da6ce:	454f      	cmp	r7, r9
   da6d0:	46c6      	mov	lr, r8
   da6d2:	4649      	mov	r1, r9
   da6d4:	d31a      	bcc.n	da70c <__udivmoddi4+0x294>
   da6d6:	d017      	beq.n	da708 <__udivmoddi4+0x290>
   da6d8:	b15d      	cbz	r5, da6f2 <__udivmoddi4+0x27a>
   da6da:	ebb3 020e 	subs.w	r2, r3, lr
   da6de:	eb67 0701 	sbc.w	r7, r7, r1
   da6e2:	fa07 fc0c 	lsl.w	ip, r7, ip
   da6e6:	40f2      	lsrs	r2, r6
   da6e8:	ea4c 0202 	orr.w	r2, ip, r2
   da6ec:	40f7      	lsrs	r7, r6
   da6ee:	e9c5 2700 	strd	r2, r7, [r5]
   da6f2:	2600      	movs	r6, #0
   da6f4:	4631      	mov	r1, r6
   da6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da6fa:	462e      	mov	r6, r5
   da6fc:	4628      	mov	r0, r5
   da6fe:	e70b      	b.n	da518 <__udivmoddi4+0xa0>
   da700:	4606      	mov	r6, r0
   da702:	e6e9      	b.n	da4d8 <__udivmoddi4+0x60>
   da704:	4618      	mov	r0, r3
   da706:	e6fd      	b.n	da504 <__udivmoddi4+0x8c>
   da708:	4543      	cmp	r3, r8
   da70a:	d2e5      	bcs.n	da6d8 <__udivmoddi4+0x260>
   da70c:	ebb8 0e02 	subs.w	lr, r8, r2
   da710:	eb69 0104 	sbc.w	r1, r9, r4
   da714:	3801      	subs	r0, #1
   da716:	e7df      	b.n	da6d8 <__udivmoddi4+0x260>
   da718:	4608      	mov	r0, r1
   da71a:	e7d2      	b.n	da6c2 <__udivmoddi4+0x24a>
   da71c:	4660      	mov	r0, ip
   da71e:	e78d      	b.n	da63c <__udivmoddi4+0x1c4>
   da720:	4681      	mov	r9, r0
   da722:	e7b9      	b.n	da698 <__udivmoddi4+0x220>
   da724:	4666      	mov	r6, ip
   da726:	e775      	b.n	da614 <__udivmoddi4+0x19c>
   da728:	4630      	mov	r0, r6
   da72a:	e74a      	b.n	da5c2 <__udivmoddi4+0x14a>
   da72c:	f1ac 0c02 	sub.w	ip, ip, #2
   da730:	4439      	add	r1, r7
   da732:	e713      	b.n	da55c <__udivmoddi4+0xe4>
   da734:	3802      	subs	r0, #2
   da736:	443c      	add	r4, r7
   da738:	e724      	b.n	da584 <__udivmoddi4+0x10c>
   da73a:	bf00      	nop

000da73c <__aeabi_idiv0>:
   da73c:	4770      	bx	lr
   da73e:	bf00      	nop

000da740 <atoi>:
   da740:	220a      	movs	r2, #10
   da742:	2100      	movs	r1, #0
   da744:	f000 b940 	b.w	da9c8 <strtol>

000da748 <__cxa_atexit>:
   da748:	b510      	push	{r4, lr}
   da74a:	4c05      	ldr	r4, [pc, #20]	; (da760 <__cxa_atexit+0x18>)
   da74c:	4613      	mov	r3, r2
   da74e:	b12c      	cbz	r4, da75c <__cxa_atexit+0x14>
   da750:	460a      	mov	r2, r1
   da752:	4601      	mov	r1, r0
   da754:	2002      	movs	r0, #2
   da756:	f3af 8000 	nop.w
   da75a:	bd10      	pop	{r4, pc}
   da75c:	4620      	mov	r0, r4
   da75e:	e7fc      	b.n	da75a <__cxa_atexit+0x12>
   da760:	00000000 	.word	0x00000000

000da764 <ldiv>:
   da764:	2900      	cmp	r1, #0
   da766:	b510      	push	{r4, lr}
   da768:	fb91 f4f2 	sdiv	r4, r1, r2
   da76c:	fb02 1314 	mls	r3, r2, r4, r1
   da770:	db06      	blt.n	da780 <ldiv+0x1c>
   da772:	2b00      	cmp	r3, #0
   da774:	da01      	bge.n	da77a <ldiv+0x16>
   da776:	3401      	adds	r4, #1
   da778:	1a9b      	subs	r3, r3, r2
   da77a:	e9c0 4300 	strd	r4, r3, [r0]
   da77e:	bd10      	pop	{r4, pc}
   da780:	2b00      	cmp	r3, #0
   da782:	bfc4      	itt	gt
   da784:	f104 34ff 	addgt.w	r4, r4, #4294967295
   da788:	189b      	addgt	r3, r3, r2
   da78a:	e7f6      	b.n	da77a <ldiv+0x16>

000da78c <memcpy>:
   da78c:	440a      	add	r2, r1
   da78e:	4291      	cmp	r1, r2
   da790:	f100 33ff 	add.w	r3, r0, #4294967295
   da794:	d100      	bne.n	da798 <memcpy+0xc>
   da796:	4770      	bx	lr
   da798:	b510      	push	{r4, lr}
   da79a:	f811 4b01 	ldrb.w	r4, [r1], #1
   da79e:	f803 4f01 	strb.w	r4, [r3, #1]!
   da7a2:	4291      	cmp	r1, r2
   da7a4:	d1f9      	bne.n	da79a <memcpy+0xe>
   da7a6:	bd10      	pop	{r4, pc}

000da7a8 <memmove>:
   da7a8:	4288      	cmp	r0, r1
   da7aa:	b510      	push	{r4, lr}
   da7ac:	eb01 0402 	add.w	r4, r1, r2
   da7b0:	d902      	bls.n	da7b8 <memmove+0x10>
   da7b2:	4284      	cmp	r4, r0
   da7b4:	4623      	mov	r3, r4
   da7b6:	d807      	bhi.n	da7c8 <memmove+0x20>
   da7b8:	1e43      	subs	r3, r0, #1
   da7ba:	42a1      	cmp	r1, r4
   da7bc:	d008      	beq.n	da7d0 <memmove+0x28>
   da7be:	f811 2b01 	ldrb.w	r2, [r1], #1
   da7c2:	f803 2f01 	strb.w	r2, [r3, #1]!
   da7c6:	e7f8      	b.n	da7ba <memmove+0x12>
   da7c8:	4402      	add	r2, r0
   da7ca:	4601      	mov	r1, r0
   da7cc:	428a      	cmp	r2, r1
   da7ce:	d100      	bne.n	da7d2 <memmove+0x2a>
   da7d0:	bd10      	pop	{r4, pc}
   da7d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   da7d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   da7da:	e7f7      	b.n	da7cc <memmove+0x24>

000da7dc <memset>:
   da7dc:	4402      	add	r2, r0
   da7de:	4603      	mov	r3, r0
   da7e0:	4293      	cmp	r3, r2
   da7e2:	d100      	bne.n	da7e6 <memset+0xa>
   da7e4:	4770      	bx	lr
   da7e6:	f803 1b01 	strb.w	r1, [r3], #1
   da7ea:	e7f9      	b.n	da7e0 <memset+0x4>

000da7ec <srand>:
   da7ec:	b538      	push	{r3, r4, r5, lr}
   da7ee:	4b0d      	ldr	r3, [pc, #52]	; (da824 <srand+0x38>)
   da7f0:	681d      	ldr	r5, [r3, #0]
   da7f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da7f4:	4604      	mov	r4, r0
   da7f6:	b97b      	cbnz	r3, da818 <srand+0x2c>
   da7f8:	2018      	movs	r0, #24
   da7fa:	f7fc f95d 	bl	d6ab8 <malloc>
   da7fe:	4a0a      	ldr	r2, [pc, #40]	; (da828 <srand+0x3c>)
   da800:	4b0a      	ldr	r3, [pc, #40]	; (da82c <srand+0x40>)
   da802:	63a8      	str	r0, [r5, #56]	; 0x38
   da804:	e9c0 2300 	strd	r2, r3, [r0]
   da808:	4b09      	ldr	r3, [pc, #36]	; (da830 <srand+0x44>)
   da80a:	6083      	str	r3, [r0, #8]
   da80c:	230b      	movs	r3, #11
   da80e:	8183      	strh	r3, [r0, #12]
   da810:	2201      	movs	r2, #1
   da812:	2300      	movs	r3, #0
   da814:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da818:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da81a:	2200      	movs	r2, #0
   da81c:	611c      	str	r4, [r3, #16]
   da81e:	615a      	str	r2, [r3, #20]
   da820:	bd38      	pop	{r3, r4, r5, pc}
   da822:	bf00      	nop
   da824:	2003e370 	.word	0x2003e370
   da828:	abcd330e 	.word	0xabcd330e
   da82c:	e66d1234 	.word	0xe66d1234
   da830:	0005deec 	.word	0x0005deec

000da834 <strcmp>:
   da834:	f810 2b01 	ldrb.w	r2, [r0], #1
   da838:	f811 3b01 	ldrb.w	r3, [r1], #1
   da83c:	2a01      	cmp	r2, #1
   da83e:	bf28      	it	cs
   da840:	429a      	cmpcs	r2, r3
   da842:	d0f7      	beq.n	da834 <strcmp>
   da844:	1ad0      	subs	r0, r2, r3
   da846:	4770      	bx	lr

000da848 <strcpy>:
   da848:	4603      	mov	r3, r0
   da84a:	f811 2b01 	ldrb.w	r2, [r1], #1
   da84e:	f803 2b01 	strb.w	r2, [r3], #1
   da852:	2a00      	cmp	r2, #0
   da854:	d1f9      	bne.n	da84a <strcpy+0x2>
   da856:	4770      	bx	lr

000da858 <strlen>:
   da858:	4603      	mov	r3, r0
   da85a:	f813 2b01 	ldrb.w	r2, [r3], #1
   da85e:	2a00      	cmp	r2, #0
   da860:	d1fb      	bne.n	da85a <strlen+0x2>
   da862:	1a18      	subs	r0, r3, r0
   da864:	3801      	subs	r0, #1
   da866:	4770      	bx	lr

000da868 <strncasecmp>:
   da868:	b570      	push	{r4, r5, r6, lr}
   da86a:	4e0f      	ldr	r6, [pc, #60]	; (da8a8 <strncasecmp+0x40>)
   da86c:	4604      	mov	r4, r0
   da86e:	440a      	add	r2, r1
   da870:	428a      	cmp	r2, r1
   da872:	d101      	bne.n	da878 <strncasecmp+0x10>
   da874:	2000      	movs	r0, #0
   da876:	e013      	b.n	da8a0 <strncasecmp+0x38>
   da878:	f814 3b01 	ldrb.w	r3, [r4], #1
   da87c:	5d98      	ldrb	r0, [r3, r6]
   da87e:	f000 0003 	and.w	r0, r0, #3
   da882:	2801      	cmp	r0, #1
   da884:	f811 0b01 	ldrb.w	r0, [r1], #1
   da888:	5c35      	ldrb	r5, [r6, r0]
   da88a:	f005 0503 	and.w	r5, r5, #3
   da88e:	bf08      	it	eq
   da890:	3320      	addeq	r3, #32
   da892:	2d01      	cmp	r5, #1
   da894:	bf08      	it	eq
   da896:	3020      	addeq	r0, #32
   da898:	1a1b      	subs	r3, r3, r0
   da89a:	d102      	bne.n	da8a2 <strncasecmp+0x3a>
   da89c:	2800      	cmp	r0, #0
   da89e:	d1e7      	bne.n	da870 <strncasecmp+0x8>
   da8a0:	bd70      	pop	{r4, r5, r6, pc}
   da8a2:	4618      	mov	r0, r3
   da8a4:	e7fc      	b.n	da8a0 <strncasecmp+0x38>
   da8a6:	bf00      	nop
   da8a8:	000db811 	.word	0x000db811

000da8ac <strncpy>:
   da8ac:	b510      	push	{r4, lr}
   da8ae:	3901      	subs	r1, #1
   da8b0:	4603      	mov	r3, r0
   da8b2:	b132      	cbz	r2, da8c2 <strncpy+0x16>
   da8b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da8b8:	f803 4b01 	strb.w	r4, [r3], #1
   da8bc:	3a01      	subs	r2, #1
   da8be:	2c00      	cmp	r4, #0
   da8c0:	d1f7      	bne.n	da8b2 <strncpy+0x6>
   da8c2:	441a      	add	r2, r3
   da8c4:	2100      	movs	r1, #0
   da8c6:	4293      	cmp	r3, r2
   da8c8:	d100      	bne.n	da8cc <strncpy+0x20>
   da8ca:	bd10      	pop	{r4, pc}
   da8cc:	f803 1b01 	strb.w	r1, [r3], #1
   da8d0:	e7f9      	b.n	da8c6 <strncpy+0x1a>
	...

000da8d4 <_strtol_l.isra.0>:
   da8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da8d8:	4e3a      	ldr	r6, [pc, #232]	; (da9c4 <_strtol_l.isra.0+0xf0>)
   da8da:	4686      	mov	lr, r0
   da8dc:	468c      	mov	ip, r1
   da8de:	4660      	mov	r0, ip
   da8e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da8e4:	5da5      	ldrb	r5, [r4, r6]
   da8e6:	f015 0508 	ands.w	r5, r5, #8
   da8ea:	d1f8      	bne.n	da8de <_strtol_l.isra.0+0xa>
   da8ec:	2c2d      	cmp	r4, #45	; 0x2d
   da8ee:	d133      	bne.n	da958 <_strtol_l.isra.0+0x84>
   da8f0:	f89c 4000 	ldrb.w	r4, [ip]
   da8f4:	f04f 0801 	mov.w	r8, #1
   da8f8:	f100 0c02 	add.w	ip, r0, #2
   da8fc:	2b00      	cmp	r3, #0
   da8fe:	d05c      	beq.n	da9ba <_strtol_l.isra.0+0xe6>
   da900:	2b10      	cmp	r3, #16
   da902:	d10c      	bne.n	da91e <_strtol_l.isra.0+0x4a>
   da904:	2c30      	cmp	r4, #48	; 0x30
   da906:	d10a      	bne.n	da91e <_strtol_l.isra.0+0x4a>
   da908:	f89c 0000 	ldrb.w	r0, [ip]
   da90c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da910:	2858      	cmp	r0, #88	; 0x58
   da912:	d14d      	bne.n	da9b0 <_strtol_l.isra.0+0xdc>
   da914:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da918:	2310      	movs	r3, #16
   da91a:	f10c 0c02 	add.w	ip, ip, #2
   da91e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da922:	3f01      	subs	r7, #1
   da924:	2600      	movs	r6, #0
   da926:	fbb7 f9f3 	udiv	r9, r7, r3
   da92a:	4630      	mov	r0, r6
   da92c:	fb03 7a19 	mls	sl, r3, r9, r7
   da930:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da934:	2d09      	cmp	r5, #9
   da936:	d818      	bhi.n	da96a <_strtol_l.isra.0+0x96>
   da938:	462c      	mov	r4, r5
   da93a:	42a3      	cmp	r3, r4
   da93c:	dd24      	ble.n	da988 <_strtol_l.isra.0+0xb4>
   da93e:	1c75      	adds	r5, r6, #1
   da940:	d007      	beq.n	da952 <_strtol_l.isra.0+0x7e>
   da942:	4581      	cmp	r9, r0
   da944:	d31d      	bcc.n	da982 <_strtol_l.isra.0+0xae>
   da946:	d101      	bne.n	da94c <_strtol_l.isra.0+0x78>
   da948:	45a2      	cmp	sl, r4
   da94a:	db1a      	blt.n	da982 <_strtol_l.isra.0+0xae>
   da94c:	fb00 4003 	mla	r0, r0, r3, r4
   da950:	2601      	movs	r6, #1
   da952:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da956:	e7eb      	b.n	da930 <_strtol_l.isra.0+0x5c>
   da958:	2c2b      	cmp	r4, #43	; 0x2b
   da95a:	bf08      	it	eq
   da95c:	f89c 4000 	ldrbeq.w	r4, [ip]
   da960:	46a8      	mov	r8, r5
   da962:	bf08      	it	eq
   da964:	f100 0c02 	addeq.w	ip, r0, #2
   da968:	e7c8      	b.n	da8fc <_strtol_l.isra.0+0x28>
   da96a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da96e:	2d19      	cmp	r5, #25
   da970:	d801      	bhi.n	da976 <_strtol_l.isra.0+0xa2>
   da972:	3c37      	subs	r4, #55	; 0x37
   da974:	e7e1      	b.n	da93a <_strtol_l.isra.0+0x66>
   da976:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da97a:	2d19      	cmp	r5, #25
   da97c:	d804      	bhi.n	da988 <_strtol_l.isra.0+0xb4>
   da97e:	3c57      	subs	r4, #87	; 0x57
   da980:	e7db      	b.n	da93a <_strtol_l.isra.0+0x66>
   da982:	f04f 36ff 	mov.w	r6, #4294967295
   da986:	e7e4      	b.n	da952 <_strtol_l.isra.0+0x7e>
   da988:	1c73      	adds	r3, r6, #1
   da98a:	d106      	bne.n	da99a <_strtol_l.isra.0+0xc6>
   da98c:	2322      	movs	r3, #34	; 0x22
   da98e:	f8ce 3000 	str.w	r3, [lr]
   da992:	4638      	mov	r0, r7
   da994:	b942      	cbnz	r2, da9a8 <_strtol_l.isra.0+0xd4>
   da996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da99a:	f1b8 0f00 	cmp.w	r8, #0
   da99e:	d000      	beq.n	da9a2 <_strtol_l.isra.0+0xce>
   da9a0:	4240      	negs	r0, r0
   da9a2:	2a00      	cmp	r2, #0
   da9a4:	d0f7      	beq.n	da996 <_strtol_l.isra.0+0xc2>
   da9a6:	b10e      	cbz	r6, da9ac <_strtol_l.isra.0+0xd8>
   da9a8:	f10c 31ff 	add.w	r1, ip, #4294967295
   da9ac:	6011      	str	r1, [r2, #0]
   da9ae:	e7f2      	b.n	da996 <_strtol_l.isra.0+0xc2>
   da9b0:	2430      	movs	r4, #48	; 0x30
   da9b2:	2b00      	cmp	r3, #0
   da9b4:	d1b3      	bne.n	da91e <_strtol_l.isra.0+0x4a>
   da9b6:	2308      	movs	r3, #8
   da9b8:	e7b1      	b.n	da91e <_strtol_l.isra.0+0x4a>
   da9ba:	2c30      	cmp	r4, #48	; 0x30
   da9bc:	d0a4      	beq.n	da908 <_strtol_l.isra.0+0x34>
   da9be:	230a      	movs	r3, #10
   da9c0:	e7ad      	b.n	da91e <_strtol_l.isra.0+0x4a>
   da9c2:	bf00      	nop
   da9c4:	000db811 	.word	0x000db811

000da9c8 <strtol>:
   da9c8:	4613      	mov	r3, r2
   da9ca:	460a      	mov	r2, r1
   da9cc:	4601      	mov	r1, r0
   da9ce:	4802      	ldr	r0, [pc, #8]	; (da9d8 <strtol+0x10>)
   da9d0:	6800      	ldr	r0, [r0, #0]
   da9d2:	f7ff bf7f 	b.w	da8d4 <_strtol_l.isra.0>
   da9d6:	bf00      	nop
   da9d8:	2003e370 	.word	0x2003e370

000da9dc <dynalib_user>:
   da9dc:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   da9ec:	00000000 6e756f46 64612064 73657264     ....Found addres
   da9fc:	25203a73 20693330 25783028 29583230     s: %03i (0x%02X)
   daa0c:	44000a20 3a656e6f 756f4620 2520646e      ..Done: Found %
   daa1c:	65642069 65636976 2e297328 52000a20     i device(s). ..R
   daa2c:	706f626f 500a746f 20747261 746e6f43     obopot.Part Cont
   daa3c:	656e6961 61500a72 43207472 75706d6f     ainer.Part Compu
   daa4c:	0a726574 206c6c41 00746f50 6e6e6f43     ter.All Pot.Conn
   daa5c:	69746365 7420676e 6e49206f 6e726574     ecting to Intern
   daa6c:	0a207465 6e6f4300 7463656e 20676e69     et ..Connecting 
   daa7c:	49206f74 6e6f666e 000a7465 6f43200a     to Infonet... Co
   daa8c:	63656e6e 21646574 21212121 000a2021     nnected!!!!!! ..
   daa9c:	6e6e6f43 69746365 7420676e 514d206f     Connecting to MQ
   daaac:	2e2e5454 5200202e 79727465 20676e69     TT... .Retrying 
   daabc:	5454514d 6e6f6320 7463656e 206e6f69     MQTT connection 
   daacc:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
   daadc:	5454514d 6e6f4320 7463656e 00216465     MQTT Connected!.
   daaec:	676e6950 20676e69 5454514d 44000a20     Pinging MQTT ..D
   daafc:	6f637369 63656e6e 676e6974 57000a20     isconnecting ..W
   dab0c:	72657461 74747542 76206e6f 65756c61     aterButton value
   dab1c:	6925203a 6f4d000a 75747369 203a6572     : %i..Moisture: 
   dab2c:	000a6925 69746152 25203a6f 002c0069     %i..Ratio: %i.,.
   dab3c:	68676948 6c6f7020 6974756c 20216e6f     High pollution! 
   dab4c:	63726f46 69732065 6c616e67 74636120     Force signal act
   dab5c:	00657669 68676948 6c6f7020 6974756c     ive.High polluti
   dab6c:	00216e6f 20776f4c 6c6c6f70 6f697475     on!.Low pollutio
   dab7c:	4600216e 68736572 72696120 696f5300     n!.Fresh air.Soi
   dab8c:	6f6d206c 75747369 203a6572 000a6925     l moisture: %i..
   dab9c:	706d6554 74617265 3a657275 332e2520     Temperature: %.3
   dabac:	48000a66 64696d75 3a797469 332e2520     f..Humidity: %.3
   dabbc:	50000a66 73736572 3a657275 332e2520     f..Pressure: %.3
   dabcc:	41000a66 51207269 696c6175 203a7974     f..Air Quality: 
   dabdc:	000a6925 74737544 6625203a 73694d00     %i..Dust: %f.Mis
   dabec:	46726574 0078656c 612e6f69 72666164     terFlex.io.adafr
   dabfc:	2e746975 006d6f63 5f6f6961 62497656     uit.com.aio_VvIb
   dac0c:	73683534 564b6548 70444b38 454b4f6c     45hsHeKV8KDplOKE
   dac1c:	7a787939 64776464 73694d00 46726574     9yxzddwd.MisterF
   dac2c:	2f78656c 64656566 61572f73 42726574     lex/feeds/WaterB
   dac3c:	6f747475 694d006e 72657473 78656c46     utton.MisterFlex
   dac4c:	6565662f 482f7364 64696d75 00797469     /feeds/Humidity.
   dac5c:	7473694d 6c467265 662f7865 73646565     MisterFlex/feeds
   dac6c:	7375442f 6e6f4374 746e6563 69746172     /DustConcentrati
   dac7c:	4d006e6f 65747369 656c4672 65662f78     on.MisterFlex/fe
   dac8c:	2f736465 6c696f53 73696f4d 65727574     eds/SoilMoisture
   dac9c:	73694d00 46726574 2f78656c 64656566     .MisterFlex/feed
   dacac:	72502f73 75737365 4d006572 65747369     s/Pressure.Miste
   dacbc:	656c4672 65662f78 2f736465 51726941     rFlex/feeds/AirQ
   daccc:	696c6175 4d007974 65747369 656c4672     uality.MisterFle
   dacdc:	65662f78 2f736465 706d6554 74617265     x/feeds/Temperat
   dacec:	00657275                                ure.

000dacf0 <_ZTV16Adafruit_SSD1306>:
	...
   dacf8:	000d40c9 000d48a1 000d5441 000d6fb9     .@...H..AT...o..
   dad08:	000d4d21 000d5159 000d4bb1 000d4a45     !M..YQ...K..EJ..
   dad18:	000d5215 000d52b3 000d52e9 000d5305     .R...R...R...S..

000dad28 <_ZL4font>:
   dad28:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   dad38:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   dad48:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   dad58:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   dad68:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   dad78:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   dad88:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   dad98:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   dada8:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   dadb8:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   dadc8:	00000000 5f000000 07000000 14000700     ......._........
   dadd8:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   dade8:	00502056 00030708 41221c00 22410000     V P......."A..A"
   dadf8:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   dae08:	08080800 00000808 20006060 02040810     ........``. ....
   dae18:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   dae28:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   dae38:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   dae48:	00001e29 00000014 00003440 22140800     ).......@4....."
   dae58:	14141441 41001414 02081422 06095901     A......A"....Y..
   dae68:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   dae78:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   dae88:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   dae98:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   daea8:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   daeb8:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   daec8:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   daed8:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   daee8:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   daef8:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   daf08:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   daf18:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   daf28:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   daf38:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   daf48:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   daf58:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   daf68:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   daf78:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   daf88:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   daf98:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   dafa8:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   dafb8:	41795555 78545421 54552141 54204078     UUyA!TTxA!UTx@ T
   dafc8:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   dafd8:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   dafe8:	45010042 29f0407c f0f02924 f0282528     B..E|@.)$)..(%(.
   daff8:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   db008:	32494949 48484832 484a3232 413a3048     III22HHH22JHH0:A
   db018:	3a7a2141 78204042 a0a09d00 4444397d     A!z:B@ x....}9DD
   db028:	403d3944 3c3d4040 2424ff24 43497e48     D9=@@@=<$.$$H~IC
   db038:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   db048:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   db058:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   db068:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   db078:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   db088:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   db098:	005500aa aa55aaaa 0000aa55 1000ff00     ..U...U.U.......
   db0a8:	00ff1010 ff141414 ff101000 1010ff00     ................
   db0b8:	14f010f0 00fc1414 00f71414 ff0000ff     ................
   db0c8:	1414ff00 14fc04f4 1f101714 101f1010     ................
   db0d8:	1414141f 1010001f 0000f010 101f0000     ................
   db0e8:	1f101010 10101010 000010f0 1010ff00     ................
   db0f8:	10101010 ff101010 00000010 000014ff     ................
   db108:	00ff00ff 17101f00 04fc0000 171414f4     ................
   db118:	14141710 00f404f4 f700ff00 14141414     ................
   db128:	f7141414 1414f700 10141714 1f101f10     ................
   db138:	f4141414 f0101014 0000f010 001f101f     ................
   db148:	141f0000 fc000000 f0000014 1010f010     ................
   db158:	14ff10ff 14ff1414 1f101010 00000000     ................
   db168:	ffff10f0 f0ffffff f0f0f0f0 00ffffff     ................
   db178:	00000000 0f0fffff 380f0f0f 44384444     ...........8DD8D
   db188:	3e2a2a7c 02027e14 7e020606 63027e02     |**>.~.....~.~.c
   db198:	63414955 3c444438 207e4004 0206201e     UIAc8DD<.@~ . ..
   db1a8:	9902027e 99a5e7a5 2a492a1c 01724c1c     ~........*I*.Lr.
   db1b8:	4a304c72 30304d4d 30487848 465a62bc     rL0JMM00HxH0.bZF
   db1c8:	49493e3d 017e0049 2a7e0101 2a2a2a2a     =>III.~...~*****
   db1d8:	445f4444 4a514044 44404044 0040514a     DD_DD@QJD@@DJQ@.
   db1e8:	0301ff00 00ff80e0 6b080800 1236086b     ...........kk.6.
   db1f8:	06362436 060f090f 18180000 10000000     6$6.............
   db208:	40300010 000101ff 1e01011f 171d1900     ..0@............
   db218:	3c3c0012 00003c3c 00000000              ..<<<<......

000db224 <_ZTV12Adafruit_GFX>:
	...
   db234:	000d5441 000d6fb9 000d40a5 000d5159     AT...o...@..YQ..
   db244:	000d527d 000d5299 000d5215 000d52b3     }R...R...R...R..
   db254:	000d52e9 000d5305                       .R...S..

000db25c <_ZTV19Adafruit_MQTT_SPARK>:
	...
   db264:	000d40cb 000d48af 000d54e7 000d5593     .@...H...T...U..
   db274:	000d55c5 000d54fb 000d553b 706f7244     .U...T..;U..Drop
   db284:	20646570 61702061 74656b63 6b6e5500     ped a packet.Unk
   db294:	6e776f6e 72726520 4d00726f 00545451     nown error.MQTT.
   db2a4:	64252525 6664252e 69614600 2064656c     %%%d.%df.Failed 
   db2b4:	73206f74 63736275 65626972 6e6f4300     to subscribe.Con
   db2c4:	7463656e 206e6f69 6c696166 54006465     nection failed.T
   db2d4:	53206568 65767265 6f642072 6e207365     he Server does n
   db2e4:	7320746f 6f707075 74207472 6c206568     ot support the l
   db2f4:	6c657665 20666f20 20656874 5454514d     evel of the MQTT
   db304:	6f727020 6f636f74 6572206c 73657571      protocol reques
   db314:	00646574 20656854 65696c43 6920746e     ted.The Client i
   db324:	746e6564 65696669 73692072 726f6320     dentifier is cor
   db334:	74636572 46545520 6220382d 6e207475     rect UTF-8 but n
   db344:	6120746f 776f6c6c 62206465 68742079     ot allowed by th
   db354:	65532065 72657672 65685400 54514d20     e Server.The MQT
   db364:	65732054 63697672 73692065 616e7520     T service is una
   db374:	6c696176 656c6261 65685400 74616420     vailable.The dat
   db384:	6e692061 65687420 65737520 616e2072     a in the user na
   db394:	6f20656d 61702072 6f777373 69206472     me or password i
   db3a4:	616d2073 726f666c 0064656d 20746f4e     s malformed.Not 
   db3b4:	68747561 7a69726f 74206465 6f63206f     authorized to co
   db3c4:	63656e6e 78450074 64656563 72206465     nnect.Exceeded r
   db3d4:	6e6f6365 7463656e 74617220 696c2065     econnect rate li
   db3e4:	2e74696d 656c5020 20657361 20797274     mit. Please try 
   db3f4:	69616761 616c206e 2e726574 756f5900     again later..You
   db404:	76616820 65622065 62206e65 656e6e61      have been banne
   db414:	72662064 63206d6f 656e6e6f 6e697463     d from connectin
   db424:	50202e67 7361656c 6f632065 6361746e     g. Please contac
   db434:	68742074 514d2065 73205454 65767265     t the MQTT serve
   db444:	64612072 696e696d 61727473 20726f74     r administrator 
   db454:	20726f66 65726f6d 74656420 736c6961     for more details
   db464:	0000002e                                ....

000db468 <_ZTV13Adafruit_MQTT>:
	...
   db478:	000d40a5 000d40a5 000d40a5 000d40a5     .@...@...@...@..
   db488:	000d40a5                                .@..

000db48c <CSWTCH.44>:
   db48c:	000db2ad 000db2c1 000db291 000db2d3     ................
   db49c:	000db318 000db35d 000db37d 000db3b0     ....]...}.......
   db4ac:	000db3ca 000db401 61666564 20746c75     ........default 
   db4bc:	42534d00 42534c00 50533c00 74655349     .MSB.LSB.<SPISet
   db4cc:	676e6974 65642073 6c756166 3c003e74     tings default>.<
   db4dc:	53495053 69747465 2073676e 75257325     SPISettings %s%u
   db4ec:	20732520 45444f4d 003e7525               %s MODE%u>.

000db4f8 <_ZTVN8particle11SPISettingsE>:
	...
   db500:	000d5c59 000d5c47 000d5c49              Y\..G\..I\..

000db50c <_ZTVN5spark13EthernetClassE>:
	...
   db514:	000d6b87 000d6b7d 000d6b73 000d6b69     .k..}k..sk..ik..
   db524:	000d6b5d 000d6b51 000d6b45 000d6b3d     ]k..Qk..Ek..=k..
   db534:	000d6b33 000d6b29 000d7f01              3k..)k......

000db540 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   db540:	18100800 38302820                       .... (08

000db548 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   db550:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   db560:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   db570:	007a2553 74637361 00656d69              S%z.asctime.

000db57c <_ZTV9IPAddress>:
	...
   db584:	000d749d 000d748d 000d748f              .t...t...t..

000db590 <_ZTV9USBSerial>:
	...
   db598:	000d759f 000d7607 000d75dd 000d6fb9     .u...v...u...o..
   db5a8:	000d75cf 000d75a1 000d75b1 000d7601     .u...u...u...v..
   db5b8:	000d75c1 000d759b                       .u...u..

000db5c0 <_ZTV11USARTSerial>:
	...
   db5c8:	000d76a9 000d7715 000d76ed 000d6fb9     .v...w...v...o..
   db5d8:	000d76bd 000d76d9 000d76cb 000d76e7     .v...v...v...v..
   db5e8:	000d76ab 000d76af                       .v...v..

000db5f0 <_ZTV7TwoWire>:
	...
   db5f8:	000d77a5 000d77ef 000d77c7 000d77a7     .w...w...w...w..
   db608:	000d77cf 000d77d7 000d77df 000d77e7     .w...w...w...w..
   db618:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   db628:	203d2072 00006425                       r = %d..

000db630 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db638:	000d7923 000d7945 000d7e17 000d7953     #y..Ey...~..Sy..
   db648:	000d7925                                %y..

000db64c <_ZTV9TCPClient>:
	...
   db654:	000d40cd 000d412d 000d78a1 000d78bb     .@..-A...x...x..
   db664:	000d7cad 000d7a1f 000d79f1 000d78e5     .|...z...y...x..
   db674:	000d7bb5 000d7aa9 000d7a53 000d7d61     .{...z..Sz..a}..
   db684:	000d78e7 000d7919 000d78cd 000d7957     .x...y...x..Wy..
   db694:	000d79d1                                .y..

000db698 <_ZTVN5spark9WiFiClassE>:
	...
   db6a0:	000d7e7b 000d7e71 000d7e67 000d7e1d     {~..q~..g~...~..
   db6b0:	000d7e5b 000d7e4f 000d7e43 000d7e3b     [~..O~..C~..;~..
   db6c0:	000d7e31 000d7e27 000d7f01              1~..'~......

000db6cc <_ZTVN5spark12NetworkClassE>:
	...
   db6d4:	000d7e99 000d7ea3 000d7ead 000d7eb7     .~...~...~...~..
   db6e4:	000d7ec1 000d7ecd 000d7ed9 000d7ee5     .~...~...~...~..
   db6f4:	000d7eed 000d7ef7 000d7f01              .~...~......

000db700 <_ZSt7nothrow>:
	...

000db701 <_ZTSSt19_Sp_make_shared_tag>:
   db701:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   db711:	5f646572 00676174                        red_tag....

000db71c <_ZTISt19_Sp_make_shared_tag>:
   db71c:	000db75c 000db701                       \.......

000db724 <_ZTIN10__cxxabiv117__class_type_infoE>:
   db724:	000db7bc 000db730 000db7e0              ....0.......

000db730 <_ZTSN10__cxxabiv117__class_type_infoE>:
   db730:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   db740:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   db750:	00000045                                E...

000db754 <_ZTVN10__cxxabiv117__class_type_infoE>:
   db754:	00000000 000db724 000d8239 000d824d     ....$...9...M...
   db764:	000d83e1 000d83e1 000d82b7 000d81f9     ................
   db774:	000d829f 000d8261 000d822d              ....a...-...

000db780 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   db780:	000db7bc 000db78c 000db724              ........$...

000db78c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   db78c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   db79c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   db7ac:	456f666e 00000000                       nfoE....

000db7b4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   db7b4:	00000000 000db780 000d82e1 000d82f5     ................
   db7c4:	000d83e1 000d83e1 000d82b7 000d81f9     ................
   db7d4:	000d83b5 000d8341 000d8309              ....A.......

000db7e0 <_ZTISt9type_info>:
   db7e0:	000db75c 000db7e8                       \.......

000db7e8 <_ZTSSt9type_info>:
   db7e8:	74397453 5f657079 6f666e69 00000000     St9type_info....
   db7f8:	00776f70 00000000                       pow.....

000db800 <TWO52>:
   db800:	00000000 43300000 00000000 c3300000     ......0C......0.

000db810 <_ctype_>:
   db810:	20202000 20202020 28282020 20282828     .         ((((( 
   db820:	20202020 20202020 20202020 20202020                     
   db830:	10108820 10101010 10101010 10101010      ...............
   db840:	04040410 04040404 10040404 10101010     ................
   db850:	41411010 41414141 01010101 01010101     ..AAAAAA........
   db860:	01010101 01010101 01010101 10101010     ................
   db870:	42421010 42424242 02020202 02020202     ..BBBBBB........
   db880:	02020202 02020202 02020202 10101010     ................
   db890:	00000020 00000000 00000000 00000000      ...............
	...

000db911 <link_const_variable_data_end>:
   db911:	00          	.byte	0x00
	...

000db914 <link_constructors_location>:
   db914:	000d48bd 	.word	0x000d48bd
   db918:	000d6b91 	.word	0x000d6b91
   db91c:	000d6dfd 	.word	0x000d6dfd
   db920:	000d6f91 	.word	0x000d6f91
   db924:	000d72c5 	.word	0x000d72c5
   db928:	000d7315 	.word	0x000d7315
   db92c:	000d734d 	.word	0x000d734d
   db930:	000d7e85 	.word	0x000d7e85
   db934:	000d7fd5 	.word	0x000d7fd5

000db938 <link_constructors_end>:
	...
